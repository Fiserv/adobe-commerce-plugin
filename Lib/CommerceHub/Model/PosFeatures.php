<?php
/**
 * PosFeatures
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Fiserv\Payments\Lib\CommerceHub
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Payments
 *
 * This API Specification is designed to provide technical guidance required to consume and integrate with our APIs for payment processing.
 *
 * The version of the OpenAPI document: v1.3.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.2.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Fiserv\Payments\Lib\CommerceHub\Model;

use \ArrayAccess;
use \Fiserv\Payments\Lib\CommerceHub\ObjectSerializer;

/**
 * PosFeatures Class Doc Comment
 *
 * @category Class
 * @description Terminal or software feature information.
 * @package  Fiserv\Payments\Lib\CommerceHub
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class PosFeatures implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'PosFeatures';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'host_processing_platform' => 'string',
        'message_format_support' => 'string',
        'emv_support' => 'string',
        'peripheral_information1' => 'string',
        'peripheral_information2' => 'string',
        'communication_information1' => 'string',
        'communication_information2' => 'string',
        'industry_information1' => 'string',
        'industry_information2' => 'string',
        'class_and_compliance_certification' => 'string',
        'other_capabilities' => 'string',
        'card_capture_capability' => 'bool',
        'pin_authentication_capability' => 'string',
        'authentication_capability' => 'string',
        'tax_prompt_capability' => 'string',
        'terminal_entry_capability' => 'string',
        'pi_ncapture_capability' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'host_processing_platform' => null,
        'message_format_support' => null,
        'emv_support' => null,
        'peripheral_information1' => null,
        'peripheral_information2' => null,
        'communication_information1' => null,
        'communication_information2' => null,
        'industry_information1' => null,
        'industry_information2' => null,
        'class_and_compliance_certification' => null,
        'other_capabilities' => null,
        'card_capture_capability' => null,
        'pin_authentication_capability' => null,
        'authentication_capability' => null,
        'tax_prompt_capability' => null,
        'terminal_entry_capability' => null,
        'pi_ncapture_capability' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'host_processing_platform' => false,
		'message_format_support' => false,
		'emv_support' => false,
		'peripheral_information1' => false,
		'peripheral_information2' => false,
		'communication_information1' => false,
		'communication_information2' => false,
		'industry_information1' => false,
		'industry_information2' => false,
		'class_and_compliance_certification' => false,
		'other_capabilities' => false,
		'card_capture_capability' => false,
		'pin_authentication_capability' => false,
		'authentication_capability' => false,
		'tax_prompt_capability' => false,
		'terminal_entry_capability' => false,
		'pi_ncapture_capability' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'host_processing_platform' => 'hostProcessingPlatform',
        'message_format_support' => 'messageFormatSupport',
        'emv_support' => 'emvSupport',
        'peripheral_information1' => 'peripheralInformation1',
        'peripheral_information2' => 'peripheralInformation2',
        'communication_information1' => 'communicationInformation1',
        'communication_information2' => 'communicationInformation2',
        'industry_information1' => 'industryInformation1',
        'industry_information2' => 'industryInformation2',
        'class_and_compliance_certification' => 'classAndComplianceCertification',
        'other_capabilities' => 'otherCapabilities',
        'card_capture_capability' => 'cardCaptureCapability',
        'pin_authentication_capability' => 'pinAuthenticationCapability',
        'authentication_capability' => 'authenticationCapability',
        'tax_prompt_capability' => 'taxPromptCapability',
        'terminal_entry_capability' => 'terminalEntryCapability',
        'pi_ncapture_capability' => 'PINcaptureCapability'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'host_processing_platform' => 'setHostProcessingPlatform',
        'message_format_support' => 'setMessageFormatSupport',
        'emv_support' => 'setEmvSupport',
        'peripheral_information1' => 'setPeripheralInformation1',
        'peripheral_information2' => 'setPeripheralInformation2',
        'communication_information1' => 'setCommunicationInformation1',
        'communication_information2' => 'setCommunicationInformation2',
        'industry_information1' => 'setIndustryInformation1',
        'industry_information2' => 'setIndustryInformation2',
        'class_and_compliance_certification' => 'setClassAndComplianceCertification',
        'other_capabilities' => 'setOtherCapabilities',
        'card_capture_capability' => 'setCardCaptureCapability',
        'pin_authentication_capability' => 'setPinAuthenticationCapability',
        'authentication_capability' => 'setAuthenticationCapability',
        'tax_prompt_capability' => 'setTaxPromptCapability',
        'terminal_entry_capability' => 'setTerminalEntryCapability',
        'pi_ncapture_capability' => 'setPiNcaptureCapability'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'host_processing_platform' => 'getHostProcessingPlatform',
        'message_format_support' => 'getMessageFormatSupport',
        'emv_support' => 'getEmvSupport',
        'peripheral_information1' => 'getPeripheralInformation1',
        'peripheral_information2' => 'getPeripheralInformation2',
        'communication_information1' => 'getCommunicationInformation1',
        'communication_information2' => 'getCommunicationInformation2',
        'industry_information1' => 'getIndustryInformation1',
        'industry_information2' => 'getIndustryInformation2',
        'class_and_compliance_certification' => 'getClassAndComplianceCertification',
        'other_capabilities' => 'getOtherCapabilities',
        'card_capture_capability' => 'getCardCaptureCapability',
        'pin_authentication_capability' => 'getPinAuthenticationCapability',
        'authentication_capability' => 'getAuthenticationCapability',
        'tax_prompt_capability' => 'getTaxPromptCapability',
        'terminal_entry_capability' => 'getTerminalEntryCapability',
        'pi_ncapture_capability' => 'getPiNcaptureCapability'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('host_processing_platform', $data ?? [], null);
        $this->setIfExists('message_format_support', $data ?? [], null);
        $this->setIfExists('emv_support', $data ?? [], null);
        $this->setIfExists('peripheral_information1', $data ?? [], null);
        $this->setIfExists('peripheral_information2', $data ?? [], null);
        $this->setIfExists('communication_information1', $data ?? [], null);
        $this->setIfExists('communication_information2', $data ?? [], null);
        $this->setIfExists('industry_information1', $data ?? [], null);
        $this->setIfExists('industry_information2', $data ?? [], null);
        $this->setIfExists('class_and_compliance_certification', $data ?? [], null);
        $this->setIfExists('other_capabilities', $data ?? [], null);
        $this->setIfExists('card_capture_capability', $data ?? [], null);
        $this->setIfExists('pin_authentication_capability', $data ?? [], null);
        $this->setIfExists('authentication_capability', $data ?? [], null);
        $this->setIfExists('tax_prompt_capability', $data ?? [], null);
        $this->setIfExists('terminal_entry_capability', $data ?? [], null);
        $this->setIfExists('pi_ncapture_capability', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['pin_authentication_capability']) && (mb_strlen($this->container['pin_authentication_capability']) > 25)) {
            $invalidProperties[] = "invalid value for 'pin_authentication_capability', the character length must be smaller than or equal to 25.";
        }

        if (!is_null($this->container['authentication_capability']) && (mb_strlen($this->container['authentication_capability']) > 50)) {
            $invalidProperties[] = "invalid value for 'authentication_capability', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['tax_prompt_capability']) && (mb_strlen($this->container['tax_prompt_capability']) > 25)) {
            $invalidProperties[] = "invalid value for 'tax_prompt_capability', the character length must be smaller than or equal to 25.";
        }

        if (!is_null($this->container['terminal_entry_capability']) && (mb_strlen($this->container['terminal_entry_capability']) > 28)) {
            $invalidProperties[] = "invalid value for 'terminal_entry_capability', the character length must be smaller than or equal to 28.";
        }

        if (!is_null($this->container['pi_ncapture_capability']) && (mb_strlen($this->container['pi_ncapture_capability']) > 50)) {
            $invalidProperties[] = "invalid value for 'pi_ncapture_capability', the character length must be smaller than or equal to 50.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets host_processing_platform
     *
     * @return string|null
     */
    public function getHostProcessingPlatform()
    {
        return $this->container['host_processing_platform'];
    }

    /**
     * Sets host_processing_platform
     *
     * @param string|null $host_processing_platform Indicates which system is being used by the payment application and to what extent it is being used.
     *
     * @return self
     */
    public function setHostProcessingPlatform($host_processing_platform)
    {

        if (is_null($host_processing_platform)) {
            throw new \InvalidArgumentException('non-nullable host_processing_platform cannot be null');
        }

        $this->container['host_processing_platform'] = $host_processing_platform;

        return $this;
    }

    /**
     * Gets message_format_support
     *
     * @return string|null
     */
    public function getMessageFormatSupport()
    {
        return $this->container['message_format_support'];
    }

    /**
     * Sets message_format_support
     *
     * @param string|null $message_format_support Indicates which message format the application uses to communicate with the Chase merchant services PNS Host.
     *
     * @return self
     */
    public function setMessageFormatSupport($message_format_support)
    {

        if (is_null($message_format_support)) {
            throw new \InvalidArgumentException('non-nullable message_format_support cannot be null');
        }

        $this->container['message_format_support'] = $message_format_support;

        return $this;
    }

    /**
     * Gets emv_support
     *
     * @return string|null
     */
    public function getEmvSupport()
    {
        return $this->container['emv_support'];
    }

    /**
     * Sets emv_support
     *
     * @param string|null $emv_support Indicates the payment brands supported by the application for EMV processing. Required for any application that supports EMV processing.
     *
     * @return self
     */
    public function setEmvSupport($emv_support)
    {

        if (is_null($emv_support)) {
            throw new \InvalidArgumentException('non-nullable emv_support cannot be null');
        }

        $this->container['emv_support'] = $emv_support;

        return $this;
    }

    /**
     * Gets peripheral_information1
     *
     * @return string|null
     */
    public function getPeripheralInformation1()
    {
        return $this->container['peripheral_information1'];
    }

    /**
     * Sets peripheral_information1
     *
     * @param string|null $peripheral_information1 Indicates the type of peripheral device attached to or being used by the payment application or point of sale device. Only the highest level of support should be indicated unless multiple devices are attached.
     *
     * @return self
     */
    public function setPeripheralInformation1($peripheral_information1)
    {

        if (is_null($peripheral_information1)) {
            throw new \InvalidArgumentException('non-nullable peripheral_information1 cannot be null');
        }

        $this->container['peripheral_information1'] = $peripheral_information1;

        return $this;
    }

    /**
     * Gets peripheral_information2
     *
     * @return string|null
     */
    public function getPeripheralInformation2()
    {
        return $this->container['peripheral_information2'];
    }

    /**
     * Sets peripheral_information2
     *
     * @param string|null $peripheral_information2 Reserved for future use.
     *
     * @return self
     */
    public function setPeripheralInformation2($peripheral_information2)
    {

        if (is_null($peripheral_information2)) {
            throw new \InvalidArgumentException('non-nullable peripheral_information2 cannot be null');
        }

        $this->container['peripheral_information2'] = $peripheral_information2;

        return $this;
    }

    /**
     * Gets communication_information1
     *
     * @return string|null
     */
    public function getCommunicationInformation1()
    {
        return $this->container['communication_information1'];
    }

    /**
     * Sets communication_information1
     *
     * @param string|null $communication_information1 Indicates the methods of communication supported by the payment application. It is possible for an application to support more than one type of communication at a time.
     *
     * @return self
     */
    public function setCommunicationInformation1($communication_information1)
    {

        if (is_null($communication_information1)) {
            throw new \InvalidArgumentException('non-nullable communication_information1 cannot be null');
        }

        $this->container['communication_information1'] = $communication_information1;

        return $this;
    }

    /**
     * Gets communication_information2
     *
     * @return string|null
     */
    public function getCommunicationInformation2()
    {
        return $this->container['communication_information2'];
    }

    /**
     * Sets communication_information2
     *
     * @param string|null $communication_information2 Reserved for future use.
     *
     * @return self
     */
    public function setCommunicationInformation2($communication_information2)
    {

        if (is_null($communication_information2)) {
            throw new \InvalidArgumentException('non-nullable communication_information2 cannot be null');
        }

        $this->container['communication_information2'] = $communication_information2;

        return $this;
    }

    /**
     * Gets industry_information1
     *
     * @return string|null
     */
    public function getIndustryInformation1()
    {
        return $this->container['industry_information1'];
    }

    /**
     * Sets industry_information1
     *
     * @param string|null $industry_information1 Indicates the industries supported by the payment application. More than one industry can be indicated.
     *
     * @return self
     */
    public function setIndustryInformation1($industry_information1)
    {

        if (is_null($industry_information1)) {
            throw new \InvalidArgumentException('non-nullable industry_information1 cannot be null');
        }

        $this->container['industry_information1'] = $industry_information1;

        return $this;
    }

    /**
     * Gets industry_information2
     *
     * @return string|null
     */
    public function getIndustryInformation2()
    {
        return $this->container['industry_information2'];
    }

    /**
     * Sets industry_information2
     *
     * @param string|null $industry_information2 Reserved for future use.
     *
     * @return self
     */
    public function setIndustryInformation2($industry_information2)
    {

        if (is_null($industry_information2)) {
            throw new \InvalidArgumentException('non-nullable industry_information2 cannot be null');
        }

        $this->container['industry_information2'] = $industry_information2;

        return $this;
    }

    /**
     * Gets class_and_compliance_certification
     *
     * @return string|null
     */
    public function getClassAndComplianceCertification()
    {
        return $this->container['class_and_compliance_certification'];
    }

    /**
     * Sets class_and_compliance_certification
     *
     * @param string|null $class_and_compliance_certification Indicates the type of application or device sending the transaction, Class A or Class B.
     *
     * @return self
     */
    public function setClassAndComplianceCertification($class_and_compliance_certification)
    {

        if (is_null($class_and_compliance_certification)) {
            throw new \InvalidArgumentException('non-nullable class_and_compliance_certification cannot be null');
        }

        $this->container['class_and_compliance_certification'] = $class_and_compliance_certification;

        return $this;
    }

    /**
     * Gets other_capabilities
     *
     * @return string|null
     */
    public function getOtherCapabilities()
    {
        return $this->container['other_capabilities'];
    }

    /**
     * Sets other_capabilities
     *
     * @param string|null $other_capabilities Indicates whether the transaction originated from a mobile device that uses Chase merchant services’ mobile payment gateway or originated from a device that does not use Chase merchant services’ Mobile Payment Gateway. Note: It is required for merchants to send the appropriate information in this element in the case where a mobile terminal is supported.
     *
     * @return self
     */
    public function setOtherCapabilities($other_capabilities)
    {

        if (is_null($other_capabilities)) {
            throw new \InvalidArgumentException('non-nullable other_capabilities cannot be null');
        }

        $this->container['other_capabilities'] = $other_capabilities;

        return $this;
    }

    /**
     * Gets card_capture_capability
     *
     * @return bool|null
     */
    public function getCardCaptureCapability()
    {
        return $this->container['card_capture_capability'];
    }

    /**
     * Sets card_capture_capability
     *
     * @param bool|null $card_capture_capability Identifies if the terminal is able to capture the card data.
     *
     * @return self
     */
    public function setCardCaptureCapability($card_capture_capability)
    {

        if (is_null($card_capture_capability)) {
            throw new \InvalidArgumentException('non-nullable card_capture_capability cannot be null');
        }

        $this->container['card_capture_capability'] = $card_capture_capability;

        return $this;
    }

    /**
     * Gets pin_authentication_capability
     *
     * @return string|null
     */
    public function getPinAuthenticationCapability()
    {
        return $this->container['pin_authentication_capability'];
    }

    /**
     * Sets pin_authentication_capability
     *
     * @param string|null $pin_authentication_capability PIN entry capability of the Point of Sale.  Valid Values: * UNSPECIFIED * CAN_ACCEPT_PIN * CANNOT_ACCEPT_PIN * PIN_PAD_IS_DOWN * PIN_VERIFIED_BY_TERMINAL
     *
     * @return self
     */
    public function setPinAuthenticationCapability($pin_authentication_capability)
    {
        if (!is_null($pin_authentication_capability) && (mb_strlen($pin_authentication_capability) > 25)) {
            throw new \InvalidArgumentException('invalid length for $pin_authentication_capability when calling PosFeatures., must be smaller than or equal to 25.');
        }


        if (is_null($pin_authentication_capability)) {
            throw new \InvalidArgumentException('non-nullable pin_authentication_capability cannot be null');
        }

        $this->container['pin_authentication_capability'] = $pin_authentication_capability;

        return $this;
    }

    /**
     * Gets authentication_capability
     *
     * @return string|null
     */
    public function getAuthenticationCapability()
    {
        return $this->container['authentication_capability'];
    }

    /**
     * Sets authentication_capability
     *
     * @param string|null $authentication_capability Identifies the terminals capability to authenticate  the cardholder.  Valid Values: * UNSPECIFIED * NONE * PIN * ELECTRONIC_SIGNATURE * INOPERATIVE * OTHER
     *
     * @return self
     */
    public function setAuthenticationCapability($authentication_capability)
    {
        if (!is_null($authentication_capability) && (mb_strlen($authentication_capability) > 50)) {
            throw new \InvalidArgumentException('invalid length for $authentication_capability when calling PosFeatures., must be smaller than or equal to 50.');
        }


        if (is_null($authentication_capability)) {
            throw new \InvalidArgumentException('non-nullable authentication_capability cannot be null');
        }

        $this->container['authentication_capability'] = $authentication_capability;

        return $this;
    }

    /**
     * Gets tax_prompt_capability
     *
     * @return string|null
     */
    public function getTaxPromptCapability()
    {
        return $this->container['tax_prompt_capability'];
    }

    /**
     * Sets tax_prompt_capability
     *
     * @param string|null $tax_prompt_capability This field indicates the capability of the terminal to prompt for the Tax Amount, and then handle the Commercial card type in the response message.  Valid Values: * CAPABLE * NOT_CAPABLE
     *
     * @return self
     */
    public function setTaxPromptCapability($tax_prompt_capability)
    {
        if (!is_null($tax_prompt_capability) && (mb_strlen($tax_prompt_capability) > 25)) {
            throw new \InvalidArgumentException('invalid length for $tax_prompt_capability when calling PosFeatures., must be smaller than or equal to 25.');
        }


        if (is_null($tax_prompt_capability)) {
            throw new \InvalidArgumentException('non-nullable tax_prompt_capability cannot be null');
        }

        $this->container['tax_prompt_capability'] = $tax_prompt_capability;

        return $this;
    }

    /**
     * Gets terminal_entry_capability
     *
     * @return string|null
     */
    public function getTerminalEntryCapability()
    {
        return $this->container['terminal_entry_capability'];
    }

    /**
     * Sets terminal_entry_capability
     *
     * @param string|null $terminal_entry_capability Identifies how data can be entered in the terminal or software.  Valid Values: * UNSPECIFIED - Default * ECOMMERCE - E-commerce no terminal used * MAG_STRIPE_ONLY - Track read only * MAG_STRIPE_MANUAL - Track read or manual key * MAG_STRIPE_MANUAL_CHIP - Track read, manual key or chip * BARCODE - Barcode scan * CONTACTLESS - Contactless integrated circuit read * OCR - Opitcal character reader * CHIP_ONLY - Chip only * CHIP_MAG_STRIPE - Chip with track fallback * MANUAL_ONLY - Manual key only * CONTACTLESS_MAG_STRIPE - Contactless or track read * HYBRID - Hybrid entry mode\"
     *
     * @return self
     */
    public function setTerminalEntryCapability($terminal_entry_capability)
    {
        if (!is_null($terminal_entry_capability) && (mb_strlen($terminal_entry_capability) > 28)) {
            throw new \InvalidArgumentException('invalid length for $terminal_entry_capability when calling PosFeatures., must be smaller than or equal to 28.');
        }


        if (is_null($terminal_entry_capability)) {
            throw new \InvalidArgumentException('non-nullable terminal_entry_capability cannot be null');
        }

        $this->container['terminal_entry_capability'] = $terminal_entry_capability;

        return $this;
    }

    /**
     * Gets pi_ncapture_capability
     *
     * @return string|null
     */
    public function getPiNcaptureCapability()
    {
        return $this->container['pi_ncapture_capability'];
    }

    /**
     * Sets pi_ncapture_capability
     *
     * @param string|null $pi_ncapture_capability Identifies the terminals capability to caputer a PIN.  Valid Values: * UNSPECIFIED - Default * PIN_4 - PIN capability 4 characters maximum * PIN_5 - PIN capture capability 5 characters maximum * PIN_6 - PIN capture capability 6 characters maximum * PIN_7 - PIN capture capability 7 characters maximum * PIN_8 - PIN capture capability 8 characters maximum * PIN_9 - PIN capture capability 9 characters maximum * PIN_10 - PIN capture capability 10 characters maximum * PIN_11 - PIN capture capability 11 characters maximum * PIN_12 - PIN capture capability 12 characters maximum * NONE
     *
     * @return self
     */
    public function setPiNcaptureCapability($pi_ncapture_capability)
    {
        if (!is_null($pi_ncapture_capability) && (mb_strlen($pi_ncapture_capability) > 50)) {
            throw new \InvalidArgumentException('invalid length for $pi_ncapture_capability when calling PosFeatures., must be smaller than or equal to 50.');
        }


        if (is_null($pi_ncapture_capability)) {
            throw new \InvalidArgumentException('non-nullable pi_ncapture_capability cannot be null');
        }

        $this->container['pi_ncapture_capability'] = $pi_ncapture_capability;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


