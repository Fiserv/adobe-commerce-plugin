<?php
/**
 * EncryptionData
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Fiserv\Payments\Lib\CommerceHub
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Payments
 *
 * This API Specification is designed to provide technical guidance required to consume and integrate with our APIs for payment processing.
 *
 * The version of the OpenAPI document: v1.3.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.2.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Fiserv\Payments\Lib\CommerceHub\Model;

use \ArrayAccess;
use \Fiserv\Payments\Lib\CommerceHub\ObjectSerializer;

/**
 * EncryptionData Class Doc Comment
 *
 * @category Class
 * @description Contains the &lt;a href&#x3D;\&quot;../docs?path&#x3D;docs/Resources/Master-Data/Encryption-Data.md\&quot;&gt;Encrypted Data&lt;/a&gt; for EMV, Track, or Manual Entry transactions.
 * @package  Fiserv\Payments\Lib\CommerceHub
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class EncryptionData implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'EncryptionData';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'encryption_type' => 'string',
        'encryption_target' => 'string',
        'encryption_block' => 'string',
        'device_type' => 'string',
        'securitykey_update_indicator' => 'bool',
        'key_id' => 'string',
        'encrypted_key' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'encryption_type' => null,
        'encryption_target' => null,
        'encryption_block' => null,
        'device_type' => null,
        'securitykey_update_indicator' => null,
        'key_id' => null,
        'encrypted_key' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'encryption_type' => false,
		'encryption_target' => false,
		'encryption_block' => false,
		'device_type' => false,
		'securitykey_update_indicator' => false,
		'key_id' => false,
		'encrypted_key' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'encryption_type' => 'encryptionType',
        'encryption_target' => 'encryptionTarget',
        'encryption_block' => 'encryptionBlock',
        'device_type' => 'deviceType',
        'securitykey_update_indicator' => 'securitykeyUpdateIndicator',
        'key_id' => 'keyId',
        'encrypted_key' => 'encryptedKey'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'encryption_type' => 'setEncryptionType',
        'encryption_target' => 'setEncryptionTarget',
        'encryption_block' => 'setEncryptionBlock',
        'device_type' => 'setDeviceType',
        'securitykey_update_indicator' => 'setSecuritykeyUpdateIndicator',
        'key_id' => 'setKeyId',
        'encrypted_key' => 'setEncryptedKey'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'encryption_type' => 'getEncryptionType',
        'encryption_target' => 'getEncryptionTarget',
        'encryption_block' => 'getEncryptionBlock',
        'device_type' => 'getDeviceType',
        'securitykey_update_indicator' => 'getSecuritykeyUpdateIndicator',
        'key_id' => 'getKeyId',
        'encrypted_key' => 'getEncryptedKey'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('encryption_type', $data ?? [], null);
        $this->setIfExists('encryption_target', $data ?? [], null);
        $this->setIfExists('encryption_block', $data ?? [], null);
        $this->setIfExists('device_type', $data ?? [], null);
        $this->setIfExists('securitykey_update_indicator', $data ?? [], null);
        $this->setIfExists('key_id', $data ?? [], null);
        $this->setIfExists('encrypted_key', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['encryption_type']) && (mb_strlen($this->container['encryption_type']) > 256)) {
            $invalidProperties[] = "invalid value for 'encryption_type', the character length must be smaller than or equal to 256.";
        }

        if (!is_null($this->container['encryption_target']) && (mb_strlen($this->container['encryption_target']) > 256)) {
            $invalidProperties[] = "invalid value for 'encryption_target', the character length must be smaller than or equal to 256.";
        }

        if (!is_null($this->container['encryption_block']) && (mb_strlen($this->container['encryption_block']) > 2000)) {
            $invalidProperties[] = "invalid value for 'encryption_block', the character length must be smaller than or equal to 2000.";
        }

        if (!is_null($this->container['device_type']) && (mb_strlen($this->container['device_type']) > 256)) {
            $invalidProperties[] = "invalid value for 'device_type', the character length must be smaller than or equal to 256.";
        }

        if (!is_null($this->container['key_id']) && (mb_strlen($this->container['key_id']) > 40)) {
            $invalidProperties[] = "invalid value for 'key_id', the character length must be smaller than or equal to 40.";
        }

        if (!is_null($this->container['encrypted_key']) && (mb_strlen($this->container['encrypted_key']) > 2000)) {
            $invalidProperties[] = "invalid value for 'encrypted_key', the character length must be smaller than or equal to 2000.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets encryption_type
     *
     * @return string|null
     */
    public function getEncryptionType()
    {
        return $this->container['encryption_type'];
    }

    /**
     * Sets encryption_type
     *
     * @param string|null $encryption_type Encryption type to be passed.  Valid Values: * RSA (Default) * VERIFONE * VERIFONE_VDR * AES_DUKPT * TDES_DUKPT * ON_GUARD * FPE
     *
     * @return self
     */
    public function setEncryptionType($encryption_type)
    {
        if (!is_null($encryption_type) && (mb_strlen($encryption_type) > 256)) {
            throw new \InvalidArgumentException('invalid length for $encryption_type when calling EncryptionData., must be smaller than or equal to 256.');
        }


        if (is_null($encryption_type)) {
            throw new \InvalidArgumentException('non-nullable encryption_type cannot be null');
        }

        $this->container['encryption_type'] = $encryption_type;

        return $this;
    }

    /**
     * Gets encryption_target
     *
     * @return string|null
     */
    public function getEncryptionTarget()
    {
        return $this->container['encryption_target'];
    }

    /**
     * Sets encryption_target
     *
     * @param string|null $encryption_target Target can be TRACK_1, TRACK_2 (including EMV), BOTH (Track 1 and 2) or MANUAL.
     *
     * @return self
     */
    public function setEncryptionTarget($encryption_target)
    {
        if (!is_null($encryption_target) && (mb_strlen($encryption_target) > 256)) {
            throw new \InvalidArgumentException('invalid length for $encryption_target when calling EncryptionData., must be smaller than or equal to 256.');
        }


        if (is_null($encryption_target)) {
            throw new \InvalidArgumentException('non-nullable encryption_target cannot be null');
        }

        $this->container['encryption_target'] = $encryption_target;

        return $this;
    }

    /**
     * Gets encryption_block
     *
     * @return string|null
     */
    public function getEncryptionBlock()
    {
        return $this->container['encryption_block'];
    }

    /**
     * Sets encryption_block
     *
     * @param string|null $encryption_block This field contains the track data or card number provided in encrypted form.
     *
     * @return self
     */
    public function setEncryptionBlock($encryption_block)
    {
        if (!is_null($encryption_block) && (mb_strlen($encryption_block) > 2000)) {
            throw new \InvalidArgumentException('invalid length for $encryption_block when calling EncryptionData., must be smaller than or equal to 2000.');
        }


        if (is_null($encryption_block)) {
            throw new \InvalidArgumentException('non-nullable encryption_block cannot be null');
        }

        $this->container['encryption_block'] = $encryption_block;

        return $this;
    }

    /**
     * Gets device_type
     *
     * @return string|null
     */
    public function getDeviceType()
    {
        return $this->container['device_type'];
    }

    /**
     * Sets device_type
     *
     * @param string|null $device_type Device type need to be sent for TDES and AES encrypted track data.  Valid values: * INGENICO (Default) * RPXXX * CLOVER * NCR * NCRTLV
     *
     * @return self
     */
    public function setDeviceType($device_type)
    {
        if (!is_null($device_type) && (mb_strlen($device_type) > 256)) {
            throw new \InvalidArgumentException('invalid length for $device_type when calling EncryptionData., must be smaller than or equal to 256.');
        }


        if (is_null($device_type)) {
            throw new \InvalidArgumentException('non-nullable device_type cannot be null');
        }

        $this->container['device_type'] = $device_type;

        return $this;
    }

    /**
     * Gets securitykey_update_indicator
     *
     * @return bool|null
     */
    public function getSecuritykeyUpdateIndicator()
    {
        return $this->container['securitykey_update_indicator'];
    }

    /**
     * Sets securitykey_update_indicator
     *
     * @param bool|null $securitykey_update_indicator Provided in response. POS is expected to download updated key, key cert.
     *
     * @return self
     */
    public function setSecuritykeyUpdateIndicator($securitykey_update_indicator)
    {

        if (is_null($securitykey_update_indicator)) {
            throw new \InvalidArgumentException('non-nullable securitykey_update_indicator cannot be null');
        }

        $this->container['securitykey_update_indicator'] = $securitykey_update_indicator;

        return $this;
    }

    /**
     * Gets key_id
     *
     * @return string|null
     */
    public function getKeyId()
    {
        return $this->container['key_id'];
    }

    /**
     * Sets key_id
     *
     * @param string|null $key_id Needs to be passed if track data is encrypted.
     *
     * @return self
     */
    public function setKeyId($key_id)
    {
        if (!is_null($key_id) && (mb_strlen($key_id) > 40)) {
            throw new \InvalidArgumentException('invalid length for $key_id when calling EncryptionData., must be smaller than or equal to 40.');
        }


        if (is_null($key_id)) {
            throw new \InvalidArgumentException('non-nullable key_id cannot be null');
        }

        $this->container['key_id'] = $key_id;

        return $this;
    }

    /**
     * Gets encrypted_key
     *
     * @return string|null
     */
    public function getEncryptedKey()
    {
        return $this->container['encrypted_key'];
    }

    /**
     * Sets encrypted_key
     *
     * @param string|null $encrypted_key Merchant or device defined encryption key required for decryption of encrypted <code>cardData</code>. Normally used in card not present integrations e.g. Mobile device.
     *
     * @return self
     */
    public function setEncryptedKey($encrypted_key)
    {
        if (!is_null($encrypted_key) && (mb_strlen($encrypted_key) > 2000)) {
            throw new \InvalidArgumentException('invalid length for $encrypted_key when calling EncryptionData., must be smaller than or equal to 2000.');
        }


        if (is_null($encrypted_key)) {
            throw new \InvalidArgumentException('non-nullable encrypted_key cannot be null');
        }

        $this->container['encrypted_key'] = $encrypted_key;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


