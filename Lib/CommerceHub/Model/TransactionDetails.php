<?php
/**
 * TransactionDetails
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Fiserv\Payments\Lib\CommerceHub
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Payments
 *
 * This API Specification is designed to provide technical guidance required to consume and integrate with our APIs for payment processing.
 *
 * The version of the OpenAPI document: v1.3.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.2.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Fiserv\Payments\Lib\CommerceHub\Model;

use \ArrayAccess;
use \Fiserv\Payments\Lib\CommerceHub\ObjectSerializer;

/**
 * TransactionDetails Class Doc Comment
 *
 * @category Class
 * @description &lt;a href&#x3D;\&quot;../docs?path&#x3D;docs/Resources/Master-Data/Transaction-Details.md\&quot;&gt;Transaction details&lt;/a&gt; specific to each request based on business requirements.
 * @package  Fiserv\Payments\Lib\CommerceHub
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class TransactionDetails implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'TransactionDetails';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'approval_code' => 'string',
        'primary_transaction_id' => 'string',
        'primary_order_id' => 'string',
        'client_request_id' => 'string',
        'capture_flag' => 'bool',
        'transaction_capture_type' => 'string',
        'account_verification' => 'bool',
        'partial_approval' => 'bool',
        'merchant_transaction_id' => 'string',
        'merchant_order_id' => 'string',
        'merchant_invoice_number' => 'string',
        'receipt_email' => 'string',
        'payment_description' => 'string',
        'card_verification_amount' => 'float',
        'partially_approved_transaction_amount' => 'float',
        'split_tender_id' => 'string',
        'authorization_type_indicator' => 'string',
        'duplicate_transaction_checking_indicator' => 'bool',
        'primary_transaction_type' => 'string',
        'vault_funding_source' => 'bool',
        'device_fingerprint' => '\Fiserv\Payments\Lib\CommerceHub\Model\DeviceFingerPrint[]',
        'split_shipment' => '\Fiserv\Payments\Lib\CommerceHub\Model\SplitShipment',
        'reversal_reason_code' => 'string',
        'physical_goods_indicator' => 'bool',
        'authorization_sequence' => 'string',
        'create_token' => 'bool',
        'retrieval_reference_number' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'approval_code' => null,
        'primary_transaction_id' => null,
        'primary_order_id' => null,
        'client_request_id' => null,
        'capture_flag' => null,
        'transaction_capture_type' => null,
        'account_verification' => null,
        'partial_approval' => null,
        'merchant_transaction_id' => null,
        'merchant_order_id' => null,
        'merchant_invoice_number' => null,
        'receipt_email' => null,
        'payment_description' => null,
        'card_verification_amount' => null,
        'partially_approved_transaction_amount' => null,
        'split_tender_id' => null,
        'authorization_type_indicator' => null,
        'duplicate_transaction_checking_indicator' => null,
        'primary_transaction_type' => null,
        'vault_funding_source' => null,
        'device_fingerprint' => null,
        'split_shipment' => null,
        'reversal_reason_code' => null,
        'physical_goods_indicator' => null,
        'authorization_sequence' => null,
        'create_token' => null,
        'retrieval_reference_number' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'approval_code' => false,
		'primary_transaction_id' => false,
		'primary_order_id' => false,
		'client_request_id' => false,
		'capture_flag' => false,
		'transaction_capture_type' => false,
		'account_verification' => false,
		'partial_approval' => false,
		'merchant_transaction_id' => false,
		'merchant_order_id' => false,
		'merchant_invoice_number' => false,
		'receipt_email' => false,
		'payment_description' => false,
		'card_verification_amount' => false,
		'partially_approved_transaction_amount' => false,
		'split_tender_id' => false,
		'authorization_type_indicator' => false,
		'duplicate_transaction_checking_indicator' => false,
		'primary_transaction_type' => false,
		'vault_funding_source' => false,
		'device_fingerprint' => false,
		'split_shipment' => false,
		'reversal_reason_code' => false,
		'physical_goods_indicator' => false,
		'authorization_sequence' => false,
		'create_token' => false,
		'retrieval_reference_number' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'approval_code' => 'approvalCode',
        'primary_transaction_id' => 'primaryTransactionId',
        'primary_order_id' => 'primaryOrderId',
        'client_request_id' => 'clientRequestId',
        'capture_flag' => 'captureFlag',
        'transaction_capture_type' => 'transactionCaptureType',
        'account_verification' => 'accountVerification',
        'partial_approval' => 'partialApproval',
        'merchant_transaction_id' => 'merchantTransactionId',
        'merchant_order_id' => 'merchantOrderId',
        'merchant_invoice_number' => 'merchantInvoiceNumber',
        'receipt_email' => 'receiptEmail',
        'payment_description' => 'paymentDescription',
        'card_verification_amount' => 'cardVerificationAmount',
        'partially_approved_transaction_amount' => 'partiallyApprovedTransactionAmount',
        'split_tender_id' => 'splitTenderId',
        'authorization_type_indicator' => 'authorizationTypeIndicator',
        'duplicate_transaction_checking_indicator' => 'duplicateTransactionCheckingIndicator',
        'primary_transaction_type' => 'primaryTransactionType',
        'vault_funding_source' => 'vaultFundingSource',
        'device_fingerprint' => 'deviceFingerprint',
        'split_shipment' => 'splitShipment',
        'reversal_reason_code' => 'reversalReasonCode',
        'physical_goods_indicator' => 'physicalGoodsIndicator',
        'authorization_sequence' => 'authorizationSequence',
        'create_token' => 'createToken',
        'retrieval_reference_number' => 'retrievalReferenceNumber'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'approval_code' => 'setApprovalCode',
        'primary_transaction_id' => 'setPrimaryTransactionId',
        'primary_order_id' => 'setPrimaryOrderId',
        'client_request_id' => 'setClientRequestId',
        'capture_flag' => 'setCaptureFlag',
        'transaction_capture_type' => 'setTransactionCaptureType',
        'account_verification' => 'setAccountVerification',
        'partial_approval' => 'setPartialApproval',
        'merchant_transaction_id' => 'setMerchantTransactionId',
        'merchant_order_id' => 'setMerchantOrderId',
        'merchant_invoice_number' => 'setMerchantInvoiceNumber',
        'receipt_email' => 'setReceiptEmail',
        'payment_description' => 'setPaymentDescription',
        'card_verification_amount' => 'setCardVerificationAmount',
        'partially_approved_transaction_amount' => 'setPartiallyApprovedTransactionAmount',
        'split_tender_id' => 'setSplitTenderId',
        'authorization_type_indicator' => 'setAuthorizationTypeIndicator',
        'duplicate_transaction_checking_indicator' => 'setDuplicateTransactionCheckingIndicator',
        'primary_transaction_type' => 'setPrimaryTransactionType',
        'vault_funding_source' => 'setVaultFundingSource',
        'device_fingerprint' => 'setDeviceFingerprint',
        'split_shipment' => 'setSplitShipment',
        'reversal_reason_code' => 'setReversalReasonCode',
        'physical_goods_indicator' => 'setPhysicalGoodsIndicator',
        'authorization_sequence' => 'setAuthorizationSequence',
        'create_token' => 'setCreateToken',
        'retrieval_reference_number' => 'setRetrievalReferenceNumber'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'approval_code' => 'getApprovalCode',
        'primary_transaction_id' => 'getPrimaryTransactionId',
        'primary_order_id' => 'getPrimaryOrderId',
        'client_request_id' => 'getClientRequestId',
        'capture_flag' => 'getCaptureFlag',
        'transaction_capture_type' => 'getTransactionCaptureType',
        'account_verification' => 'getAccountVerification',
        'partial_approval' => 'getPartialApproval',
        'merchant_transaction_id' => 'getMerchantTransactionId',
        'merchant_order_id' => 'getMerchantOrderId',
        'merchant_invoice_number' => 'getMerchantInvoiceNumber',
        'receipt_email' => 'getReceiptEmail',
        'payment_description' => 'getPaymentDescription',
        'card_verification_amount' => 'getCardVerificationAmount',
        'partially_approved_transaction_amount' => 'getPartiallyApprovedTransactionAmount',
        'split_tender_id' => 'getSplitTenderId',
        'authorization_type_indicator' => 'getAuthorizationTypeIndicator',
        'duplicate_transaction_checking_indicator' => 'getDuplicateTransactionCheckingIndicator',
        'primary_transaction_type' => 'getPrimaryTransactionType',
        'vault_funding_source' => 'getVaultFundingSource',
        'device_fingerprint' => 'getDeviceFingerprint',
        'split_shipment' => 'getSplitShipment',
        'reversal_reason_code' => 'getReversalReasonCode',
        'physical_goods_indicator' => 'getPhysicalGoodsIndicator',
        'authorization_sequence' => 'getAuthorizationSequence',
        'create_token' => 'getCreateToken',
        'retrieval_reference_number' => 'getRetrievalReferenceNumber'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('approval_code', $data ?? [], null);
        $this->setIfExists('primary_transaction_id', $data ?? [], null);
        $this->setIfExists('primary_order_id', $data ?? [], null);
        $this->setIfExists('client_request_id', $data ?? [], null);
        $this->setIfExists('capture_flag', $data ?? [], null);
        $this->setIfExists('transaction_capture_type', $data ?? [], null);
        $this->setIfExists('account_verification', $data ?? [], null);
        $this->setIfExists('partial_approval', $data ?? [], null);
        $this->setIfExists('merchant_transaction_id', $data ?? [], null);
        $this->setIfExists('merchant_order_id', $data ?? [], null);
        $this->setIfExists('merchant_invoice_number', $data ?? [], null);
        $this->setIfExists('receipt_email', $data ?? [], null);
        $this->setIfExists('payment_description', $data ?? [], null);
        $this->setIfExists('card_verification_amount', $data ?? [], null);
        $this->setIfExists('partially_approved_transaction_amount', $data ?? [], null);
        $this->setIfExists('split_tender_id', $data ?? [], null);
        $this->setIfExists('authorization_type_indicator', $data ?? [], null);
        $this->setIfExists('duplicate_transaction_checking_indicator', $data ?? [], null);
        $this->setIfExists('primary_transaction_type', $data ?? [], null);
        $this->setIfExists('vault_funding_source', $data ?? [], null);
        $this->setIfExists('device_fingerprint', $data ?? [], null);
        $this->setIfExists('split_shipment', $data ?? [], null);
        $this->setIfExists('reversal_reason_code', $data ?? [], null);
        $this->setIfExists('physical_goods_indicator', $data ?? [], null);
        $this->setIfExists('authorization_sequence', $data ?? [], null);
        $this->setIfExists('create_token', $data ?? [], null);
        $this->setIfExists('retrieval_reference_number', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['primary_transaction_id']) && (mb_strlen($this->container['primary_transaction_id']) > 40)) {
            $invalidProperties[] = "invalid value for 'primary_transaction_id', the character length must be smaller than or equal to 40.";
        }

        if (!is_null($this->container['primary_order_id']) && (mb_strlen($this->container['primary_order_id']) > 40)) {
            $invalidProperties[] = "invalid value for 'primary_order_id', the character length must be smaller than or equal to 40.";
        }

        if (!is_null($this->container['client_request_id']) && (mb_strlen($this->container['client_request_id']) > 64)) {
            $invalidProperties[] = "invalid value for 'client_request_id', the character length must be smaller than or equal to 64.";
        }

        if (!is_null($this->container['transaction_capture_type']) && (mb_strlen($this->container['transaction_capture_type']) > 64)) {
            $invalidProperties[] = "invalid value for 'transaction_capture_type', the character length must be smaller than or equal to 64.";
        }

        if (!is_null($this->container['merchant_transaction_id']) && (mb_strlen($this->container['merchant_transaction_id']) > 32)) {
            $invalidProperties[] = "invalid value for 'merchant_transaction_id', the character length must be smaller than or equal to 32.";
        }

        if (!is_null($this->container['merchant_order_id']) && (mb_strlen($this->container['merchant_order_id']) > 32)) {
            $invalidProperties[] = "invalid value for 'merchant_order_id', the character length must be smaller than or equal to 32.";
        }

        if (!is_null($this->container['merchant_invoice_number']) && (mb_strlen($this->container['merchant_invoice_number']) > 12)) {
            $invalidProperties[] = "invalid value for 'merchant_invoice_number', the character length must be smaller than or equal to 12.";
        }

        if (!is_null($this->container['receipt_email']) && (mb_strlen($this->container['receipt_email']) > 256)) {
            $invalidProperties[] = "invalid value for 'receipt_email', the character length must be smaller than or equal to 256.";
        }

        if (!is_null($this->container['payment_description']) && (mb_strlen($this->container['payment_description']) > 1024)) {
            $invalidProperties[] = "invalid value for 'payment_description', the character length must be smaller than or equal to 1024.";
        }

        if (!is_null($this->container['card_verification_amount']) && ($this->container['card_verification_amount'] > 1.0E+18)) {
            $invalidProperties[] = "invalid value for 'card_verification_amount', must be smaller than or equal to 1.0E+18.";
        }

        if (!is_null($this->container['partially_approved_transaction_amount']) && ($this->container['partially_approved_transaction_amount'] > 1.0E+18)) {
            $invalidProperties[] = "invalid value for 'partially_approved_transaction_amount', must be smaller than or equal to 1.0E+18.";
        }

        if (!is_null($this->container['split_tender_id']) && (mb_strlen($this->container['split_tender_id']) > 1024)) {
            $invalidProperties[] = "invalid value for 'split_tender_id', the character length must be smaller than or equal to 1024.";
        }

        if (!is_null($this->container['authorization_type_indicator']) && (mb_strlen($this->container['authorization_type_indicator']) > 11)) {
            $invalidProperties[] = "invalid value for 'authorization_type_indicator', the character length must be smaller than or equal to 11.";
        }

        if (!is_null($this->container['primary_transaction_type']) && (mb_strlen($this->container['primary_transaction_type']) > 14)) {
            $invalidProperties[] = "invalid value for 'primary_transaction_type', the character length must be smaller than or equal to 14.";
        }

        if (!is_null($this->container['reversal_reason_code']) && (mb_strlen($this->container['reversal_reason_code']) > 22)) {
            $invalidProperties[] = "invalid value for 'reversal_reason_code', the character length must be smaller than or equal to 22.";
        }

        if (!is_null($this->container['authorization_sequence']) && (mb_strlen($this->container['authorization_sequence']) > 27)) {
            $invalidProperties[] = "invalid value for 'authorization_sequence', the character length must be smaller than or equal to 27.";
        }

        if (!is_null($this->container['retrieval_reference_number']) && (mb_strlen($this->container['retrieval_reference_number']) > 12)) {
            $invalidProperties[] = "invalid value for 'retrieval_reference_number', the character length must be smaller than or equal to 12.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets approval_code
     *
     * @return string|null
     */
    public function getApprovalCode()
    {
        return $this->container['approval_code'];
    }

    /**
     * Sets approval_code
     *
     * @param string|null $approval_code Reference number received as the result of a successful external authorization (e.g. by phone). The gateway needs this number for uniquely mapping a ForcedTicket transaction to a previously performed external authorization.
     *
     * @return self
     */
    public function setApprovalCode($approval_code)
    {

        if (is_null($approval_code)) {
            throw new \InvalidArgumentException('non-nullable approval_code cannot be null');
        }

        $this->container['approval_code'] = $approval_code;

        return $this;
    }

    /**
     * Gets primary_transaction_id
     *
     * @return string|null
     */
    public function getPrimaryTransactionId()
    {
        return $this->container['primary_transaction_id'];
    }

    /**
     * Sets primary_transaction_id
     *
     * @param string|null $primary_transaction_id The unique identifier from the original transaction passed for a reauthorization and incremental authorization.
     *
     * @return self
     */
    public function setPrimaryTransactionId($primary_transaction_id)
    {
        if (!is_null($primary_transaction_id) && (mb_strlen($primary_transaction_id) > 40)) {
            throw new \InvalidArgumentException('invalid length for $primary_transaction_id when calling TransactionDetails., must be smaller than or equal to 40.');
        }


        if (is_null($primary_transaction_id)) {
            throw new \InvalidArgumentException('non-nullable primary_transaction_id cannot be null');
        }

        $this->container['primary_transaction_id'] = $primary_transaction_id;

        return $this;
    }

    /**
     * Gets primary_order_id
     *
     * @return string|null
     */
    public function getPrimaryOrderId()
    {
        return $this->container['primary_order_id'];
    }

    /**
     * Sets primary_order_id
     *
     * @param string|null $primary_order_id The unique order identifier from the original transaction passed for a reauthorization and incremental authorization.
     *
     * @return self
     */
    public function setPrimaryOrderId($primary_order_id)
    {
        if (!is_null($primary_order_id) && (mb_strlen($primary_order_id) > 40)) {
            throw new \InvalidArgumentException('invalid length for $primary_order_id when calling TransactionDetails., must be smaller than or equal to 40.');
        }


        if (is_null($primary_order_id)) {
            throw new \InvalidArgumentException('non-nullable primary_order_id cannot be null');
        }

        $this->container['primary_order_id'] = $primary_order_id;

        return $this;
    }

    /**
     * Gets client_request_id
     *
     * @return string|null
     */
    public function getClientRequestId()
    {
        return $this->container['client_request_id'];
    }

    /**
     * Sets client_request_id
     *
     * @param string|null $client_request_id Echoes back the value in the request header for tracking.
     *
     * @return self
     */
    public function setClientRequestId($client_request_id)
    {
        if (!is_null($client_request_id) && (mb_strlen($client_request_id) > 64)) {
            throw new \InvalidArgumentException('invalid length for $client_request_id when calling TransactionDetails., must be smaller than or equal to 64.');
        }


        if (is_null($client_request_id)) {
            throw new \InvalidArgumentException('non-nullable client_request_id cannot be null');
        }

        $this->container['client_request_id'] = $client_request_id;

        return $this;
    }

    /**
     * Gets capture_flag
     *
     * @return bool|null
     */
    public function getCaptureFlag()
    {
        return $this->container['capture_flag'];
    }

    /**
     * Sets capture_flag
     *
     * @param bool|null $capture_flag Designates if the transaction should be captured. Auth (False) or Sale (True).
     *
     * @return self
     */
    public function setCaptureFlag($capture_flag)
    {

        if (is_null($capture_flag)) {
            throw new \InvalidArgumentException('non-nullable capture_flag cannot be null');
        }

        $this->container['capture_flag'] = $capture_flag;

        return $this;
    }

    /**
     * Gets transaction_capture_type
     *
     * @return string|null
     */
    public function getTransactionCaptureType()
    {
        return $this->container['transaction_capture_type'];
    }

    /**
     * Sets transaction_capture_type
     *
     * @param string|null $transaction_capture_type Identifies if settlement was Host capture or Terminal capture.
     *
     * @return self
     */
    public function setTransactionCaptureType($transaction_capture_type)
    {
        if (!is_null($transaction_capture_type) && (mb_strlen($transaction_capture_type) > 64)) {
            throw new \InvalidArgumentException('invalid length for $transaction_capture_type when calling TransactionDetails., must be smaller than or equal to 64.');
        }


        if (is_null($transaction_capture_type)) {
            throw new \InvalidArgumentException('non-nullable transaction_capture_type cannot be null');
        }

        $this->container['transaction_capture_type'] = $transaction_capture_type;

        return $this;
    }

    /**
     * Gets account_verification
     *
     * @return bool|null
     */
    public function getAccountVerification()
    {
        return $this->container['account_verification'];
    }

    /**
     * Sets account_verification
     *
     * @param bool|null $account_verification Determines if verification should be performed on the payment type.
     *
     * @return self
     */
    public function setAccountVerification($account_verification)
    {

        if (is_null($account_verification)) {
            throw new \InvalidArgumentException('non-nullable account_verification cannot be null');
        }

        $this->container['account_verification'] = $account_verification;

        return $this;
    }

    /**
     * Gets partial_approval
     *
     * @return bool|null
     */
    public function getPartialApproval()
    {
        return $this->container['partial_approval'];
    }

    /**
     * Sets partial_approval
     *
     * @param bool|null $partial_approval Indicates if a partial approval is allowed.
     *
     * @return self
     */
    public function setPartialApproval($partial_approval)
    {

        if (is_null($partial_approval)) {
            throw new \InvalidArgumentException('non-nullable partial_approval cannot be null');
        }

        $this->container['partial_approval'] = $partial_approval;

        return $this;
    }

    /**
     * Gets merchant_transaction_id
     *
     * @return string|null
     */
    public function getMerchantTransactionId()
    {
        return $this->container['merchant_transaction_id'];
    }

    /**
     * Sets merchant_transaction_id
     *
     * @param string|null $merchant_transaction_id Merchant transaction ID (aka transaction reference ID).
     *
     * @return self
     */
    public function setMerchantTransactionId($merchant_transaction_id)
    {
        if (!is_null($merchant_transaction_id) && (mb_strlen($merchant_transaction_id) > 32)) {
            throw new \InvalidArgumentException('invalid length for $merchant_transaction_id when calling TransactionDetails., must be smaller than or equal to 32.');
        }


        if (is_null($merchant_transaction_id)) {
            throw new \InvalidArgumentException('non-nullable merchant_transaction_id cannot be null');
        }

        $this->container['merchant_transaction_id'] = $merchant_transaction_id;

        return $this;
    }

    /**
     * Gets merchant_order_id
     *
     * @return string|null
     */
    public function getMerchantOrderId()
    {
        return $this->container['merchant_order_id'];
    }

    /**
     * Sets merchant_order_id
     *
     * @param string|null $merchant_order_id Merchant order ID (aka customer reference number or purchase order number).
     *
     * @return self
     */
    public function setMerchantOrderId($merchant_order_id)
    {
        if (!is_null($merchant_order_id) && (mb_strlen($merchant_order_id) > 32)) {
            throw new \InvalidArgumentException('invalid length for $merchant_order_id when calling TransactionDetails., must be smaller than or equal to 32.');
        }


        if (is_null($merchant_order_id)) {
            throw new \InvalidArgumentException('non-nullable merchant_order_id cannot be null');
        }

        $this->container['merchant_order_id'] = $merchant_order_id;

        return $this;
    }

    /**
     * Gets merchant_invoice_number
     *
     * @return string|null
     */
    public function getMerchantInvoiceNumber()
    {
        return $this->container['merchant_invoice_number'];
    }

    /**
     * Sets merchant_invoice_number
     *
     * @param string|null $merchant_invoice_number Merchant invoice number (aka reference number).
     *
     * @return self
     */
    public function setMerchantInvoiceNumber($merchant_invoice_number)
    {
        if (!is_null($merchant_invoice_number) && (mb_strlen($merchant_invoice_number) > 12)) {
            throw new \InvalidArgumentException('invalid length for $merchant_invoice_number when calling TransactionDetails., must be smaller than or equal to 12.');
        }


        if (is_null($merchant_invoice_number)) {
            throw new \InvalidArgumentException('non-nullable merchant_invoice_number cannot be null');
        }

        $this->container['merchant_invoice_number'] = $merchant_invoice_number;

        return $this;
    }

    /**
     * Gets receipt_email
     *
     * @return string|null
     */
    public function getReceiptEmail()
    {
        return $this->container['receipt_email'];
    }

    /**
     * Sets receipt_email
     *
     * @param string|null $receipt_email Email address to send a digital receipt.
     *
     * @return self
     */
    public function setReceiptEmail($receipt_email)
    {
        if (!is_null($receipt_email) && (mb_strlen($receipt_email) > 256)) {
            throw new \InvalidArgumentException('invalid length for $receipt_email when calling TransactionDetails., must be smaller than or equal to 256.');
        }


        if (is_null($receipt_email)) {
            throw new \InvalidArgumentException('non-nullable receipt_email cannot be null');
        }

        $this->container['receipt_email'] = $receipt_email;

        return $this;
    }

    /**
     * Gets payment_description
     *
     * @return string|null
     */
    public function getPaymentDescription()
    {
        return $this->container['payment_description'];
    }

    /**
     * Sets payment_description
     *
     * @param string|null $payment_description Payment description.
     *
     * @return self
     */
    public function setPaymentDescription($payment_description)
    {
        if (!is_null($payment_description) && (mb_strlen($payment_description) > 1024)) {
            throw new \InvalidArgumentException('invalid length for $payment_description when calling TransactionDetails., must be smaller than or equal to 1024.');
        }


        if (is_null($payment_description)) {
            throw new \InvalidArgumentException('non-nullable payment_description cannot be null');
        }

        $this->container['payment_description'] = $payment_description;

        return $this;
    }

    /**
     * Gets card_verification_amount
     *
     * @return float|null
     */
    public function getCardVerificationAmount()
    {
        return $this->container['card_verification_amount'];
    }

    /**
     * Sets card_verification_amount
     *
     * @param float|null $card_verification_amount Amount used to verify the transaction. Some issuers do not allow $0.00 authorizations.
     *
     * @return self
     */
    public function setCardVerificationAmount($card_verification_amount)
    {

        if (!is_null($card_verification_amount) && ($card_verification_amount > 1.0E+18)) {
            throw new \InvalidArgumentException('invalid value for $card_verification_amount when calling TransactionDetails., must be smaller than or equal to 1.0E+18.');
        }


        if (is_null($card_verification_amount)) {
            throw new \InvalidArgumentException('non-nullable card_verification_amount cannot be null');
        }

        $this->container['card_verification_amount'] = $card_verification_amount;

        return $this;
    }

    /**
     * Gets partially_approved_transaction_amount
     *
     * @return float|null
     */
    public function getPartiallyApprovedTransactionAmount()
    {
        return $this->container['partially_approved_transaction_amount'];
    }

    /**
     * Sets partially_approved_transaction_amount
     *
     * @param float|null $partially_approved_transaction_amount The partially approved transaction amount from the original request.
     *
     * @return self
     */
    public function setPartiallyApprovedTransactionAmount($partially_approved_transaction_amount)
    {

        if (!is_null($partially_approved_transaction_amount) && ($partially_approved_transaction_amount > 1.0E+18)) {
            throw new \InvalidArgumentException('invalid value for $partially_approved_transaction_amount when calling TransactionDetails., must be smaller than or equal to 1.0E+18.');
        }


        if (is_null($partially_approved_transaction_amount)) {
            throw new \InvalidArgumentException('non-nullable partially_approved_transaction_amount cannot be null');
        }

        $this->container['partially_approved_transaction_amount'] = $partially_approved_transaction_amount;

        return $this;
    }

    /**
     * Gets split_tender_id
     *
     * @return string|null
     */
    public function getSplitTenderId()
    {
        return $this->container['split_tender_id'];
    }

    /**
     * Sets split_tender_id
     *
     * @param string|null $split_tender_id A partially-authorized transaction will generate a split tender ID. Subsequent transactions to complete the authorization should include the split tender ID so that all the transactions comprising that authorization can be linked.
     *
     * @return self
     */
    public function setSplitTenderId($split_tender_id)
    {
        if (!is_null($split_tender_id) && (mb_strlen($split_tender_id) > 1024)) {
            throw new \InvalidArgumentException('invalid length for $split_tender_id when calling TransactionDetails., must be smaller than or equal to 1024.');
        }


        if (is_null($split_tender_id)) {
            throw new \InvalidArgumentException('non-nullable split_tender_id cannot be null');
        }

        $this->container['split_tender_id'] = $split_tender_id;

        return $this;
    }

    /**
     * Gets authorization_type_indicator
     *
     * @return string|null
     */
    public function getAuthorizationTypeIndicator()
    {
        return $this->container['authorization_type_indicator'];
    }

    /**
     * Sets authorization_type_indicator
     *
     * @param string|null $authorization_type_indicator Type of authorization requested.  Valid Values: * INITIAL * REAUTH * DEFERRED * INCREMENTAL * ESTIMATED
     *
     * @return self
     */
    public function setAuthorizationTypeIndicator($authorization_type_indicator)
    {
        if (!is_null($authorization_type_indicator) && (mb_strlen($authorization_type_indicator) > 11)) {
            throw new \InvalidArgumentException('invalid length for $authorization_type_indicator when calling TransactionDetails., must be smaller than or equal to 11.');
        }


        if (is_null($authorization_type_indicator)) {
            throw new \InvalidArgumentException('non-nullable authorization_type_indicator cannot be null');
        }

        $this->container['authorization_type_indicator'] = $authorization_type_indicator;

        return $this;
    }

    /**
     * Gets duplicate_transaction_checking_indicator
     *
     * @return bool|null
     */
    public function getDuplicateTransactionCheckingIndicator()
    {
        return $this->container['duplicate_transaction_checking_indicator'];
    }

    /**
     * Sets duplicate_transaction_checking_indicator
     *
     * @param bool|null $duplicate_transaction_checking_indicator Determines if duplicate transactions should be checked.
     *
     * @return self
     */
    public function setDuplicateTransactionCheckingIndicator($duplicate_transaction_checking_indicator)
    {

        if (is_null($duplicate_transaction_checking_indicator)) {
            throw new \InvalidArgumentException('non-nullable duplicate_transaction_checking_indicator cannot be null');
        }

        $this->container['duplicate_transaction_checking_indicator'] = $duplicate_transaction_checking_indicator;

        return $this;
    }

    /**
     * Gets primary_transaction_type
     *
     * @return string|null
     */
    public function getPrimaryTransactionType()
    {
        return $this->container['primary_transaction_type'];
    }

    /**
     * Sets primary_transaction_type
     *
     * @param string|null $primary_transaction_type Identifies the primary transaction type.  Valid Values: * AUTH_ONLY * CHARGE_PREAUTH * CHARGE_SALE * CANCEL * REFUND
     *
     * @return self
     */
    public function setPrimaryTransactionType($primary_transaction_type)
    {
        if (!is_null($primary_transaction_type) && (mb_strlen($primary_transaction_type) > 14)) {
            throw new \InvalidArgumentException('invalid length for $primary_transaction_type when calling TransactionDetails., must be smaller than or equal to 14.');
        }


        if (is_null($primary_transaction_type)) {
            throw new \InvalidArgumentException('non-nullable primary_transaction_type cannot be null');
        }

        $this->container['primary_transaction_type'] = $primary_transaction_type;

        return $this;
    }

    /**
     * Gets vault_funding_source
     *
     * @return bool|null
     */
    public function getVaultFundingSource()
    {
        return $this->container['vault_funding_source'];
    }

    /**
     * Sets vault_funding_source
     *
     * @param bool|null $vault_funding_source Identifies if the customer information was from the vault.
     *
     * @return self
     */
    public function setVaultFundingSource($vault_funding_source)
    {

        if (is_null($vault_funding_source)) {
            throw new \InvalidArgumentException('non-nullable vault_funding_source cannot be null');
        }

        $this->container['vault_funding_source'] = $vault_funding_source;

        return $this;
    }

    /**
     * Gets device_fingerprint
     *
     * @return \Fiserv\Payments\Lib\CommerceHub\Model\DeviceFingerPrint[]|null
     */
    public function getDeviceFingerprint()
    {
        return $this->container['device_fingerprint'];
    }

    /**
     * Sets device_fingerprint
     *
     * @param \Fiserv\Payments\Lib\CommerceHub\Model\DeviceFingerPrint[]|null $device_fingerprint device_fingerprint
     *
     * @return self
     */
    public function setDeviceFingerprint($device_fingerprint)
    {

        if (is_null($device_fingerprint)) {
            throw new \InvalidArgumentException('non-nullable device_fingerprint cannot be null');
        }

        $this->container['device_fingerprint'] = $device_fingerprint;

        return $this;
    }

    /**
     * Gets split_shipment
     *
     * @return \Fiserv\Payments\Lib\CommerceHub\Model\SplitShipment|null
     */
    public function getSplitShipment()
    {
        return $this->container['split_shipment'];
    }

    /**
     * Sets split_shipment
     *
     * @param \Fiserv\Payments\Lib\CommerceHub\Model\SplitShipment|null $split_shipment split_shipment
     *
     * @return self
     */
    public function setSplitShipment($split_shipment)
    {

        if (is_null($split_shipment)) {
            throw new \InvalidArgumentException('non-nullable split_shipment cannot be null');
        }

        $this->container['split_shipment'] = $split_shipment;

        return $this;
    }

    /**
     * Gets reversal_reason_code
     *
     * @return string|null
     */
    public function getReversalReasonCode()
    {
        return $this->container['reversal_reason_code'];
    }

    /**
     * Sets reversal_reason_code
     *
     * @param string|null $reversal_reason_code Reason the merchant/customer requests for cancel (void).                Valid Values: * VOID * TIMEOUT * EDIT_ERROR * MAC_VERIFICATION_ERROR * MAC_SYNCH_ERROR * ENCRYPTION_ERROR * SYSTEM_ERROR * SUSPECTED_FRAUD
     *
     * @return self
     */
    public function setReversalReasonCode($reversal_reason_code)
    {
        if (!is_null($reversal_reason_code) && (mb_strlen($reversal_reason_code) > 22)) {
            throw new \InvalidArgumentException('invalid length for $reversal_reason_code when calling TransactionDetails., must be smaller than or equal to 22.');
        }


        if (is_null($reversal_reason_code)) {
            throw new \InvalidArgumentException('non-nullable reversal_reason_code cannot be null');
        }

        $this->container['reversal_reason_code'] = $reversal_reason_code;

        return $this;
    }

    /**
     * Gets physical_goods_indicator
     *
     * @return bool|null
     */
    public function getPhysicalGoodsIndicator()
    {
        return $this->container['physical_goods_indicator'];
    }

    /**
     * Sets physical_goods_indicator
     *
     * @param bool|null $physical_goods_indicator Identifies if physical goods were sold.
     *
     * @return self
     */
    public function setPhysicalGoodsIndicator($physical_goods_indicator)
    {

        if (is_null($physical_goods_indicator)) {
            throw new \InvalidArgumentException('non-nullable physical_goods_indicator cannot be null');
        }

        $this->container['physical_goods_indicator'] = $physical_goods_indicator;

        return $this;
    }

    /**
     * Gets authorization_sequence
     *
     * @return string|null
     */
    public function getAuthorizationSequence()
    {
        return $this->container['authorization_sequence'];
    }

    /**
     * Sets authorization_sequence
     *
     * @param string|null $authorization_sequence Type of authorization sequence requested.  Valid Values: * AUTHORIZATION_ONLY - (default) * AUTHORIZATION_BEFORE_CANCEL * CANCEL_BEFORE_AUTHORIZATION
     *
     * @return self
     */
    public function setAuthorizationSequence($authorization_sequence)
    {
        if (!is_null($authorization_sequence) && (mb_strlen($authorization_sequence) > 27)) {
            throw new \InvalidArgumentException('invalid length for $authorization_sequence when calling TransactionDetails., must be smaller than or equal to 27.');
        }


        if (is_null($authorization_sequence)) {
            throw new \InvalidArgumentException('non-nullable authorization_sequence cannot be null');
        }

        $this->container['authorization_sequence'] = $authorization_sequence;

        return $this;
    }

    /**
     * Gets create_token
     *
     * @return bool|null
     */
    public function getCreateToken()
    {
        return $this->container['create_token'];
    }

    /**
     * Sets create_token
     *
     * @param bool|null $create_token Used to create a token on a charge transaction.
     *
     * @return self
     */
    public function setCreateToken($create_token)
    {

        if (is_null($create_token)) {
            throw new \InvalidArgumentException('non-nullable create_token cannot be null');
        }

        $this->container['create_token'] = $create_token;

        return $this;
    }

    /**
     * Gets retrieval_reference_number
     *
     * @return string|null
     */
    public function getRetrievalReferenceNumber()
    {
        return $this->container['retrieval_reference_number'];
    }

    /**
     * Sets retrieval_reference_number
     *
     * @param string|null $retrieval_reference_number Retrieval reference number can be any value based on the merchant’s choosing (e.g. sequential tracking of transactions, fixed value etc.) used for transaction retrieval from the networks.
     *
     * @return self
     */
    public function setRetrievalReferenceNumber($retrieval_reference_number)
    {
        if (!is_null($retrieval_reference_number) && (mb_strlen($retrieval_reference_number) > 12)) {
            throw new \InvalidArgumentException('invalid length for $retrieval_reference_number when calling TransactionDetails., must be smaller than or equal to 12.');
        }


        if (is_null($retrieval_reference_number)) {
            throw new \InvalidArgumentException('non-nullable retrieval_reference_number cannot be null');
        }

        $this->container['retrieval_reference_number'] = $retrieval_reference_number;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


