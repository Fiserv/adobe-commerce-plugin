<?php
/**
 * DataStatic
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Fiserv\Payments\Lib\CommerceHub
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Commerce Hub
 *
 * This API Specification is designed to provide technical guidance required to consume and integrate with our APIs for payment processing.
 *
 * The version of the OpenAPI document: v1.24.08
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.3.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Fiserv\Payments\Lib\CommerceHub\Model;

use \ArrayAccess;
use \Fiserv\Payments\Lib\CommerceHub\ObjectSerializer;

/**
 * DataStatic Class Doc Comment
 *
 * @category Class
 * @description Static data details.
 * @package  Fiserv\Payments\Lib\CommerceHub
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class DataStatic implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'DataStatic';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'accepts' => 'string',
        'color_depth' => 'int',
        'device_id' => 'string',
        'java_enabled' => 'bool',
        'java_script_enabled' => 'bool',
        'locale' => 'string',
        'model' => 'string',
        'operating_system' => 'string',
        'operating_system_version' => 'string',
        'screen_width' => 'int',
        'screen_height' => 'int',
        'timezone_offset' => 'int',
        'type' => 'string',
        'user_agent' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'accepts' => null,
        'color_depth' => null,
        'device_id' => null,
        'java_enabled' => null,
        'java_script_enabled' => null,
        'locale' => null,
        'model' => null,
        'operating_system' => null,
        'operating_system_version' => null,
        'screen_width' => null,
        'screen_height' => null,
        'timezone_offset' => null,
        'type' => null,
        'user_agent' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'accepts' => false,
        'color_depth' => false,
        'device_id' => false,
        'java_enabled' => false,
        'java_script_enabled' => false,
        'locale' => false,
        'model' => false,
        'operating_system' => false,
        'operating_system_version' => false,
        'screen_width' => false,
        'screen_height' => false,
        'timezone_offset' => false,
        'type' => false,
        'user_agent' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'accepts' => 'accepts',
        'color_depth' => 'colorDepth',
        'device_id' => 'deviceId',
        'java_enabled' => 'javaEnabled',
        'java_script_enabled' => 'javaScriptEnabled',
        'locale' => 'locale',
        'model' => 'model',
        'operating_system' => 'operatingSystem',
        'operating_system_version' => 'operatingSystemVersion',
        'screen_width' => 'screenWidth',
        'screen_height' => 'screenHeight',
        'timezone_offset' => 'timezoneOffset',
        'type' => 'type',
        'user_agent' => 'userAgent'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'accepts' => 'setAccepts',
        'color_depth' => 'setColorDepth',
        'device_id' => 'setDeviceId',
        'java_enabled' => 'setJavaEnabled',
        'java_script_enabled' => 'setJavaScriptEnabled',
        'locale' => 'setLocale',
        'model' => 'setModel',
        'operating_system' => 'setOperatingSystem',
        'operating_system_version' => 'setOperatingSystemVersion',
        'screen_width' => 'setScreenWidth',
        'screen_height' => 'setScreenHeight',
        'timezone_offset' => 'setTimezoneOffset',
        'type' => 'setType',
        'user_agent' => 'setUserAgent'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'accepts' => 'getAccepts',
        'color_depth' => 'getColorDepth',
        'device_id' => 'getDeviceId',
        'java_enabled' => 'getJavaEnabled',
        'java_script_enabled' => 'getJavaScriptEnabled',
        'locale' => 'getLocale',
        'model' => 'getModel',
        'operating_system' => 'getOperatingSystem',
        'operating_system_version' => 'getOperatingSystemVersion',
        'screen_width' => 'getScreenWidth',
        'screen_height' => 'getScreenHeight',
        'timezone_offset' => 'getTimezoneOffset',
        'type' => 'getType',
        'user_agent' => 'getUserAgent'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('accepts', $data ?? [], null);
        $this->setIfExists('color_depth', $data ?? [], null);
        $this->setIfExists('device_id', $data ?? [], null);
        $this->setIfExists('java_enabled', $data ?? [], null);
        $this->setIfExists('java_script_enabled', $data ?? [], null);
        $this->setIfExists('locale', $data ?? [], null);
        $this->setIfExists('model', $data ?? [], null);
        $this->setIfExists('operating_system', $data ?? [], null);
        $this->setIfExists('operating_system_version', $data ?? [], null);
        $this->setIfExists('screen_width', $data ?? [], null);
        $this->setIfExists('screen_height', $data ?? [], null);
        $this->setIfExists('timezone_offset', $data ?? [], null);
        $this->setIfExists('type', $data ?? [], null);
        $this->setIfExists('user_agent', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['accepts']) && (mb_strlen($this->container['accepts']) > 256)) {
            $invalidProperties[] = "invalid value for 'accepts', the character length must be smaller than or equal to 256.";
        }

        if (!is_null($this->container['device_id']) && (mb_strlen($this->container['device_id']) > 48)) {
            $invalidProperties[] = "invalid value for 'device_id', the character length must be smaller than or equal to 48.";
        }

        if (!is_null($this->container['locale']) && (mb_strlen($this->container['locale']) > 8)) {
            $invalidProperties[] = "invalid value for 'locale', the character length must be smaller than or equal to 8.";
        }

        if (!is_null($this->container['model']) && (mb_strlen($this->container['model']) > 256)) {
            $invalidProperties[] = "invalid value for 'model', the character length must be smaller than or equal to 256.";
        }

        if (!is_null($this->container['operating_system']) && (mb_strlen($this->container['operating_system']) > 256)) {
            $invalidProperties[] = "invalid value for 'operating_system', the character length must be smaller than or equal to 256.";
        }

        if (!is_null($this->container['operating_system_version']) && (mb_strlen($this->container['operating_system_version']) > 256)) {
            $invalidProperties[] = "invalid value for 'operating_system_version', the character length must be smaller than or equal to 256.";
        }

        if (!is_null($this->container['type']) && (mb_strlen($this->container['type']) > 256)) {
            $invalidProperties[] = "invalid value for 'type', the character length must be smaller than or equal to 256.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets accepts
     *
     * @return string|null
     */
    public function getAccepts()
    {
        return $this->container['accepts'];
    }

    /**
     * Sets accepts
     *
     * @param string|null $accepts Default device HTTP accepts header.
     *
     * @return self
     */
    public function setAccepts($accepts)
    {
        if (is_null($accepts)) {
            throw new \InvalidArgumentException('non-nullable accepts cannot be null');
        }
        if ((mb_strlen($accepts) > 256)) {
            throw new \InvalidArgumentException('invalid length for $accepts when calling DataStatic., must be smaller than or equal to 256.');
        }

        $this->container['accepts'] = $accepts;

        return $this;
    }

    /**
     * Gets color_depth
     *
     * @return int|null
     */
    public function getColorDepth()
    {
        return $this->container['color_depth'];
    }

    /**
     * Sets color_depth
     *
     * @param int|null $color_depth Bit depth of the color palette for displaying images, in bits per pixel.
     *
     * @return self
     */
    public function setColorDepth($color_depth)
    {
        if (is_null($color_depth)) {
            throw new \InvalidArgumentException('non-nullable color_depth cannot be null');
        }
        $this->container['color_depth'] = $color_depth;

        return $this;
    }

    /**
     * Gets device_id
     *
     * @return string|null
     */
    public function getDeviceId()
    {
        return $this->container['device_id'];
    }

    /**
     * Sets device_id
     *
     * @param string|null $device_id MAC of the device originating the transaction.
     *
     * @return self
     */
    public function setDeviceId($device_id)
    {
        if (is_null($device_id)) {
            throw new \InvalidArgumentException('non-nullable device_id cannot be null');
        }
        if ((mb_strlen($device_id) > 48)) {
            throw new \InvalidArgumentException('invalid length for $device_id when calling DataStatic., must be smaller than or equal to 48.');
        }

        $this->container['device_id'] = $device_id;

        return $this;
    }

    /**
     * Gets java_enabled
     *
     * @return bool|null
     */
    public function getJavaEnabled()
    {
        return $this->container['java_enabled'];
    }

    /**
     * Sets java_enabled
     *
     * @param bool|null $java_enabled Indicates if the device has Java enabled.
     *
     * @return self
     */
    public function setJavaEnabled($java_enabled)
    {
        if (is_null($java_enabled)) {
            throw new \InvalidArgumentException('non-nullable java_enabled cannot be null');
        }


        $this->container['java_enabled'] = $java_enabled;

        return $this;
    }

    /**
     * Gets java_script_enabled
     *
     * @return bool|null
     */
    public function getJavaScriptEnabled()
    {
        return $this->container['java_script_enabled'];
    }

    /**
     * Sets java_script_enabled
     *
     * @param bool|null $java_script_enabled Indicates if the device has JavaScript enabled.
     *
     * @return self
     */
    public function setJavaScriptEnabled($java_script_enabled)
    {
        if (is_null($java_script_enabled)) {
            throw new \InvalidArgumentException('non-nullable java_script_enabled cannot be null');
        }


        $this->container['java_script_enabled'] = $java_script_enabled;

        return $this;
    }

    /**
     * Gets locale
     *
     * @return string|null
     */
    public function getLocale()
    {
        return $this->container['locale'];
    }

    /**
     * Sets locale
     *
     * @param string|null $locale Language/Region code of user in IETF BCP47 format.
     *
     * @return self
     */
    public function setLocale($locale)
    {
        if (is_null($locale)) {
            throw new \InvalidArgumentException('non-nullable locale cannot be null');
        }
        if ((mb_strlen($locale) > 8)) {
            throw new \InvalidArgumentException('invalid length for $locale when calling DataStatic., must be smaller than or equal to 8.');
        }

        $this->container['locale'] = $locale;

        return $this;
    }

    /**
     * Gets model
     *
     * @return string|null
     */
    public function getModel()
    {
        return $this->container['model'];
    }

    /**
     * Sets model
     *
     * @param string|null $model Device model.
     *
     * @return self
     */
    public function setModel($model)
    {
        if (is_null($model)) {
            throw new \InvalidArgumentException('non-nullable model cannot be null');
        }
        if ((mb_strlen($model) > 256)) {
            throw new \InvalidArgumentException('invalid length for $model when calling DataStatic., must be smaller than or equal to 256.');
        }

        $this->container['model'] = $model;

        return $this;
    }

    /**
     * Gets operating_system
     *
     * @return string|null
     */
    public function getOperatingSystem()
    {
        return $this->container['operating_system'];
    }

    /**
     * Sets operating_system
     *
     * @param string|null $operating_system Device operating system (OS).
     *
     * @return self
     */
    public function setOperatingSystem($operating_system)
    {
        if (is_null($operating_system)) {
            throw new \InvalidArgumentException('non-nullable operating_system cannot be null');
        }
        if ((mb_strlen($operating_system) > 256)) {
            throw new \InvalidArgumentException('invalid length for $operating_system when calling DataStatic., must be smaller than or equal to 256.');
        }

        $this->container['operating_system'] = $operating_system;

        return $this;
    }

    /**
     * Gets operating_system_version
     *
     * @return string|null
     */
    public function getOperatingSystemVersion()
    {
        return $this->container['operating_system_version'];
    }

    /**
     * Sets operating_system_version
     *
     * @param string|null $operating_system_version Device operating system (OS) version.
     *
     * @return self
     */
    public function setOperatingSystemVersion($operating_system_version)
    {
        if (is_null($operating_system_version)) {
            throw new \InvalidArgumentException('non-nullable operating_system_version cannot be null');
        }
        if ((mb_strlen($operating_system_version) > 256)) {
            throw new \InvalidArgumentException('invalid length for $operating_system_version when calling DataStatic., must be smaller than or equal to 256.');
        }

        $this->container['operating_system_version'] = $operating_system_version;

        return $this;
    }

    /**
     * Gets screen_width
     *
     * @return int|null
     */
    public function getScreenWidth()
    {
        return $this->container['screen_width'];
    }

    /**
     * Sets screen_width
     *
     * @param int|null $screen_width Width of the device screen in pixels.
     *
     * @return self
     */
    public function setScreenWidth($screen_width)
    {
        if (is_null($screen_width)) {
            throw new \InvalidArgumentException('non-nullable screen_width cannot be null');
        }
        $this->container['screen_width'] = $screen_width;

        return $this;
    }

    /**
     * Gets screen_height
     *
     * @return int|null
     */
    public function getScreenHeight()
    {
        return $this->container['screen_height'];
    }

    /**
     * Sets screen_height
     *
     * @param int|null $screen_height Height of the device screen in pixels.
     *
     * @return self
     */
    public function setScreenHeight($screen_height)
    {
        if (is_null($screen_height)) {
            throw new \InvalidArgumentException('non-nullable screen_height cannot be null');
        }
        $this->container['screen_height'] = $screen_height;

        return $this;
    }

    /**
     * Gets timezone_offset
     *
     * @return int|null
     */
    public function getTimezoneOffset()
    {
        return $this->container['timezone_offset'];
    }

    /**
     * Sets timezone_offset
     *
     * @param int|null $timezone_offset Difference between UTC time and the cardholder browser local time, in minutes.
     *
     * @return self
     */
    public function setTimezoneOffset($timezone_offset)
    {
        if (is_null($timezone_offset)) {
            throw new \InvalidArgumentException('non-nullable timezone_offset cannot be null');
        }
        $this->container['timezone_offset'] = $timezone_offset;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string|null
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string|null $type Device type/name.
     *
     * @return self
     */
    public function setType($type)
    {
        if (is_null($type)) {
            throw new \InvalidArgumentException('non-nullable type cannot be null');
        }
        if ((mb_strlen($type) > 256)) {
            throw new \InvalidArgumentException('invalid length for $type when calling DataStatic., must be smaller than or equal to 256.');
        }

        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets user_agent
     *
     * @return string|null
     */
    public function getUserAgent()
    {
        return $this->container['user_agent'];
    }

    /**
     * Sets user_agent
     *
     * @param string|null $user_agent User agent data from the user device, truncated to 2048 bytes.
     *
     * @return self
     */
    public function setUserAgent($user_agent)
    {
        if (is_null($user_agent)) {
            throw new \InvalidArgumentException('non-nullable user_agent cannot be null');
        }
        $this->container['user_agent'] = $user_agent;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


