<?php
/**
 * PriceAdjustmentDetails
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Fiserv\Payments\Lib\CommerceHub
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Commerce Hub
 *
 * This API Specification is designed to provide technical guidance required to consume and integrate with our APIs for payment processing.
 *
 * The version of the OpenAPI document: v1.24.08
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.3.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Fiserv\Payments\Lib\CommerceHub\Model;

use \ArrayAccess;
use \Fiserv\Payments\Lib\CommerceHub\ObjectSerializer;

/**
 * PriceAdjustmentDetails Class Doc Comment
 *
 * @category Class
 * @description ‘The &lt;a href&#x3D;\&quot;../docs?path&#x3D;docs/Resources/Master-Data/Price-Adjustments.md#tab-priceadjustments\&quot;&gt;priceAdjustments&lt;/a&gt; is used to define the type of adjustment, description, rate, and amount.’
 * @package  Fiserv\Payments\Lib\CommerceHub
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class PriceAdjustmentDetails implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'PriceAdjustmentDetails';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'adjustment_type' => 'string',
        'adjustment_description' => 'string',
        'adjustment_rate' => 'float',
        'adjustment_amount' => 'float'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'adjustment_type' => null,
        'adjustment_description' => null,
        'adjustment_rate' => null,
        'adjustment_amount' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'adjustment_type' => false,
        'adjustment_description' => false,
        'adjustment_rate' => false,
        'adjustment_amount' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'adjustment_type' => 'adjustmentType',
        'adjustment_description' => 'adjustmentDescription',
        'adjustment_rate' => 'adjustmentRate',
        'adjustment_amount' => 'adjustmentAmount'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'adjustment_type' => 'setAdjustmentType',
        'adjustment_description' => 'setAdjustmentDescription',
        'adjustment_rate' => 'setAdjustmentRate',
        'adjustment_amount' => 'setAdjustmentAmount'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'adjustment_type' => 'getAdjustmentType',
        'adjustment_description' => 'getAdjustmentDescription',
        'adjustment_rate' => 'getAdjustmentRate',
        'adjustment_amount' => 'getAdjustmentAmount'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('adjustment_type', $data ?? [], null);
        $this->setIfExists('adjustment_description', $data ?? [], null);
        $this->setIfExists('adjustment_rate', $data ?? [], null);
        $this->setIfExists('adjustment_amount', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['adjustment_rate']) && ($this->container['adjustment_rate'] > 100)) {
            $invalidProperties[] = "invalid value for 'adjustment_rate', must be smaller than or equal to 100.";
        }

        if (!is_null($this->container['adjustment_amount']) && ($this->container['adjustment_amount'] > 1.0E+18)) {
            $invalidProperties[] = "invalid value for 'adjustment_amount', must be smaller than or equal to 1.0E+18.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets adjustment_type
     *
     * @return string|null
     */
    public function getAdjustmentType()
    {
        return $this->container['adjustment_type'];
    }

    /**
     * Sets adjustment_type
     *
     * @param string|null $adjustment_type Identifies the type of price adjustment being applied.
     *
     * @return self
     */
    public function setAdjustmentType($adjustment_type)
    {
        if (is_null($adjustment_type)) {
            throw new \InvalidArgumentException('non-nullable adjustment_type cannot be null');
        }
        $this->container['adjustment_type'] = $adjustment_type;

        return $this;
    }

    /**
     * Gets adjustment_description
     *
     * @return string|null
     */
    public function getAdjustmentDescription()
    {
        return $this->container['adjustment_description'];
    }

    /**
     * Sets adjustment_description
     *
     * @param string|null $adjustment_description Description of the adjustment being applied
     *
     * @return self
     */
    public function setAdjustmentDescription($adjustment_description)
    {
        if (is_null($adjustment_description)) {
            throw new \InvalidArgumentException('non-nullable adjustment_description cannot be null');
        }
        $this->container['adjustment_description'] = $adjustment_description;

        return $this;
    }

    /**
     * Gets adjustment_rate
     *
     * @return float|null
     */
    public function getAdjustmentRate()
    {
        return $this->container['adjustment_rate'];
    }

    /**
     * Sets adjustment_rate
     *
     * @param float|null $adjustment_rate Rate percent being applied.
     *
     * @return self
     */
    public function setAdjustmentRate($adjustment_rate)
    {
        if (is_null($adjustment_rate)) {
            throw new \InvalidArgumentException('non-nullable adjustment_rate cannot be null');
        }

        if (($adjustment_rate > 100)) {
            throw new \InvalidArgumentException('invalid value for $adjustment_rate when calling PriceAdjustmentDetails., must be smaller than or equal to 100.');
        }

        $this->container['adjustment_rate'] = $adjustment_rate;

        return $this;
    }

    /**
     * Gets adjustment_amount
     *
     * @return float|null
     */
    public function getAdjustmentAmount()
    {
        return $this->container['adjustment_amount'];
    }

    /**
     * Sets adjustment_amount
     *
     * @param float|null $adjustment_amount Amount being applied.
     *
     * @return self
     */
    public function setAdjustmentAmount($adjustment_amount)
    {
        if (is_null($adjustment_amount)) {
            throw new \InvalidArgumentException('non-nullable adjustment_amount cannot be null');
        }

        if (($adjustment_amount > 1.0E+18)) {
            throw new \InvalidArgumentException('invalid value for $adjustment_amount when calling PriceAdjustmentDetails., must be smaller than or equal to 1.0E+18.');
        }

        $this->container['adjustment_amount'] = $adjustment_amount;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


