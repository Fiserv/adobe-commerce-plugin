<?php
/**
 * PaymentReceipt
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Fiserv\Payments\Lib\CommerceHub
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Commerce Hub
 *
 * This API Specification is designed to provide technical guidance required to consume and integrate with our APIs for payment processing.
 *
 * The version of the OpenAPI document: v1.24.08
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.3.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Fiserv\Payments\Lib\CommerceHub\Model;

use \ArrayAccess;
use \Fiserv\Payments\Lib\CommerceHub\ObjectSerializer;

/**
 * PaymentReceipt Class Doc Comment
 *
 * @category Class
 * @description &lt;a href&#x3D;\&quot;../docs?path&#x3D;docs/Resources/Master-Data/Payment-Receipt.md\&quot;&gt;Payment receipt&lt;/a&gt; response details.
 * @package  Fiserv\Payments\Lib\CommerceHub
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class PaymentReceipt implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'PaymentReceipt';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'approved_amount' => '\Fiserv\Payments\Lib\CommerceHub\Model\Amount',
        'amount_components' => '\Fiserv\Payments\Lib\CommerceHub\Model\AmountComponents',
        'balances' => '\Fiserv\Payments\Lib\CommerceHub\Model\Balance[]',
        'processor_response_details' => '\Fiserv\Payments\Lib\CommerceHub\Model\ProcessorResponseDetails',
        'merchant_name' => 'string',
        'merchant_address' => 'string',
        'merchant_city' => 'string',
        'merchant_state_or_province' => 'string',
        'merchant_country' => 'string',
        'merchant_url' => 'string',
        'merchant_postal_code' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'approved_amount' => null,
        'amount_components' => null,
        'balances' => null,
        'processor_response_details' => null,
        'merchant_name' => null,
        'merchant_address' => null,
        'merchant_city' => null,
        'merchant_state_or_province' => null,
        'merchant_country' => null,
        'merchant_url' => null,
        'merchant_postal_code' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'approved_amount' => false,
        'amount_components' => false,
        'balances' => false,
        'processor_response_details' => false,
        'merchant_name' => false,
        'merchant_address' => false,
        'merchant_city' => false,
        'merchant_state_or_province' => false,
        'merchant_country' => false,
        'merchant_url' => false,
        'merchant_postal_code' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'approved_amount' => 'approvedAmount',
        'amount_components' => 'amountComponents',
        'balances' => 'balances',
        'processor_response_details' => 'processorResponseDetails',
        'merchant_name' => 'merchantName',
        'merchant_address' => 'merchantAddress',
        'merchant_city' => 'merchantCity',
        'merchant_state_or_province' => 'merchantStateOrProvince',
        'merchant_country' => 'merchantCountry',
        'merchant_url' => 'merchantURL',
        'merchant_postal_code' => 'merchantPostalCode'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'approved_amount' => 'setApprovedAmount',
        'amount_components' => 'setAmountComponents',
        'balances' => 'setBalances',
        'processor_response_details' => 'setProcessorResponseDetails',
        'merchant_name' => 'setMerchantName',
        'merchant_address' => 'setMerchantAddress',
        'merchant_city' => 'setMerchantCity',
        'merchant_state_or_province' => 'setMerchantStateOrProvince',
        'merchant_country' => 'setMerchantCountry',
        'merchant_url' => 'setMerchantUrl',
        'merchant_postal_code' => 'setMerchantPostalCode'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'approved_amount' => 'getApprovedAmount',
        'amount_components' => 'getAmountComponents',
        'balances' => 'getBalances',
        'processor_response_details' => 'getProcessorResponseDetails',
        'merchant_name' => 'getMerchantName',
        'merchant_address' => 'getMerchantAddress',
        'merchant_city' => 'getMerchantCity',
        'merchant_state_or_province' => 'getMerchantStateOrProvince',
        'merchant_country' => 'getMerchantCountry',
        'merchant_url' => 'getMerchantUrl',
        'merchant_postal_code' => 'getMerchantPostalCode'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('approved_amount', $data ?? [], null);
        $this->setIfExists('amount_components', $data ?? [], null);
        $this->setIfExists('balances', $data ?? [], null);
        $this->setIfExists('processor_response_details', $data ?? [], null);
        $this->setIfExists('merchant_name', $data ?? [], null);
        $this->setIfExists('merchant_address', $data ?? [], null);
        $this->setIfExists('merchant_city', $data ?? [], null);
        $this->setIfExists('merchant_state_or_province', $data ?? [], null);
        $this->setIfExists('merchant_country', $data ?? [], null);
        $this->setIfExists('merchant_url', $data ?? [], null);
        $this->setIfExists('merchant_postal_code', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['merchant_name']) && (mb_strlen($this->container['merchant_name']) > 1024)) {
            $invalidProperties[] = "invalid value for 'merchant_name', the character length must be smaller than or equal to 1024.";
        }

        if (!is_null($this->container['merchant_address']) && (mb_strlen($this->container['merchant_address']) > 1024)) {
            $invalidProperties[] = "invalid value for 'merchant_address', the character length must be smaller than or equal to 1024.";
        }

        if (!is_null($this->container['merchant_city']) && (mb_strlen($this->container['merchant_city']) > 256)) {
            $invalidProperties[] = "invalid value for 'merchant_city', the character length must be smaller than or equal to 256.";
        }

        if (!is_null($this->container['merchant_state_or_province']) && (mb_strlen($this->container['merchant_state_or_province']) > 256)) {
            $invalidProperties[] = "invalid value for 'merchant_state_or_province', the character length must be smaller than or equal to 256.";
        }

        if (!is_null($this->container['merchant_country']) && (mb_strlen($this->container['merchant_country']) > 256)) {
            $invalidProperties[] = "invalid value for 'merchant_country', the character length must be smaller than or equal to 256.";
        }

        if (!is_null($this->container['merchant_url']) && (mb_strlen($this->container['merchant_url']) > 256)) {
            $invalidProperties[] = "invalid value for 'merchant_url', the character length must be smaller than or equal to 256.";
        }

        if (!is_null($this->container['merchant_postal_code']) && (mb_strlen($this->container['merchant_postal_code']) > 10)) {
            $invalidProperties[] = "invalid value for 'merchant_postal_code', the character length must be smaller than or equal to 10.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets approved_amount
     *
     * @return \Fiserv\Payments\Lib\CommerceHub\Model\Amount|null
     */
    public function getApprovedAmount()
    {
        return $this->container['approved_amount'];
    }

    /**
     * Sets approved_amount
     *
     * @param \Fiserv\Payments\Lib\CommerceHub\Model\Amount|null $approved_amount approved_amount
     *
     * @return self
     */
    public function setApprovedAmount($approved_amount)
    {
        if (is_null($approved_amount)) {
            throw new \InvalidArgumentException('non-nullable approved_amount cannot be null');
        }
        $this->container['approved_amount'] = $approved_amount;

        return $this;
    }

    /**
     * Gets amount_components
     *
     * @return \Fiserv\Payments\Lib\CommerceHub\Model\AmountComponents|null
     */
    public function getAmountComponents()
    {
        return $this->container['amount_components'];
    }

    /**
     * Sets amount_components
     *
     * @param \Fiserv\Payments\Lib\CommerceHub\Model\AmountComponents|null $amount_components amount_components
     *
     * @return self
     */
    public function setAmountComponents($amount_components)
    {
        if (is_null($amount_components)) {
            throw new \InvalidArgumentException('non-nullable amount_components cannot be null');
        }
        $this->container['amount_components'] = $amount_components;

        return $this;
    }

    /**
     * Gets balances
     *
     * @return \Fiserv\Payments\Lib\CommerceHub\Model\Balance[]|null
     */
    public function getBalances()
    {
        return $this->container['balances'];
    }

    /**
     * Sets balances
     *
     * @param \Fiserv\Payments\Lib\CommerceHub\Model\Balance[]|null $balances balances
     *
     * @return self
     */
    public function setBalances($balances)
    {
        if (is_null($balances)) {
            throw new \InvalidArgumentException('non-nullable balances cannot be null');
        }
        $this->container['balances'] = $balances;

        return $this;
    }

    /**
     * Gets processor_response_details
     *
     * @return \Fiserv\Payments\Lib\CommerceHub\Model\ProcessorResponseDetails|null
     */
    public function getProcessorResponseDetails()
    {
        return $this->container['processor_response_details'];
    }

    /**
     * Sets processor_response_details
     *
     * @param \Fiserv\Payments\Lib\CommerceHub\Model\ProcessorResponseDetails|null $processor_response_details processor_response_details
     *
     * @return self
     */
    public function setProcessorResponseDetails($processor_response_details)
    {
        if (is_null($processor_response_details)) {
            throw new \InvalidArgumentException('non-nullable processor_response_details cannot be null');
        }
        $this->container['processor_response_details'] = $processor_response_details;

        return $this;
    }

    /**
     * Gets merchant_name
     *
     * @return string|null
     */
    public function getMerchantName()
    {
        return $this->container['merchant_name'];
    }

    /**
     * Sets merchant_name
     *
     * @param string|null $merchant_name Name of the merchant returned from boarded account or dynamic descriptor.
     *
     * @return self
     */
    public function setMerchantName($merchant_name)
    {
        if (is_null($merchant_name)) {
            throw new \InvalidArgumentException('non-nullable merchant_name cannot be null');
        }
        if ((mb_strlen($merchant_name) > 1024)) {
            throw new \InvalidArgumentException('invalid length for $merchant_name when calling PaymentReceipt., must be smaller than or equal to 1024.');
        }

        $this->container['merchant_name'] = $merchant_name;

        return $this;
    }

    /**
     * Gets merchant_address
     *
     * @return string|null
     */
    public function getMerchantAddress()
    {
        return $this->container['merchant_address'];
    }

    /**
     * Sets merchant_address
     *
     * @param string|null $merchant_address Street address of the merchant returned from boarded account or dynamic descriptor.
     *
     * @return self
     */
    public function setMerchantAddress($merchant_address)
    {
        if (is_null($merchant_address)) {
            throw new \InvalidArgumentException('non-nullable merchant_address cannot be null');
        }
        if ((mb_strlen($merchant_address) > 1024)) {
            throw new \InvalidArgumentException('invalid length for $merchant_address when calling PaymentReceipt., must be smaller than or equal to 1024.');
        }

        $this->container['merchant_address'] = $merchant_address;

        return $this;
    }

    /**
     * Gets merchant_city
     *
     * @return string|null
     */
    public function getMerchantCity()
    {
        return $this->container['merchant_city'];
    }

    /**
     * Sets merchant_city
     *
     * @param string|null $merchant_city City of the merchant returned from boarded account or dynamic descriptor.
     *
     * @return self
     */
    public function setMerchantCity($merchant_city)
    {
        if (is_null($merchant_city)) {
            throw new \InvalidArgumentException('non-nullable merchant_city cannot be null');
        }
        if ((mb_strlen($merchant_city) > 256)) {
            throw new \InvalidArgumentException('invalid length for $merchant_city when calling PaymentReceipt., must be smaller than or equal to 256.');
        }

        $this->container['merchant_city'] = $merchant_city;

        return $this;
    }

    /**
     * Gets merchant_state_or_province
     *
     * @return string|null
     */
    public function getMerchantStateOrProvince()
    {
        return $this->container['merchant_state_or_province'];
    }

    /**
     * Sets merchant_state_or_province
     *
     * @param string|null $merchant_state_or_province State or Province of the merchant returned from boarded account or dynamic descriptor.
     *
     * @return self
     */
    public function setMerchantStateOrProvince($merchant_state_or_province)
    {
        if (is_null($merchant_state_or_province)) {
            throw new \InvalidArgumentException('non-nullable merchant_state_or_province cannot be null');
        }
        if ((mb_strlen($merchant_state_or_province) > 256)) {
            throw new \InvalidArgumentException('invalid length for $merchant_state_or_province when calling PaymentReceipt., must be smaller than or equal to 256.');
        }

        $this->container['merchant_state_or_province'] = $merchant_state_or_province;

        return $this;
    }

    /**
     * Gets merchant_country
     *
     * @return string|null
     */
    public function getMerchantCountry()
    {
        return $this->container['merchant_country'];
    }

    /**
     * Sets merchant_country
     *
     * @param string|null $merchant_country Country of the merchant returned from boarded account or dynamic descriptor.
     *
     * @return self
     */
    public function setMerchantCountry($merchant_country)
    {
        if (is_null($merchant_country)) {
            throw new \InvalidArgumentException('non-nullable merchant_country cannot be null');
        }
        if ((mb_strlen($merchant_country) > 256)) {
            throw new \InvalidArgumentException('invalid length for $merchant_country when calling PaymentReceipt., must be smaller than or equal to 256.');
        }

        $this->container['merchant_country'] = $merchant_country;

        return $this;
    }

    /**
     * Gets merchant_url
     *
     * @return string|null
     */
    public function getMerchantUrl()
    {
        return $this->container['merchant_url'];
    }

    /**
     * Sets merchant_url
     *
     * @param string|null $merchant_url Merchant URL returned from boarded account.
     *
     * @return self
     */
    public function setMerchantUrl($merchant_url)
    {
        if (is_null($merchant_url)) {
            throw new \InvalidArgumentException('non-nullable merchant_url cannot be null');
        }
        if ((mb_strlen($merchant_url) > 256)) {
            throw new \InvalidArgumentException('invalid length for $merchant_url when calling PaymentReceipt., must be smaller than or equal to 256.');
        }

        $this->container['merchant_url'] = $merchant_url;

        return $this;
    }

    /**
     * Gets merchant_postal_code
     *
     * @return string|null
     */
    public function getMerchantPostalCode()
    {
        return $this->container['merchant_postal_code'];
    }

    /**
     * Sets merchant_postal_code
     *
     * @param string|null $merchant_postal_code Postal code of the merchant returned from boarded account or dynamic descriptor.
     *
     * @return self
     */
    public function setMerchantPostalCode($merchant_postal_code)
    {
        if (is_null($merchant_postal_code)) {
            throw new \InvalidArgumentException('non-nullable merchant_postal_code cannot be null');
        }
        if ((mb_strlen($merchant_postal_code) > 10)) {
            throw new \InvalidArgumentException('invalid length for $merchant_postal_code when calling PaymentReceipt., must be smaller than or equal to 10.');
        }

        $this->container['merchant_postal_code'] = $merchant_postal_code;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


