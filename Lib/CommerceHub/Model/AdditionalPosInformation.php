<?php
/**
 * AdditionalPosInformation
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Fiserv\Payments\Lib\CommerceHub
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Payments
 *
 * This API Specification is designed to provide technical guidance required to consume and integrate with our APIs for payment processing.
 *
 * The version of the OpenAPI document: v1.3.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.2.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Fiserv\Payments\Lib\CommerceHub\Model;

use \ArrayAccess;
use \Fiserv\Payments\Lib\CommerceHub\ObjectSerializer;

/**
 * AdditionalPosInformation Class Doc Comment
 *
 * @category Class
 * @description &lt;a href&#x3D;\&quot;../docs?path&#x3D;docs/Resources/Master-Data/Additional-POS-Info.md\&quot;&gt;Additional terminal&lt;/a&gt; or software specific information.
 * @package  Fiserv\Payments\Lib\CommerceHub
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class AdditionalPosInformation implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'AdditionalPosInformation';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'pos_id' => 'string',
        'cashier_id' => 'string',
        'stan' => 'string',
        'pos_form_factor_indicator' => 'string',
        'alternate_routing_indicator' => 'bool',
        'data_entry_source' => 'string',
        'transaction_qualifier' => 'string',
        'attended_terminal_data' => 'string',
        'cardholder_activated_terminal_information' => 'string',
        'pos_hardware_and_software' => '\Fiserv\Payments\Lib\CommerceHub\Model\PosHardwareAndSoftware',
        'pos_features' => '\Fiserv\Payments\Lib\CommerceHub\Model\PosFeatures',
        'supervisor_id' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'pos_id' => null,
        'cashier_id' => null,
        'stan' => null,
        'pos_form_factor_indicator' => null,
        'alternate_routing_indicator' => null,
        'data_entry_source' => null,
        'transaction_qualifier' => null,
        'attended_terminal_data' => null,
        'cardholder_activated_terminal_information' => null,
        'pos_hardware_and_software' => null,
        'pos_features' => null,
        'supervisor_id' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'pos_id' => false,
		'cashier_id' => false,
		'stan' => false,
		'pos_form_factor_indicator' => false,
		'alternate_routing_indicator' => false,
		'data_entry_source' => false,
		'transaction_qualifier' => false,
		'attended_terminal_data' => false,
		'cardholder_activated_terminal_information' => false,
		'pos_hardware_and_software' => false,
		'pos_features' => false,
		'supervisor_id' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'pos_id' => 'posId',
        'cashier_id' => 'cashierId',
        'stan' => 'stan',
        'pos_form_factor_indicator' => 'posFormFactorIndicator',
        'alternate_routing_indicator' => 'alternateRoutingIndicator',
        'data_entry_source' => 'dataEntrySource',
        'transaction_qualifier' => 'transactionQualifier',
        'attended_terminal_data' => 'attendedTerminalData',
        'cardholder_activated_terminal_information' => 'cardholderActivatedTerminalInformation',
        'pos_hardware_and_software' => 'posHardwareAndSoftware',
        'pos_features' => 'posFeatures',
        'supervisor_id' => 'supervisorId'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'pos_id' => 'setPosId',
        'cashier_id' => 'setCashierId',
        'stan' => 'setStan',
        'pos_form_factor_indicator' => 'setPosFormFactorIndicator',
        'alternate_routing_indicator' => 'setAlternateRoutingIndicator',
        'data_entry_source' => 'setDataEntrySource',
        'transaction_qualifier' => 'setTransactionQualifier',
        'attended_terminal_data' => 'setAttendedTerminalData',
        'cardholder_activated_terminal_information' => 'setCardholderActivatedTerminalInformation',
        'pos_hardware_and_software' => 'setPosHardwareAndSoftware',
        'pos_features' => 'setPosFeatures',
        'supervisor_id' => 'setSupervisorId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'pos_id' => 'getPosId',
        'cashier_id' => 'getCashierId',
        'stan' => 'getStan',
        'pos_form_factor_indicator' => 'getPosFormFactorIndicator',
        'alternate_routing_indicator' => 'getAlternateRoutingIndicator',
        'data_entry_source' => 'getDataEntrySource',
        'transaction_qualifier' => 'getTransactionQualifier',
        'attended_terminal_data' => 'getAttendedTerminalData',
        'cardholder_activated_terminal_information' => 'getCardholderActivatedTerminalInformation',
        'pos_hardware_and_software' => 'getPosHardwareAndSoftware',
        'pos_features' => 'getPosFeatures',
        'supervisor_id' => 'getSupervisorId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('pos_id', $data ?? [], null);
        $this->setIfExists('cashier_id', $data ?? [], null);
        $this->setIfExists('stan', $data ?? [], null);
        $this->setIfExists('pos_form_factor_indicator', $data ?? [], null);
        $this->setIfExists('alternate_routing_indicator', $data ?? [], null);
        $this->setIfExists('data_entry_source', $data ?? [], null);
        $this->setIfExists('transaction_qualifier', $data ?? [], null);
        $this->setIfExists('attended_terminal_data', $data ?? [], null);
        $this->setIfExists('cardholder_activated_terminal_information', $data ?? [], null);
        $this->setIfExists('pos_hardware_and_software', $data ?? [], null);
        $this->setIfExists('pos_features', $data ?? [], null);
        $this->setIfExists('supervisor_id', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['stan']) && (mb_strlen($this->container['stan']) > 6)) {
            $invalidProperties[] = "invalid value for 'stan', the character length must be smaller than or equal to 6.";
        }

        if (!is_null($this->container['data_entry_source']) && (mb_strlen($this->container['data_entry_source']) > 50)) {
            $invalidProperties[] = "invalid value for 'data_entry_source', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['attended_terminal_data']) && (mb_strlen($this->container['attended_terminal_data']) > 16)) {
            $invalidProperties[] = "invalid value for 'attended_terminal_data', the character length must be smaller than or equal to 16.";
        }

        if (!is_null($this->container['cardholder_activated_terminal_information']) && (mb_strlen($this->container['cardholder_activated_terminal_information']) > 16)) {
            $invalidProperties[] = "invalid value for 'cardholder_activated_terminal_information', the character length must be smaller than or equal to 16.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets pos_id
     *
     * @return string|null
     */
    public function getPosId()
    {
        return $this->container['pos_id'];
    }

    /**
     * Sets pos_id
     *
     * @param string|null $pos_id Identifies the specific device or point of entry where the transaction originated. For example, pump number, lane number, terminal number, etc.
     *
     * @return self
     */
    public function setPosId($pos_id)
    {

        if (is_null($pos_id)) {
            throw new \InvalidArgumentException('non-nullable pos_id cannot be null');
        }

        $this->container['pos_id'] = $pos_id;

        return $this;
    }

    /**
     * Gets cashier_id
     *
     * @return string|null
     */
    public function getCashierId()
    {
        return $this->container['cashier_id'];
    }

    /**
     * Sets cashier_id
     *
     * @param string|null $cashier_id Used to uniquely identify the merchant’s store cashier or employee accepting the transaction.
     *
     * @return self
     */
    public function setCashierId($cashier_id)
    {

        if (is_null($cashier_id)) {
            throw new \InvalidArgumentException('non-nullable cashier_id cannot be null');
        }

        $this->container['cashier_id'] = $cashier_id;

        return $this;
    }

    /**
     * Gets stan
     *
     * @return string|null
     */
    public function getStan()
    {
        return $this->container['stan'];
    }

    /**
     * Sets stan
     *
     * @param string|null $stan System Trace or Debit Reg E Receipt Number - A system-generated number is provided by the merchant and it uniquely identifies a transaction. This number needs to be a unique number per Merchant and Terminal ID.
     *
     * @return self
     */
    public function setStan($stan)
    {
        if (!is_null($stan) && (mb_strlen($stan) > 6)) {
            throw new \InvalidArgumentException('invalid length for $stan when calling AdditionalPosInformation., must be smaller than or equal to 6.');
        }


        if (is_null($stan)) {
            throw new \InvalidArgumentException('non-nullable stan cannot be null');
        }

        $this->container['stan'] = $stan;

        return $this;
    }

    /**
     * Gets pos_form_factor_indicator
     *
     * @return string|null
     */
    public function getPosFormFactorIndicator()
    {
        return $this->container['pos_form_factor_indicator'];
    }

    /**
     * Sets pos_form_factor_indicator
     *
     * @param string|null $pos_form_factor_indicator This field is used to identify the form factor used at the POS for MasterCard PayPass transactions. Note: Some values from 00–19 may indicate not only the physical form factor but also other attributes such as device technology and payment app specifications. Values from 20–99 exclusively indicate the form factor only without also indicating the storage technology.
     *
     * @return self
     */
    public function setPosFormFactorIndicator($pos_form_factor_indicator)
    {

        if (is_null($pos_form_factor_indicator)) {
            throw new \InvalidArgumentException('non-nullable pos_form_factor_indicator cannot be null');
        }

        $this->container['pos_form_factor_indicator'] = $pos_form_factor_indicator;

        return $this;
    }

    /**
     * Gets alternate_routing_indicator
     *
     * @return bool|null
     */
    public function getAlternateRoutingIndicator()
    {
        return $this->container['alternate_routing_indicator'];
    }

    /**
     * Sets alternate_routing_indicator
     *
     * @param bool|null $alternate_routing_indicator Identifies if the terminal support the Alternate Routing feature used for PINless POS, Signature Debit, and EMV Common AID features (excluding Online PIN CVM) allows merchants to process PIN Debit Network transactions without a PIN.
     *
     * @return self
     */
    public function setAlternateRoutingIndicator($alternate_routing_indicator)
    {

        if (is_null($alternate_routing_indicator)) {
            throw new \InvalidArgumentException('non-nullable alternate_routing_indicator cannot be null');
        }

        $this->container['alternate_routing_indicator'] = $alternate_routing_indicator;

        return $this;
    }

    /**
     * Gets data_entry_source
     *
     * @return string|null
     */
    public function getDataEntrySource()
    {
        return $this->container['data_entry_source'];
    }

    /**
     * Sets data_entry_source
     *
     * @param string|null $data_entry_source Channel the consumer used to initiate a card not present transaction.  Valid Values: * MOBILE_APP * MOBILE_WEB * BROWSER_PC * KIOSK * CONSOLE * 3DS_REQUESTOR_INITIATED * UNSPECIFIED * ELECTRONIC_PAYMENT_TERMINAL * AUTOMATED_FUEL_DISPENSING_MACHINE * UNATTENDED_CUSTOMER_TERMINAL * ECOMMERCE_CUSTOMER_PRESENT * MOBILE_TERMINAL * MOBILE_POS * ELECTRONIC_CASH_REGISTER * IVR_VRU * TICKET_MACHINE * CALL_CENTER_OPERATOR
     *
     * @return self
     */
    public function setDataEntrySource($data_entry_source)
    {
        if (!is_null($data_entry_source) && (mb_strlen($data_entry_source) > 50)) {
            throw new \InvalidArgumentException('invalid length for $data_entry_source when calling AdditionalPosInformation., must be smaller than or equal to 50.');
        }


        if (is_null($data_entry_source)) {
            throw new \InvalidArgumentException('non-nullable data_entry_source cannot be null');
        }

        $this->container['data_entry_source'] = $data_entry_source;

        return $this;
    }

    /**
     * Gets transaction_qualifier
     *
     * @return string|null
     */
    public function getTransactionQualifier()
    {
        return $this->container['transaction_qualifier'];
    }

    /**
     * Sets transaction_qualifier
     *
     * @param string|null $transaction_qualifier Used for Discover - Discover TransactionQualifier.
     *
     * @return self
     */
    public function setTransactionQualifier($transaction_qualifier)
    {

        if (is_null($transaction_qualifier)) {
            throw new \InvalidArgumentException('non-nullable transaction_qualifier cannot be null');
        }

        $this->container['transaction_qualifier'] = $transaction_qualifier;

        return $this;
    }

    /**
     * Gets attended_terminal_data
     *
     * @return string|null
     */
    public function getAttendedTerminalData()
    {
        return $this->container['attended_terminal_data'];
    }

    /**
     * Sets attended_terminal_data
     *
     * @param string|null $attended_terminal_data Indicates if the card acceptor was at the point of sale.  Valid Values: * ATTENDED – Attended terminal (Not a valid option if cardholderActivatedTerminalInformation is CAT_LEVEL_6) * UNATTENDED – Unattended terminal or software * NONE – No terminal or software used (VRU, etc.)
     *
     * @return self
     */
    public function setAttendedTerminalData($attended_terminal_data)
    {
        if (!is_null($attended_terminal_data) && (mb_strlen($attended_terminal_data) > 16)) {
            throw new \InvalidArgumentException('invalid length for $attended_terminal_data when calling AdditionalPosInformation., must be smaller than or equal to 16.');
        }


        if (is_null($attended_terminal_data)) {
            throw new \InvalidArgumentException('non-nullable attended_terminal_data cannot be null');
        }

        $this->container['attended_terminal_data'] = $attended_terminal_data;

        return $this;
    }

    /**
     * Gets cardholder_activated_terminal_information
     *
     * @return string|null
     */
    public function getCardholderActivatedTerminalInformation()
    {
        return $this->container['cardholder_activated_terminal_information'];
    }

    /**
     * Sets cardholder_activated_terminal_information
     *
     * @param string|null $cardholder_activated_terminal_information Identifies Cardholder Activated Terminal (CAT) capabilities of the device.  Valid Values: * BLANK – Not a CAT device * CAT_LEVEL_1 - Automated dispensing machine with online/offline PIN (MC Only) * CAT_LEVEL_2 - Self-service terminal, used for automated fueling transactions and unattended terminals. * CAT_LEVEL_3 - Limited amount terminal * CAT_LEVEL_6 - Electronic commerce transaction (attendedTerminalData must not be ATTENDED)
     *
     * @return self
     */
    public function setCardholderActivatedTerminalInformation($cardholder_activated_terminal_information)
    {
        if (!is_null($cardholder_activated_terminal_information) && (mb_strlen($cardholder_activated_terminal_information) > 16)) {
            throw new \InvalidArgumentException('invalid length for $cardholder_activated_terminal_information when calling AdditionalPosInformation., must be smaller than or equal to 16.');
        }


        if (is_null($cardholder_activated_terminal_information)) {
            throw new \InvalidArgumentException('non-nullable cardholder_activated_terminal_information cannot be null');
        }

        $this->container['cardholder_activated_terminal_information'] = $cardholder_activated_terminal_information;

        return $this;
    }

    /**
     * Gets pos_hardware_and_software
     *
     * @return \Fiserv\Payments\Lib\CommerceHub\Model\PosHardwareAndSoftware|null
     */
    public function getPosHardwareAndSoftware()
    {
        return $this->container['pos_hardware_and_software'];
    }

    /**
     * Sets pos_hardware_and_software
     *
     * @param \Fiserv\Payments\Lib\CommerceHub\Model\PosHardwareAndSoftware|null $pos_hardware_and_software pos_hardware_and_software
     *
     * @return self
     */
    public function setPosHardwareAndSoftware($pos_hardware_and_software)
    {

        if (is_null($pos_hardware_and_software)) {
            throw new \InvalidArgumentException('non-nullable pos_hardware_and_software cannot be null');
        }

        $this->container['pos_hardware_and_software'] = $pos_hardware_and_software;

        return $this;
    }

    /**
     * Gets pos_features
     *
     * @return \Fiserv\Payments\Lib\CommerceHub\Model\PosFeatures|null
     */
    public function getPosFeatures()
    {
        return $this->container['pos_features'];
    }

    /**
     * Sets pos_features
     *
     * @param \Fiserv\Payments\Lib\CommerceHub\Model\PosFeatures|null $pos_features pos_features
     *
     * @return self
     */
    public function setPosFeatures($pos_features)
    {

        if (is_null($pos_features)) {
            throw new \InvalidArgumentException('non-nullable pos_features cannot be null');
        }

        $this->container['pos_features'] = $pos_features;

        return $this;
    }

    /**
     * Gets supervisor_id
     *
     * @return string|null
     */
    public function getSupervisorId()
    {
        return $this->container['supervisor_id'];
    }

    /**
     * Sets supervisor_id
     *
     * @param string|null $supervisor_id Used to uniquely identify the merchant’s store supervisor transactions.
     *
     * @return self
     */
    public function setSupervisorId($supervisor_id)
    {

        if (is_null($supervisor_id)) {
            throw new \InvalidArgumentException('non-nullable supervisor_id cannot be null');
        }

        $this->container['supervisor_id'] = $supervisor_id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


