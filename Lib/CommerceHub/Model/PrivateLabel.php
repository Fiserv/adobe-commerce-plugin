<?php
/**
 * PrivateLabel
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Fiserv\Payments\Lib\CommerceHub
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Payments
 *
 * This API Specification is designed to provide technical guidance required to consume and integrate with our APIs for payment processing.
 *
 * The version of the OpenAPI document: v1.3.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.2.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Fiserv\Payments\Lib\CommerceHub\Model;

use \ArrayAccess;
use \Fiserv\Payments\Lib\CommerceHub\ObjectSerializer;

/**
 * PrivateLabel Class Doc Comment
 *
 * @category Class
 * @description Private label transaction information.
 * @package  Fiserv\Payments\Lib\CommerceHub
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class PrivateLabel implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'PrivateLabel';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'payment_source' => 'string',
        'payment_type' => 'string',
        'special_finance_indicator' => 'string',
        'credit_plan_number' => 'string',
        'minimum_spend_exempt_indicator' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'payment_source' => null,
        'payment_type' => null,
        'special_finance_indicator' => null,
        'credit_plan_number' => null,
        'minimum_spend_exempt_indicator' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'payment_source' => false,
		'payment_type' => false,
		'special_finance_indicator' => false,
		'credit_plan_number' => false,
		'minimum_spend_exempt_indicator' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'payment_source' => 'paymentSource',
        'payment_type' => 'paymentType',
        'special_finance_indicator' => 'specialFinanceIndicator',
        'credit_plan_number' => 'creditPlanNumber',
        'minimum_spend_exempt_indicator' => 'minimumSpendExemptIndicator'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'payment_source' => 'setPaymentSource',
        'payment_type' => 'setPaymentType',
        'special_finance_indicator' => 'setSpecialFinanceIndicator',
        'credit_plan_number' => 'setCreditPlanNumber',
        'minimum_spend_exempt_indicator' => 'setMinimumSpendExemptIndicator'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'payment_source' => 'getPaymentSource',
        'payment_type' => 'getPaymentType',
        'special_finance_indicator' => 'getSpecialFinanceIndicator',
        'credit_plan_number' => 'getCreditPlanNumber',
        'minimum_spend_exempt_indicator' => 'getMinimumSpendExemptIndicator'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const MINIMUM_SPEND_EXEMPT_INDICATOR_EXEMPT = 'EXEMPT';
    public const MINIMUM_SPEND_EXEMPT_INDICATOR_NOT_EXEMPT = 'NOT_EXEMPT';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getMinimumSpendExemptIndicatorAllowableValues()
    {
        return [
            self::MINIMUM_SPEND_EXEMPT_INDICATOR_EXEMPT,
            self::MINIMUM_SPEND_EXEMPT_INDICATOR_NOT_EXEMPT,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('payment_source', $data ?? [], null);
        $this->setIfExists('payment_type', $data ?? [], null);
        $this->setIfExists('special_finance_indicator', $data ?? [], null);
        $this->setIfExists('credit_plan_number', $data ?? [], null);
        $this->setIfExists('minimum_spend_exempt_indicator', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['payment_source']) && (mb_strlen($this->container['payment_source']) > 256)) {
            $invalidProperties[] = "invalid value for 'payment_source', the character length must be smaller than or equal to 256.";
        }

        if (!is_null($this->container['payment_type']) && (mb_strlen($this->container['payment_type']) > 16)) {
            $invalidProperties[] = "invalid value for 'payment_type', the character length must be smaller than or equal to 16.";
        }

        if (!is_null($this->container['special_finance_indicator']) && (mb_strlen($this->container['special_finance_indicator']) > 16)) {
            $invalidProperties[] = "invalid value for 'special_finance_indicator', the character length must be smaller than or equal to 16.";
        }

        if (!is_null($this->container['credit_plan_number']) && (mb_strlen($this->container['credit_plan_number']) > 5)) {
            $invalidProperties[] = "invalid value for 'credit_plan_number', the character length must be smaller than or equal to 5.";
        }

        $allowedValues = $this->getMinimumSpendExemptIndicatorAllowableValues();
        if (!is_null($this->container['minimum_spend_exempt_indicator']) && !in_array($this->container['minimum_spend_exempt_indicator'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'minimum_spend_exempt_indicator', must be one of '%s'",
                $this->container['minimum_spend_exempt_indicator'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets payment_source
     *
     * @return string|null
     */
    public function getPaymentSource()
    {
        return $this->container['payment_source'];
    }

    /**
     * Sets payment_source
     *
     * @param string|null $payment_source Private label card source.
     *
     * @return self
     */
    public function setPaymentSource($payment_source)
    {
        if (!is_null($payment_source) && (mb_strlen($payment_source) > 256)) {
            throw new \InvalidArgumentException('invalid length for $payment_source when calling PrivateLabel., must be smaller than or equal to 256.');
        }


        if (is_null($payment_source)) {
            throw new \InvalidArgumentException('non-nullable payment_source cannot be null');
        }

        $this->container['payment_source'] = $payment_source;

        return $this;
    }

    /**
     * Gets payment_type
     *
     * @return string|null
     */
    public function getPaymentType()
    {
        return $this->container['payment_type'];
    }

    /**
     * Sets payment_type
     *
     * @param string|null $payment_type Type of transaction.
     *
     * @return self
     */
    public function setPaymentType($payment_type)
    {
        if (!is_null($payment_type) && (mb_strlen($payment_type) > 16)) {
            throw new \InvalidArgumentException('invalid length for $payment_type when calling PrivateLabel., must be smaller than or equal to 16.');
        }


        if (is_null($payment_type)) {
            throw new \InvalidArgumentException('non-nullable payment_type cannot be null');
        }

        $this->container['payment_type'] = $payment_type;

        return $this;
    }

    /**
     * Gets special_finance_indicator
     *
     * @return string|null
     */
    public function getSpecialFinanceIndicator()
    {
        return $this->container['special_finance_indicator'];
    }

    /**
     * Sets special_finance_indicator
     *
     * @param string|null $special_finance_indicator Indicates if special finance term and rate.
     *
     * @return self
     */
    public function setSpecialFinanceIndicator($special_finance_indicator)
    {
        if (!is_null($special_finance_indicator) && (mb_strlen($special_finance_indicator) > 16)) {
            throw new \InvalidArgumentException('invalid length for $special_finance_indicator when calling PrivateLabel., must be smaller than or equal to 16.');
        }


        if (is_null($special_finance_indicator)) {
            throw new \InvalidArgumentException('non-nullable special_finance_indicator cannot be null');
        }

        $this->container['special_finance_indicator'] = $special_finance_indicator;

        return $this;
    }

    /**
     * Gets credit_plan_number
     *
     * @return string|null
     */
    public function getCreditPlanNumber()
    {
        return $this->container['credit_plan_number'];
    }

    /**
     * Sets credit_plan_number
     *
     * @param string|null $credit_plan_number Payment program assigned by the private label processor.
     *
     * @return self
     */
    public function setCreditPlanNumber($credit_plan_number)
    {
        if (!is_null($credit_plan_number) && (mb_strlen($credit_plan_number) > 5)) {
            throw new \InvalidArgumentException('invalid length for $credit_plan_number when calling PrivateLabel., must be smaller than or equal to 5.');
        }


        if (is_null($credit_plan_number)) {
            throw new \InvalidArgumentException('non-nullable credit_plan_number cannot be null');
        }

        $this->container['credit_plan_number'] = $credit_plan_number;

        return $this;
    }

    /**
     * Gets minimum_spend_exempt_indicator
     *
     * @return string|null
     */
    public function getMinimumSpendExemptIndicator()
    {
        return $this->container['minimum_spend_exempt_indicator'];
    }

    /**
     * Sets minimum_spend_exempt_indicator
     *
     * @param string|null $minimum_spend_exempt_indicator The minimum spend amount the customer is exempt from. Valid Values: * EXEMPT  * NOT_EXEMPT
     *
     * @return self
     */
    public function setMinimumSpendExemptIndicator($minimum_spend_exempt_indicator)
    {
        $allowedValues = $this->getMinimumSpendExemptIndicatorAllowableValues();
        if (!is_null($minimum_spend_exempt_indicator) && !in_array($minimum_spend_exempt_indicator, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'minimum_spend_exempt_indicator', must be one of '%s'",
                    $minimum_spend_exempt_indicator,
                    implode("', '", $allowedValues)
                )
            );
        }

        if (is_null($minimum_spend_exempt_indicator)) {
            throw new \InvalidArgumentException('non-nullable minimum_spend_exempt_indicator cannot be null');
        }

        $this->container['minimum_spend_exempt_indicator'] = $minimum_spend_exempt_indicator;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


