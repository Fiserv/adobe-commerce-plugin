<?php
/**
 * DebitNetworkPinlessDetails
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Fiserv\Payments\Lib\CommerceHub
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Payments
 *
 * This API Specification is designed to provide technical guidance required to consume and integrate with our APIs for payment processing.
 *
 * The version of the OpenAPI document: v1.3.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.2.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Fiserv\Payments\Lib\CommerceHub\Model;

use \ArrayAccess;
use \Fiserv\Payments\Lib\CommerceHub\ObjectSerializer;

/**
 * DebitNetworkPinlessDetails Class Doc Comment
 *
 * @category Class
 * @description Debit network PINless details based on account/card info BIN data.
 * @package  Fiserv\Payments\Lib\CommerceHub
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class DebitNetworkPinlessDetails implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'DebitNetworkPinlessDetails';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'debit_network_id' => 'string',
        'pinless_pos' => 'string',
        'pinless_bill_pay' => 'string',
        'e_commerce' => 'string',
        'dual_indicator' => 'string',
        'pinned_pos' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'debit_network_id' => null,
        'pinless_pos' => null,
        'pinless_bill_pay' => null,
        'e_commerce' => null,
        'dual_indicator' => null,
        'pinned_pos' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'debit_network_id' => false,
		'pinless_pos' => false,
		'pinless_bill_pay' => false,
		'e_commerce' => false,
		'dual_indicator' => false,
		'pinned_pos' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'debit_network_id' => 'debitNetworkId',
        'pinless_pos' => 'pinlessPOS',
        'pinless_bill_pay' => 'pinlessBillPay',
        'e_commerce' => 'eCommerce',
        'dual_indicator' => 'dualIndicator',
        'pinned_pos' => 'pinnedPOS'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'debit_network_id' => 'setDebitNetworkId',
        'pinless_pos' => 'setPinlessPos',
        'pinless_bill_pay' => 'setPinlessBillPay',
        'e_commerce' => 'setECommerce',
        'dual_indicator' => 'setDualIndicator',
        'pinned_pos' => 'setPinnedPos'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'debit_network_id' => 'getDebitNetworkId',
        'pinless_pos' => 'getPinlessPos',
        'pinless_bill_pay' => 'getPinlessBillPay',
        'e_commerce' => 'getECommerce',
        'dual_indicator' => 'getDualIndicator',
        'pinned_pos' => 'getPinnedPos'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('debit_network_id', $data ?? [], null);
        $this->setIfExists('pinless_pos', $data ?? [], null);
        $this->setIfExists('pinless_bill_pay', $data ?? [], null);
        $this->setIfExists('e_commerce', $data ?? [], null);
        $this->setIfExists('dual_indicator', $data ?? [], null);
        $this->setIfExists('pinned_pos', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['debit_network_id']) && (mb_strlen($this->container['debit_network_id']) > 20)) {
            $invalidProperties[] = "invalid value for 'debit_network_id', the character length must be smaller than or equal to 20.";
        }

        if (!is_null($this->container['pinless_pos']) && (mb_strlen($this->container['pinless_pos']) > 13)) {
            $invalidProperties[] = "invalid value for 'pinless_pos', the character length must be smaller than or equal to 13.";
        }

        if (!is_null($this->container['pinless_bill_pay']) && (mb_strlen($this->container['pinless_bill_pay']) > 13)) {
            $invalidProperties[] = "invalid value for 'pinless_bill_pay', the character length must be smaller than or equal to 13.";
        }

        if (!is_null($this->container['e_commerce']) && (mb_strlen($this->container['e_commerce']) > 13)) {
            $invalidProperties[] = "invalid value for 'e_commerce', the character length must be smaller than or equal to 13.";
        }

        if (!is_null($this->container['dual_indicator']) && (mb_strlen($this->container['dual_indicator']) > 13)) {
            $invalidProperties[] = "invalid value for 'dual_indicator', the character length must be smaller than or equal to 13.";
        }

        if (!is_null($this->container['pinned_pos']) && (mb_strlen($this->container['pinned_pos']) > 13)) {
            $invalidProperties[] = "invalid value for 'pinned_pos', the character length must be smaller than or equal to 13.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets debit_network_id
     *
     * @return string|null
     */
    public function getDebitNetworkId()
    {
        return $this->container['debit_network_id'];
    }

    /**
     * Sets debit_network_id
     *
     * @param string|null $debit_network_id Valid Values: * PAVD_FISERV - A5: PAVD FISERV * SHAZAM - 01: SHAZAM * NYCE - 02: NYCE * PULSE - 03: PULSE * STAR_WEST - 05: STAR-WEST * STAR_EAST - 07: STAR-EAST * JETS - 11: JETS * INFOLINKS - 12: INFOLINKS * CARLFS - 13: CARLFS * STAR_NE - 14: STAR NE * PAVD - 15: PAVD * CNB_ENID - 16: CNB-ENID * ATH_SCOTIA_BANK - 17: ATH-SCOTIA BANK * ATH_DIRECT - 18: ATH-DIRECT * INTERLINK - 19: INTERLINK * INTERAC_EVERLINK - 20: INTERAC EVERLINK * EVERLINK_INTERAC_ICU - 21: EVERLINK INTERAC ICU * UNIONPAY - 23: UNIONPAY * MAESTRO_DIRECT - 25: MAESTRO DIRECT * MCX - 26: MCX * EBT_SOLUTRAN - 28: EBT SOLUTRAN * EBT_ACS - 29: EBT ACS * MAESTRO_STAR_WEST - 30: MAESTRO STAR WEST * STAR_WEST_OPTION - 31: STAR WEST OPTION * JEANIE_STAR_WEST - 33: JEANIE STAR WEST * JEANIE_DIRECT - 34: JEANIE DIRECT * AFFN_DIRECT - 35: AFFN DIRECT * CU24_DIRECT - 36: CU24-DIRECT * EBT_TEAM_OF_TEXAS - 37: EBT TEAM OF TEXAS * EBT_JPCHASE - 39: EBT JPCHASE * SVS - 41: SVS * EXXON - 42: EXXON * BASE_24/INTERAC - 43: BASE 24/INTERAC * CU24_FIDELITY - 46: CU24-FIDELITY * EBT_EFUNDS - 47: EBT EFUNDS * AFFN_FIDELITY - 48: AFFN FIDELITY * EBT_NORTHRUP_GRUMMAN - 49: EBT NORTHRUP GRUMMAN * CU24_FISERV - 51: CU24-FISERV * AFFN_FISERV - 52: AFFN FISERV * STAR_EAST_FISERV - 56: STAR-EAST FISERV * PULSE_FISERV - 57: PULSE FISERV * NYCE_FISERV - 59: NYCE FISERV * STAR_WEST_FISERV - 62: STAR-WEST FISERV * STAR_NE_FISERV - 63: STAR NE FISERV * MAESTRO_FISERV - 64: MAESTRO FISERV * INTERLINK_FISERV - 65: INTERLINK FISERV * EBT_FISERV - 67: EBT-FISERV * ACCEL_FISERV - 68: ACCEL FISERV * OPTION_FISERV - 69: OPTION-FISERV
     *
     * @return self
     */
    public function setDebitNetworkId($debit_network_id)
    {
        if (!is_null($debit_network_id) && (mb_strlen($debit_network_id) > 20)) {
            throw new \InvalidArgumentException('invalid length for $debit_network_id when calling DebitNetworkPinlessDetails., must be smaller than or equal to 20.');
        }


        if (is_null($debit_network_id)) {
            throw new \InvalidArgumentException('non-nullable debit_network_id cannot be null');
        }

        $this->container['debit_network_id'] = $debit_network_id;

        return $this;
    }

    /**
     * Gets pinless_pos
     *
     * @return string|null
     */
    public function getPinlessPos()
    {
        return $this->container['pinless_pos'];
    }

    /**
     * Sets pinless_pos
     *
     * @param string|null $pinless_pos PINless POS indicator.  Valid Values: * NOT_SUPPORTED - (Default) No / Not Supported * SUPPORTED - Yes / Supported
     *
     * @return self
     */
    public function setPinlessPos($pinless_pos)
    {
        if (!is_null($pinless_pos) && (mb_strlen($pinless_pos) > 13)) {
            throw new \InvalidArgumentException('invalid length for $pinless_pos when calling DebitNetworkPinlessDetails., must be smaller than or equal to 13.');
        }


        if (is_null($pinless_pos)) {
            throw new \InvalidArgumentException('non-nullable pinless_pos cannot be null');
        }

        $this->container['pinless_pos'] = $pinless_pos;

        return $this;
    }

    /**
     * Gets pinless_bill_pay
     *
     * @return string|null
     */
    public function getPinlessBillPay()
    {
        return $this->container['pinless_bill_pay'];
    }

    /**
     * Sets pinless_bill_pay
     *
     * @param string|null $pinless_bill_pay PINless BillPay indicator.  Valid Values: * NOT_SUPPORTED - (Default) No / Not Supported * SUPPORTED - Yes / Supported
     *
     * @return self
     */
    public function setPinlessBillPay($pinless_bill_pay)
    {
        if (!is_null($pinless_bill_pay) && (mb_strlen($pinless_bill_pay) > 13)) {
            throw new \InvalidArgumentException('invalid length for $pinless_bill_pay when calling DebitNetworkPinlessDetails., must be smaller than or equal to 13.');
        }


        if (is_null($pinless_bill_pay)) {
            throw new \InvalidArgumentException('non-nullable pinless_bill_pay cannot be null');
        }

        $this->container['pinless_bill_pay'] = $pinless_bill_pay;

        return $this;
    }

    /**
     * Gets e_commerce
     *
     * @return string|null
     */
    public function getECommerce()
    {
        return $this->container['e_commerce'];
    }

    /**
     * Sets e_commerce
     *
     * @param string|null $e_commerce e-Commerce indicator.  Valid Values: * NOT_SUPPORTED - (Default) No / Not Supported * SUPPORTED - Yes / Supported
     *
     * @return self
     */
    public function setECommerce($e_commerce)
    {
        if (!is_null($e_commerce) && (mb_strlen($e_commerce) > 13)) {
            throw new \InvalidArgumentException('invalid length for $e_commerce when calling DebitNetworkPinlessDetails., must be smaller than or equal to 13.');
        }


        if (is_null($e_commerce)) {
            throw new \InvalidArgumentException('non-nullable e_commerce cannot be null');
        }

        $this->container['e_commerce'] = $e_commerce;

        return $this;
    }

    /**
     * Gets dual_indicator
     *
     * @return string|null
     */
    public function getDualIndicator()
    {
        return $this->container['dual_indicator'];
    }

    /**
     * Sets dual_indicator
     *
     * @param string|null $dual_indicator Dual indicator.  Valid Values: * NOT_SUPPORTED - (Default) No / Not Supported * SUPPORTED - Yes / Supported
     *
     * @return self
     */
    public function setDualIndicator($dual_indicator)
    {
        if (!is_null($dual_indicator) && (mb_strlen($dual_indicator) > 13)) {
            throw new \InvalidArgumentException('invalid length for $dual_indicator when calling DebitNetworkPinlessDetails., must be smaller than or equal to 13.');
        }


        if (is_null($dual_indicator)) {
            throw new \InvalidArgumentException('non-nullable dual_indicator cannot be null');
        }

        $this->container['dual_indicator'] = $dual_indicator;

        return $this;
    }

    /**
     * Gets pinned_pos
     *
     * @return string|null
     */
    public function getPinnedPos()
    {
        return $this->container['pinned_pos'];
    }

    /**
     * Sets pinned_pos
     *
     * @param string|null $pinned_pos Pinned POS indicator.  Valid Values: * NOT_SUPPORTED - (Default) No / Not Supported * SUPPORTED - Yes / Supported
     *
     * @return self
     */
    public function setPinnedPos($pinned_pos)
    {
        if (!is_null($pinned_pos) && (mb_strlen($pinned_pos) > 13)) {
            throw new \InvalidArgumentException('invalid length for $pinned_pos when calling DebitNetworkPinlessDetails., must be smaller than or equal to 13.');
        }


        if (is_null($pinned_pos)) {
            throw new \InvalidArgumentException('non-nullable pinned_pos cannot be null');
        }

        $this->container['pinned_pos'] = $pinned_pos;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


