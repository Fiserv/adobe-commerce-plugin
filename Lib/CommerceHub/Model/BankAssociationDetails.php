<?php
/**
 * BankAssociationDetails
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Fiserv\Payments\Lib\CommerceHub
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Commerce Hub
 *
 * This API Specification is designed to provide technical guidance required to consume and integrate with our APIs for payment processing.
 *
 * The version of the OpenAPI document: v1.24.08
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.3.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Fiserv\Payments\Lib\CommerceHub\Model;

use \ArrayAccess;
use \Fiserv\Payments\Lib\CommerceHub\ObjectSerializer;

/**
 * BankAssociationDetails Class Doc Comment
 *
 * @category Class
 * @description &lt;a href&#x3D;\&quot;../docs?path&#x3D;docs/Resources/Master-Data/Processor-Response-Details.md#bank-association-details\&quot;&gt;Bank association&lt;/a&gt; response details.
 * @package  Fiserv\Payments\Lib\CommerceHub
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class BankAssociationDetails implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'BankAssociationDetails';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'association_response_code' => 'string',
        'transaction_reference_information' => 'string',
        'transaction_timestamp' => '\DateTime',
        'bank_id' => 'string',
        'avs_security_code_response' => '\Fiserv\Payments\Lib\CommerceHub\Model\AvsSecurityCodeResponse'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'association_response_code' => null,
        'transaction_reference_information' => null,
        'transaction_timestamp' => 'date-time',
        'bank_id' => null,
        'avs_security_code_response' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'association_response_code' => false,
        'transaction_reference_information' => false,
        'transaction_timestamp' => false,
        'bank_id' => false,
        'avs_security_code_response' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'association_response_code' => 'associationResponseCode',
        'transaction_reference_information' => 'transactionReferenceInformation',
        'transaction_timestamp' => 'transactionTimestamp',
        'bank_id' => 'bankId',
        'avs_security_code_response' => 'avsSecurityCodeResponse'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'association_response_code' => 'setAssociationResponseCode',
        'transaction_reference_information' => 'setTransactionReferenceInformation',
        'transaction_timestamp' => 'setTransactionTimestamp',
        'bank_id' => 'setBankId',
        'avs_security_code_response' => 'setAvsSecurityCodeResponse'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'association_response_code' => 'getAssociationResponseCode',
        'transaction_reference_information' => 'getTransactionReferenceInformation',
        'transaction_timestamp' => 'getTransactionTimestamp',
        'bank_id' => 'getBankId',
        'avs_security_code_response' => 'getAvsSecurityCodeResponse'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('association_response_code', $data ?? [], null);
        $this->setIfExists('transaction_reference_information', $data ?? [], null);
        $this->setIfExists('transaction_timestamp', $data ?? [], null);
        $this->setIfExists('bank_id', $data ?? [], null);
        $this->setIfExists('avs_security_code_response', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['association_response_code']) && (mb_strlen($this->container['association_response_code']) > 32)) {
            $invalidProperties[] = "invalid value for 'association_response_code', the character length must be smaller than or equal to 32.";
        }

        if (!is_null($this->container['transaction_reference_information']) && (mb_strlen($this->container['transaction_reference_information']) > 256)) {
            $invalidProperties[] = "invalid value for 'transaction_reference_information', the character length must be smaller than or equal to 256.";
        }

        if (!is_null($this->container['bank_id']) && (mb_strlen($this->container['bank_id']) > 100)) {
            $invalidProperties[] = "invalid value for 'bank_id', the character length must be smaller than or equal to 100.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets association_response_code
     *
     * @return string|null
     */
    public function getAssociationResponseCode()
    {
        return $this->container['association_response_code'];
    }

    /**
     * Sets association_response_code
     *
     * @param string|null $association_response_code Bank response code.
     *
     * @return self
     */
    public function setAssociationResponseCode($association_response_code)
    {
        if (is_null($association_response_code)) {
            throw new \InvalidArgumentException('non-nullable association_response_code cannot be null');
        }
        if ((mb_strlen($association_response_code) > 32)) {
            throw new \InvalidArgumentException('invalid length for $association_response_code when calling BankAssociationDetails., must be smaller than or equal to 32.');
        }

        $this->container['association_response_code'] = $association_response_code;

        return $this;
    }

    /**
     * Gets transaction_reference_information
     *
     * @return string|null
     */
    public function getTransactionReferenceInformation()
    {
        return $this->container['transaction_reference_information'];
    }

    /**
     * Sets transaction_reference_information
     *
     * @param string|null $transaction_reference_information Transaction reference information.
     *
     * @return self
     */
    public function setTransactionReferenceInformation($transaction_reference_information)
    {
        if (is_null($transaction_reference_information)) {
            throw new \InvalidArgumentException('non-nullable transaction_reference_information cannot be null');
        }
        if ((mb_strlen($transaction_reference_information) > 256)) {
            throw new \InvalidArgumentException('invalid length for $transaction_reference_information when calling BankAssociationDetails., must be smaller than or equal to 256.');
        }

        $this->container['transaction_reference_information'] = $transaction_reference_information;

        return $this;
    }

    /**
     * Gets transaction_timestamp
     *
     * @return \DateTime|null
     */
    public function getTransactionTimestamp()
    {
        return $this->container['transaction_timestamp'];
    }

    /**
     * Sets transaction_timestamp
     *
     * @param \DateTime|null $transaction_timestamp Timestamp in ISO 8601 format YYYY-MM-DDThh:mm:ssZ
     *
     * @return self
     */
    public function setTransactionTimestamp($transaction_timestamp)
    {
        if (is_null($transaction_timestamp)) {
            throw new \InvalidArgumentException('non-nullable transaction_timestamp cannot be null');
        }
        $this->container['transaction_timestamp'] = $transaction_timestamp;

        return $this;
    }

    /**
     * Gets bank_id
     *
     * @return string|null
     */
    public function getBankId()
    {
        return $this->container['bank_id'];
    }

    /**
     * Sets bank_id
     *
     * @param string|null $bank_id Identifier for the bank or lender.
     *
     * @return self
     */
    public function setBankId($bank_id)
    {
        if (is_null($bank_id)) {
            throw new \InvalidArgumentException('non-nullable bank_id cannot be null');
        }
        if ((mb_strlen($bank_id) > 100)) {
            throw new \InvalidArgumentException('invalid length for $bank_id when calling BankAssociationDetails., must be smaller than or equal to 100.');
        }

        $this->container['bank_id'] = $bank_id;

        return $this;
    }

    /**
     * Gets avs_security_code_response
     *
     * @return \Fiserv\Payments\Lib\CommerceHub\Model\AvsSecurityCodeResponse|null
     */
    public function getAvsSecurityCodeResponse()
    {
        return $this->container['avs_security_code_response'];
    }

    /**
     * Sets avs_security_code_response
     *
     * @param \Fiserv\Payments\Lib\CommerceHub\Model\AvsSecurityCodeResponse|null $avs_security_code_response avs_security_code_response
     *
     * @return self
     */
    public function setAvsSecurityCodeResponse($avs_security_code_response)
    {
        if (is_null($avs_security_code_response)) {
            throw new \InvalidArgumentException('non-nullable avs_security_code_response cannot be null');
        }
        $this->container['avs_security_code_response'] = $avs_security_code_response;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


