<?php
/**
 * AdditionalData
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Fiserv\Payments\Lib\CommerceHub
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Payments
 *
 * This API Specification is designed to provide technical guidance required to consume and integrate with our APIs for payment processing.
 *
 * The version of the OpenAPI document: v1.3.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.2.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Fiserv\Payments\Lib\CommerceHub\Model;

use \ArrayAccess;
use \Fiserv\Payments\Lib\CommerceHub\ObjectSerializer;

/**
 * AdditionalData Class Doc Comment
 *
 * @category Class
 * @description &lt;a href&#x3D;\&quot;../docs?path&#x3D;docs/Resources/Master-Data/Additional-Data.md\&quot;&gt;Additional data&lt;/a&gt; passed during a transaction request.
 * @package  Fiserv\Payments\Lib\CommerceHub
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class AdditionalData implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'AdditionalData';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'bai_flag' => 'string',
        'ecom_url' => 'string',
        'requested_test_error_response_code' => 'string',
        'emv_parameter_download_indicator' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'bai_flag' => null,
        'ecom_url' => null,
        'requested_test_error_response_code' => null,
        'emv_parameter_download_indicator' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'bai_flag' => false,
		'ecom_url' => false,
		'requested_test_error_response_code' => false,
		'emv_parameter_download_indicator' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'bai_flag' => 'baiFlag',
        'ecom_url' => 'ecomURL',
        'requested_test_error_response_code' => 'requestedTestErrorResponseCode',
        'emv_parameter_download_indicator' => 'emvParameterDownloadIndicator'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'bai_flag' => 'setBaiFlag',
        'ecom_url' => 'setEcomUrl',
        'requested_test_error_response_code' => 'setRequestedTestErrorResponseCode',
        'emv_parameter_download_indicator' => 'setEmvParameterDownloadIndicator'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'bai_flag' => 'getBaiFlag',
        'ecom_url' => 'getEcomUrl',
        'requested_test_error_response_code' => 'getRequestedTestErrorResponseCode',
        'emv_parameter_download_indicator' => 'getEmvParameterDownloadIndicator'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('bai_flag', $data ?? [], null);
        $this->setIfExists('ecom_url', $data ?? [], null);
        $this->setIfExists('requested_test_error_response_code', $data ?? [], null);
        $this->setIfExists('emv_parameter_download_indicator', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['bai_flag']) && (mb_strlen($this->container['bai_flag']) > 31)) {
            $invalidProperties[] = "invalid value for 'bai_flag', the character length must be smaller than or equal to 31.";
        }

        if (!is_null($this->container['ecom_url']) && (mb_strlen($this->container['ecom_url']) > 512)) {
            $invalidProperties[] = "invalid value for 'ecom_url', the character length must be smaller than or equal to 512.";
        }

        if (!is_null($this->container['requested_test_error_response_code']) && (mb_strlen($this->container['requested_test_error_response_code']) > 23)) {
            $invalidProperties[] = "invalid value for 'requested_test_error_response_code', the character length must be smaller than or equal to 23.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets bai_flag
     *
     * @return string|null
     */
    public function getBaiFlag()
    {
        return $this->container['bai_flag'];
    }

    /**
     * Sets bai_flag
     *
     * @param string|null $bai_flag Business Application Identifier. This identifies the intended use of a push payment. It determines the data carried in the message, the limits and economics that may apply to the transaction, and may be used by the sending and/or receiving issuer to make an authorization decision.  Valid Values: * PERSON_TO_PERSON - Person to person * PERSON_TO_PERSON_BANK_INITIATED - Person to person bank initiated * DIGITAL_WALLET_PAN - Digital Wallet PAN * ACCOUNT_TO_ACCOUNT - Account to account * TOP_OFF - Top Off * ACCOUNT_VERIFICATION - Account Verification ($0.00 Transaction) * FUNDS_TRANSFER - Funds Transfer
     *
     * @return self
     */
    public function setBaiFlag($bai_flag)
    {
        if (!is_null($bai_flag) && (mb_strlen($bai_flag) > 31)) {
            throw new \InvalidArgumentException('invalid length for $bai_flag when calling AdditionalData., must be smaller than or equal to 31.');
        }


        if (is_null($bai_flag)) {
            throw new \InvalidArgumentException('non-nullable bai_flag cannot be null');
        }

        $this->container['bai_flag'] = $bai_flag;

        return $this;
    }

    /**
     * Gets ecom_url
     *
     * @return string|null
     */
    public function getEcomUrl()
    {
        return $this->container['ecom_url'];
    }

    /**
     * Sets ecom_url
     *
     * @param string|null $ecom_url This field contains the URL of the site performing the Ecommerce transaction.
     *
     * @return self
     */
    public function setEcomUrl($ecom_url)
    {
        if (!is_null($ecom_url) && (mb_strlen($ecom_url) > 512)) {
            throw new \InvalidArgumentException('invalid length for $ecom_url when calling AdditionalData., must be smaller than or equal to 512.');
        }


        if (is_null($ecom_url)) {
            throw new \InvalidArgumentException('non-nullable ecom_url cannot be null');
        }

        $this->container['ecom_url'] = $ecom_url;

        return $this;
    }

    /**
     * Gets requested_test_error_response_code
     *
     * @return string|null
     */
    public function getRequestedTestErrorResponseCode()
    {
        return $this->container['requested_test_error_response_code'];
    }

    /**
     * Sets requested_test_error_response_code
     *
     * @param string|null $requested_test_error_response_code Value used to test/replicate a transaction error.
     *
     * @return self
     */
    public function setRequestedTestErrorResponseCode($requested_test_error_response_code)
    {
        if (!is_null($requested_test_error_response_code) && (mb_strlen($requested_test_error_response_code) > 23)) {
            throw new \InvalidArgumentException('invalid length for $requested_test_error_response_code when calling AdditionalData., must be smaller than or equal to 23.');
        }


        if (is_null($requested_test_error_response_code)) {
            throw new \InvalidArgumentException('non-nullable requested_test_error_response_code cannot be null');
        }

        $this->container['requested_test_error_response_code'] = $requested_test_error_response_code;

        return $this;
    }

    /**
     * Gets emv_parameter_download_indicator
     *
     * @return string|null
     */
    public function getEmvParameterDownloadIndicator()
    {
        return $this->container['emv_parameter_download_indicator'];
    }

    /**
     * Sets emv_parameter_download_indicator
     *
     * @param string|null $emv_parameter_download_indicator Indicator if EMV Parameter has to be downloaded, sent as part of Auth/Sale Response.
     *
     * @return self
     */
    public function setEmvParameterDownloadIndicator($emv_parameter_download_indicator)
    {

        if (is_null($emv_parameter_download_indicator)) {
            throw new \InvalidArgumentException('non-nullable emv_parameter_download_indicator cannot be null');
        }

        $this->container['emv_parameter_download_indicator'] = $emv_parameter_download_indicator;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


