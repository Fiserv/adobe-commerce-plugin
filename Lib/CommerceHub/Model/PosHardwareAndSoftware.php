<?php
/**
 * PosHardwareAndSoftware
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Fiserv\Payments\Lib\CommerceHub
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Payments
 *
 * This API Specification is designed to provide technical guidance required to consume and integrate with our APIs for payment processing.
 *
 * The version of the OpenAPI document: v1.3.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.2.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Fiserv\Payments\Lib\CommerceHub\Model;

use \ArrayAccess;
use \Fiserv\Payments\Lib\CommerceHub\ObjectSerializer;

/**
 * PosHardwareAndSoftware Class Doc Comment
 *
 * @category Class
 * @description Terminal hardware and software information.
 * @package  Fiserv\Payments\Lib\CommerceHub
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class PosHardwareAndSoftware implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'PosHardwareAndSoftware';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'hardware_vendor_identifier' => 'string',
        'software_identifier' => 'string',
        'hardware_serial_number' => 'string',
        'software_application_name' => 'string',
        'software_release_date' => '\DateTime',
        'software_version_number' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'hardware_vendor_identifier' => null,
        'software_identifier' => null,
        'hardware_serial_number' => null,
        'software_application_name' => null,
        'software_release_date' => 'date',
        'software_version_number' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'hardware_vendor_identifier' => false,
		'software_identifier' => false,
		'hardware_serial_number' => false,
		'software_application_name' => false,
		'software_release_date' => false,
		'software_version_number' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'hardware_vendor_identifier' => 'hardwareVendorIdentifier',
        'software_identifier' => 'softwareIdentifier',
        'hardware_serial_number' => 'hardwareSerialNumber',
        'software_application_name' => 'softwareApplicationName',
        'software_release_date' => 'softwareReleaseDate',
        'software_version_number' => 'softwareVersionNumber'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'hardware_vendor_identifier' => 'setHardwareVendorIdentifier',
        'software_identifier' => 'setSoftwareIdentifier',
        'hardware_serial_number' => 'setHardwareSerialNumber',
        'software_application_name' => 'setSoftwareApplicationName',
        'software_release_date' => 'setSoftwareReleaseDate',
        'software_version_number' => 'setSoftwareVersionNumber'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'hardware_vendor_identifier' => 'getHardwareVendorIdentifier',
        'software_identifier' => 'getSoftwareIdentifier',
        'hardware_serial_number' => 'getHardwareSerialNumber',
        'software_application_name' => 'getSoftwareApplicationName',
        'software_release_date' => 'getSoftwareReleaseDate',
        'software_version_number' => 'getSoftwareVersionNumber'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('hardware_vendor_identifier', $data ?? [], null);
        $this->setIfExists('software_identifier', $data ?? [], null);
        $this->setIfExists('hardware_serial_number', $data ?? [], null);
        $this->setIfExists('software_application_name', $data ?? [], null);
        $this->setIfExists('software_release_date', $data ?? [], null);
        $this->setIfExists('software_version_number', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets hardware_vendor_identifier
     *
     * @return string|null
     */
    public function getHardwareVendorIdentifier()
    {
        return $this->container['hardware_vendor_identifier'];
    }

    /**
     * Sets hardware_vendor_identifier
     *
     * @param string|null $hardware_vendor_identifier Hardware vendor identifier assigned by Chase merchant services at time of certification, represented in ASCII HEX.
     *
     * @return self
     */
    public function setHardwareVendorIdentifier($hardware_vendor_identifier)
    {

        if (is_null($hardware_vendor_identifier)) {
            throw new \InvalidArgumentException('non-nullable hardware_vendor_identifier cannot be null');
        }

        $this->container['hardware_vendor_identifier'] = $hardware_vendor_identifier;

        return $this;
    }

    /**
     * Gets software_identifier
     *
     * @return string|null
     */
    public function getSoftwareIdentifier()
    {
        return $this->container['software_identifier'];
    }

    /**
     * Sets software_identifier
     *
     * @param string|null $software_identifier Software Identifier assigned by Chase merchant services at time of certification, represented in ASCII HEX.
     *
     * @return self
     */
    public function setSoftwareIdentifier($software_identifier)
    {

        if (is_null($software_identifier)) {
            throw new \InvalidArgumentException('non-nullable software_identifier cannot be null');
        }

        $this->container['software_identifier'] = $software_identifier;

        return $this;
    }

    /**
     * Gets hardware_serial_number
     *
     * @return string|null
     */
    public function getHardwareSerialNumber()
    {
        return $this->container['hardware_serial_number'];
    }

    /**
     * Sets hardware_serial_number
     *
     * @param string|null $hardware_serial_number Serial number of hardware device. The hardware serial # can be left-justified, space-filled.
     *
     * @return self
     */
    public function setHardwareSerialNumber($hardware_serial_number)
    {

        if (is_null($hardware_serial_number)) {
            throw new \InvalidArgumentException('non-nullable hardware_serial_number cannot be null');
        }

        $this->container['hardware_serial_number'] = $hardware_serial_number;

        return $this;
    }

    /**
     * Gets software_application_name
     *
     * @return string|null
     */
    public function getSoftwareApplicationName()
    {
        return $this->container['software_application_name'];
    }

    /**
     * Sets software_application_name
     *
     * @param string|null $software_application_name Name of software application.
     *
     * @return self
     */
    public function setSoftwareApplicationName($software_application_name)
    {

        if (is_null($software_application_name)) {
            throw new \InvalidArgumentException('non-nullable software_application_name cannot be null');
        }

        $this->container['software_application_name'] = $software_application_name;

        return $this;
    }

    /**
     * Gets software_release_date
     *
     * @return \DateTime|null
     */
    public function getSoftwareReleaseDate()
    {
        return $this->container['software_release_date'];
    }

    /**
     * Sets software_release_date
     *
     * @param \DateTime|null $software_release_date Date software was released, in YYYY-MM-DD format.
     *
     * @return self
     */
    public function setSoftwareReleaseDate($software_release_date)
    {

        if (is_null($software_release_date)) {
            throw new \InvalidArgumentException('non-nullable software_release_date cannot be null');
        }

        $this->container['software_release_date'] = $software_release_date;

        return $this;
    }

    /**
     * Gets software_version_number
     *
     * @return string|null
     */
    public function getSoftwareVersionNumber()
    {
        return $this->container['software_version_number'];
    }

    /**
     * Sets software_version_number
     *
     * @param string|null $software_version_number EPROM or version information related to the terminal software.
     *
     * @return self
     */
    public function setSoftwareVersionNumber($software_version_number)
    {

        if (is_null($software_version_number)) {
            throw new \InvalidArgumentException('non-nullable software_version_number cannot be null');
        }

        $this->container['software_version_number'] = $software_version_number;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


