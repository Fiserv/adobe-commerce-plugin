<?php
/**
 * Payment3DS
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Fiserv\Payments\Lib\CommerceHub
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Payments
 *
 * This API Specification is designed to provide technical guidance required to consume and integrate with our APIs for payment processing.
 *
 * The version of the OpenAPI document: v1.3.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.2.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Fiserv\Payments\Lib\CommerceHub\Model;
use \Fiserv\Payments\Lib\CommerceHub\ObjectSerializer;

/**
 * Payment3DS Class Doc Comment
 *
 * @category Class
 * @package  Fiserv\Payments\Lib\CommerceHub
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class Payment3DS extends Source
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Payment3DS';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'card' => '\Fiserv\Payments\Lib\CommerceHub\Model\Card',
        'merchant_identifier' => 'string',
        'version' => 'string',
        'cavv' => 'string',
        'xid' => 'string',
        'verification_response' => 'string',
        'authentication_attempt_result' => 'string',
        'channel' => 'string',
        'authentication_response' => 'string',
        'directory_server_transaction_id' => 'string',
        'message_category' => 'string',
        'tavv' => 'string',
        'challenge_status' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'card' => null,
        'merchant_identifier' => null,
        'version' => null,
        'cavv' => null,
        'xid' => null,
        'verification_response' => null,
        'authentication_attempt_result' => null,
        'channel' => null,
        'authentication_response' => null,
        'directory_server_transaction_id' => null,
        'message_category' => null,
        'tavv' => null,
        'challenge_status' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'card' => false,
		'merchant_identifier' => false,
		'version' => false,
		'cavv' => false,
		'xid' => false,
		'verification_response' => false,
		'authentication_attempt_result' => false,
		'channel' => false,
		'authentication_response' => false,
		'directory_server_transaction_id' => false,
		'message_category' => false,
		'tavv' => false,
		'challenge_status' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes + parent::openAPITypes();
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats + parent::openAPIFormats();
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables + parent::openAPINullables();
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'card' => 'card',
        'merchant_identifier' => 'merchantIdentifier',
        'version' => 'version',
        'cavv' => 'cavv',
        'xid' => 'xid',
        'verification_response' => 'verificationResponse',
        'authentication_attempt_result' => 'authenticationAttemptResult',
        'channel' => 'channel',
        'authentication_response' => 'authenticationResponse',
        'directory_server_transaction_id' => 'directoryServerTransactionId',
        'message_category' => 'messageCategory',
        'tavv' => 'tavv',
        'challenge_status' => 'challengeStatus'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'card' => 'setCard',
        'merchant_identifier' => 'setMerchantIdentifier',
        'version' => 'setVersion',
        'cavv' => 'setCavv',
        'xid' => 'setXid',
        'verification_response' => 'setVerificationResponse',
        'authentication_attempt_result' => 'setAuthenticationAttemptResult',
        'channel' => 'setChannel',
        'authentication_response' => 'setAuthenticationResponse',
        'directory_server_transaction_id' => 'setDirectoryServerTransactionId',
        'message_category' => 'setMessageCategory',
        'tavv' => 'setTavv',
        'challenge_status' => 'setChallengeStatus'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'card' => 'getCard',
        'merchant_identifier' => 'getMerchantIdentifier',
        'version' => 'getVersion',
        'cavv' => 'getCavv',
        'xid' => 'getXid',
        'verification_response' => 'getVerificationResponse',
        'authentication_attempt_result' => 'getAuthenticationAttemptResult',
        'channel' => 'getChannel',
        'authentication_response' => 'getAuthenticationResponse',
        'directory_server_transaction_id' => 'getDirectoryServerTransactionId',
        'message_category' => 'getMessageCategory',
        'tavv' => 'getTavv',
        'challenge_status' => 'getChallengeStatus'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return parent::attributeMap() + self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return parent::setters() + self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return parent::getters() + self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }



    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        parent::__construct($data);

        $this->setIfExists('card', $data ?? [], null);
        $this->setIfExists('merchant_identifier', $data ?? [], null);
        $this->setIfExists('version', $data ?? [], null);
        $this->setIfExists('cavv', $data ?? [], null);
        $this->setIfExists('xid', $data ?? [], null);
        $this->setIfExists('verification_response', $data ?? [], null);
        $this->setIfExists('authentication_attempt_result', $data ?? [], null);
        $this->setIfExists('channel', $data ?? [], null);
        $this->setIfExists('authentication_response', $data ?? [], null);
        $this->setIfExists('directory_server_transaction_id', $data ?? [], null);
        $this->setIfExists('message_category', $data ?? [], null);
        $this->setIfExists('tavv', $data ?? [], null);
        $this->setIfExists('challenge_status', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = parent::listInvalidProperties();

        if (!is_null($this->container['merchant_identifier']) && (mb_strlen($this->container['merchant_identifier']) > 256)) {
            $invalidProperties[] = "invalid value for 'merchant_identifier', the character length must be smaller than or equal to 256.";
        }

        if (!is_null($this->container['version']) && (mb_strlen($this->container['version']) > 64)) {
            $invalidProperties[] = "invalid value for 'version', the character length must be smaller than or equal to 64.";
        }

        if (!is_null($this->container['cavv']) && (mb_strlen($this->container['cavv']) > 256)) {
            $invalidProperties[] = "invalid value for 'cavv', the character length must be smaller than or equal to 256.";
        }

        if (!is_null($this->container['xid']) && (mb_strlen($this->container['xid']) > 256)) {
            $invalidProperties[] = "invalid value for 'xid', the character length must be smaller than or equal to 256.";
        }

        if (!is_null($this->container['verification_response']) && (mb_strlen($this->container['verification_response']) > 256)) {
            $invalidProperties[] = "invalid value for 'verification_response', the character length must be smaller than or equal to 256.";
        }

        if (!is_null($this->container['authentication_attempt_result']) && (mb_strlen($this->container['authentication_attempt_result']) > 256)) {
            $invalidProperties[] = "invalid value for 'authentication_attempt_result', the character length must be smaller than or equal to 256.";
        }

        if (!is_null($this->container['channel']) && (mb_strlen($this->container['channel']) > 32)) {
            $invalidProperties[] = "invalid value for 'channel', the character length must be smaller than or equal to 32.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets card
     *
     * @return \Fiserv\Payments\Lib\CommerceHub\Model\Card|null
     */
    public function getCard()
    {
        return $this->container['card'];
    }

    /**
     * Sets card
     *
     * @param \Fiserv\Payments\Lib\CommerceHub\Model\Card|null $card card
     *
     * @return self
     */
    public function setCard($card)
    {

        if (is_null($card)) {
            throw new \InvalidArgumentException('non-nullable card cannot be null');
        }

        $this->container['card'] = $card;

        return $this;
    }

    /**
     * Gets merchant_identifier
     *
     * @return string|null
     */
    public function getMerchantIdentifier()
    {
        return $this->container['merchant_identifier'];
    }

    /**
     * Sets merchant_identifier
     *
     * @param string|null $merchant_identifier A unique ID used to identify the merchant. The merchant must use the value assigned by the acquirer.
     *
     * @return self
     */
    public function setMerchantIdentifier($merchant_identifier)
    {
        if (!is_null($merchant_identifier) && (mb_strlen($merchant_identifier) > 256)) {
            throw new \InvalidArgumentException('invalid length for $merchant_identifier when calling Payment3DS., must be smaller than or equal to 256.');
        }


        if (is_null($merchant_identifier)) {
            throw new \InvalidArgumentException('non-nullable merchant_identifier cannot be null');
        }

        $this->container['merchant_identifier'] = $merchant_identifier;

        return $this;
    }

    /**
     * Gets version
     *
     * @return string|null
     */
    public function getVersion()
    {
        return $this->container['version'];
    }

    /**
     * Sets version
     *
     * @param string|null $version Specific protocol version supported by 3DS.
     *
     * @return self
     */
    public function setVersion($version)
    {
        if (!is_null($version) && (mb_strlen($version) > 64)) {
            throw new \InvalidArgumentException('invalid length for $version when calling Payment3DS., must be smaller than or equal to 64.');
        }


        if (is_null($version)) {
            throw new \InvalidArgumentException('non-nullable version cannot be null');
        }

        $this->container['version'] = $version;

        return $this;
    }

    /**
     * Gets cavv
     *
     * @return string|null
     */
    public function getCavv()
    {
        return $this->container['cavv'];
    }

    /**
     * Sets cavv
     *
     * @param string|null $cavv The Cardholder Authentication Verification Value (CAVV) is a cryptographic value derived by the issuer during payment authentication that can provide evidence of the results of payment authentication during an online purchase.
     *
     * @return self
     */
    public function setCavv($cavv)
    {
        if (!is_null($cavv) && (mb_strlen($cavv) > 256)) {
            throw new \InvalidArgumentException('invalid length for $cavv when calling Payment3DS., must be smaller than or equal to 256.');
        }


        if (is_null($cavv)) {
            throw new \InvalidArgumentException('non-nullable cavv cannot be null');
        }

        $this->container['cavv'] = $cavv;

        return $this;
    }

    /**
     * Gets xid
     *
     * @return string|null
     */
    public function getXid()
    {
        return $this->container['xid'];
    }

    /**
     * Sets xid
     *
     * @param string|null $xid 3DSecure/Verified by Visa value returned by Cardinal Commerce.
     *
     * @return self
     */
    public function setXid($xid)
    {
        if (!is_null($xid) && (mb_strlen($xid) > 256)) {
            throw new \InvalidArgumentException('invalid length for $xid when calling Payment3DS., must be smaller than or equal to 256.');
        }


        if (is_null($xid)) {
            throw new \InvalidArgumentException('non-nullable xid cannot be null');
        }

        $this->container['xid'] = $xid;

        return $this;
    }

    /**
     * Gets verification_response
     *
     * @return string|null
     */
    public function getVerificationResponse()
    {
        return $this->container['verification_response'];
    }

    /**
     * Sets verification_response
     *
     * @param string|null $verification_response Verification response message.
     *
     * @return self
     */
    public function setVerificationResponse($verification_response)
    {
        if (!is_null($verification_response) && (mb_strlen($verification_response) > 256)) {
            throw new \InvalidArgumentException('invalid length for $verification_response when calling Payment3DS., must be smaller than or equal to 256.');
        }


        if (is_null($verification_response)) {
            throw new \InvalidArgumentException('non-nullable verification_response cannot be null');
        }

        $this->container['verification_response'] = $verification_response;

        return $this;
    }

    /**
     * Gets authentication_attempt_result
     *
     * @return string|null
     */
    public function getAuthenticationAttemptResult()
    {
        return $this->container['authentication_attempt_result'];
    }

    /**
     * Sets authentication_attempt_result
     *
     * @param string|null $authentication_attempt_result Result of authentication attempt from Payer Authentication Response (PaRes).
     *
     * @return self
     */
    public function setAuthenticationAttemptResult($authentication_attempt_result)
    {
        if (!is_null($authentication_attempt_result) && (mb_strlen($authentication_attempt_result) > 256)) {
            throw new \InvalidArgumentException('invalid length for $authentication_attempt_result when calling Payment3DS., must be smaller than or equal to 256.');
        }


        if (is_null($authentication_attempt_result)) {
            throw new \InvalidArgumentException('non-nullable authentication_attempt_result cannot be null');
        }

        $this->container['authentication_attempt_result'] = $authentication_attempt_result;

        return $this;
    }

    /**
     * Gets channel
     *
     * @return string|null
     */
    public function getChannel()
    {
        return $this->container['channel'];
    }

    /**
     * Sets channel
     *
     * @param string|null $channel Valid Values:  * MOBILE_APP * MOBILE_WEB * BROWSER_PC * KIOSK * CONSOLE * 3DS_REQUESTOR_INITIATED
     *
     * @return self
     */
    public function setChannel($channel)
    {
        if (!is_null($channel) && (mb_strlen($channel) > 32)) {
            throw new \InvalidArgumentException('invalid length for $channel when calling Payment3DS., must be smaller than or equal to 32.');
        }


        if (is_null($channel)) {
            throw new \InvalidArgumentException('non-nullable channel cannot be null');
        }

        $this->container['channel'] = $channel;

        return $this;
    }

    /**
     * Gets authentication_response
     *
     * @return string|null
     */
    public function getAuthenticationResponse()
    {
        return $this->container['authentication_response'];
    }

    /**
     * Sets authentication_response
     *
     * @param string|null $authentication_response The result of authentication attempt returned by the 3D Secure authentication process (PaRes).
     *
     * @return self
     */
    public function setAuthenticationResponse($authentication_response)
    {

        if (is_null($authentication_response)) {
            throw new \InvalidArgumentException('non-nullable authentication_response cannot be null');
        }

        $this->container['authentication_response'] = $authentication_response;

        return $this;
    }

    /**
     * Gets directory_server_transaction_id
     *
     * @return string|null
     */
    public function getDirectoryServerTransactionId()
    {
        return $this->container['directory_server_transaction_id'];
    }

    /**
     * Sets directory_server_transaction_id
     *
     * @param string|null $directory_server_transaction_id The response transaction UUID from the DS (directory server)
     *
     * @return self
     */
    public function setDirectoryServerTransactionId($directory_server_transaction_id)
    {

        if (is_null($directory_server_transaction_id)) {
            throw new \InvalidArgumentException('non-nullable directory_server_transaction_id cannot be null');
        }

        $this->container['directory_server_transaction_id'] = $directory_server_transaction_id;

        return $this;
    }

    /**
     * Gets message_category
     *
     * @return string|null
     */
    public function getMessageCategory()
    {
        return $this->container['message_category'];
    }

    /**
     * Sets message_category
     *
     * @param string|null $message_category Indicates the message category of 3d secure authentication version 2.X. 01 = Payment Authentication 02 = Non-Payment Authentication 80 = Mastercard Data Only
     *
     * @return self
     */
    public function setMessageCategory($message_category)
    {

        if (is_null($message_category)) {
            throw new \InvalidArgumentException('non-nullable message_category cannot be null');
        }

        $this->container['message_category'] = $message_category;

        return $this;
    }

    /**
     * Gets tavv
     *
     * @return string|null
     */
    public function getTavv()
    {
        return $this->container['tavv'];
    }

    /**
     * Sets tavv
     *
     * @param string|null $tavv Cryptographic value that is generated during the Visa transaction authentication process for a payment token transaction.
     *
     * @return self
     */
    public function setTavv($tavv)
    {

        if (is_null($tavv)) {
            throw new \InvalidArgumentException('non-nullable tavv cannot be null');
        }

        $this->container['tavv'] = $tavv;

        return $this;
    }

    /**
     * Gets challenge_status
     *
     * @return string|null
     */
    public function getChallengeStatus()
    {
        return $this->container['challenge_status'];
    }

    /**
     * Sets challenge_status
     *
     * @param string|null $challenge_status The transaction status as returned by the 3D Secure authentication process. (CRes)
     *
     * @return self
     */
    public function setChallengeStatus($challenge_status)
    {

        if (is_null($challenge_status)) {
            throw new \InvalidArgumentException('non-nullable challenge_status cannot be null');
        }

        $this->container['challenge_status'] = $challenge_status;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


