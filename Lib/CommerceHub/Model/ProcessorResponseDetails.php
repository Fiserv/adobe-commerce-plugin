<?php
/**
 * ProcessorResponseDetails
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Fiserv\Payments\Lib\CommerceHub
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Payments
 *
 * This API Specification is designed to provide technical guidance required to consume and integrate with our APIs for payment processing.
 *
 * The version of the OpenAPI document: v1.3.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.2.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Fiserv\Payments\Lib\CommerceHub\Model;

use \ArrayAccess;
use \Fiserv\Payments\Lib\CommerceHub\ObjectSerializer;

/**
 * ProcessorResponseDetails Class Doc Comment
 *
 * @category Class
 * @description Contains the &lt;a href&#x3D;\&quot;../docs?path&#x3D;docs/Resources/Master-Data/Processor-Response-Details.md\&quot;&gt;processor response&lt;/a&gt; details.
 * @package  Fiserv\Payments\Lib\CommerceHub
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ProcessorResponseDetails implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'ProcessorResponseDetails';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'approval_status' => 'string',
        'approval_code' => 'string',
        'authentication_response_code' => 'string',
        'reference_number' => 'string',
        'scheme_transaction_id' => 'string',
        'network_original_amount' => 'float',
        'fee_program_indicator' => 'string',
        'processor' => 'string',
        'host' => 'string',
        'network_routed' => 'string',
        'par' => 'string',
        'network_international_id' => 'string',
        'response_code' => 'string',
        'response_message' => 'string',
        'host_response_code' => 'string',
        'host_response_message' => 'string',
        'local_timestamp' => '\DateTime',
        'debit_receipt_number' => 'string',
        'purchase_order_required_indicator' => 'string',
        'tax_exempt_indicator' => 'string',
        'purchase_apr_type' => 'string',
        'arqc_response_code' => 'string',
        'response_indicators' => '\Fiserv\Payments\Lib\CommerceHub\Model\ResponseIndicator',
        'bank_association_details' => '\Fiserv\Payments\Lib\CommerceHub\Model\BankAssociationDetails',
        'additional_info' => '\Fiserv\Payments\Lib\CommerceHub\Model\NameValuePair[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'approval_status' => null,
        'approval_code' => null,
        'authentication_response_code' => null,
        'reference_number' => null,
        'scheme_transaction_id' => null,
        'network_original_amount' => null,
        'fee_program_indicator' => null,
        'processor' => null,
        'host' => null,
        'network_routed' => null,
        'par' => null,
        'network_international_id' => null,
        'response_code' => null,
        'response_message' => null,
        'host_response_code' => null,
        'host_response_message' => null,
        'local_timestamp' => 'date-time',
        'debit_receipt_number' => null,
        'purchase_order_required_indicator' => null,
        'tax_exempt_indicator' => null,
        'purchase_apr_type' => null,
        'arqc_response_code' => null,
        'response_indicators' => null,
        'bank_association_details' => null,
        'additional_info' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'approval_status' => false,
		'approval_code' => false,
		'authentication_response_code' => false,
		'reference_number' => false,
		'scheme_transaction_id' => false,
		'network_original_amount' => false,
		'fee_program_indicator' => false,
		'processor' => false,
		'host' => false,
		'network_routed' => false,
		'par' => false,
		'network_international_id' => false,
		'response_code' => false,
		'response_message' => false,
		'host_response_code' => false,
		'host_response_message' => false,
		'local_timestamp' => false,
		'debit_receipt_number' => false,
		'purchase_order_required_indicator' => false,
		'tax_exempt_indicator' => false,
		'purchase_apr_type' => false,
		'arqc_response_code' => false,
		'response_indicators' => false,
		'bank_association_details' => false,
		'additional_info' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'approval_status' => 'approvalStatus',
        'approval_code' => 'approvalCode',
        'authentication_response_code' => 'authenticationResponseCode',
        'reference_number' => 'referenceNumber',
        'scheme_transaction_id' => 'schemeTransactionId',
        'network_original_amount' => 'networkOriginalAmount',
        'fee_program_indicator' => 'feeProgramIndicator',
        'processor' => 'processor',
        'host' => 'host',
        'network_routed' => 'networkRouted',
        'par' => 'PAR',
        'network_international_id' => 'networkInternationalId',
        'response_code' => 'responseCode',
        'response_message' => 'responseMessage',
        'host_response_code' => 'hostResponseCode',
        'host_response_message' => 'hostResponseMessage',
        'local_timestamp' => 'localTimestamp',
        'debit_receipt_number' => 'debitReceiptNumber',
        'purchase_order_required_indicator' => 'purchaseOrderRequiredIndicator',
        'tax_exempt_indicator' => 'taxExemptIndicator',
        'purchase_apr_type' => 'purchaseAprType',
        'arqc_response_code' => 'arqcResponseCode',
        'response_indicators' => 'responseIndicators',
        'bank_association_details' => 'bankAssociationDetails',
        'additional_info' => 'additionalInfo'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'approval_status' => 'setApprovalStatus',
        'approval_code' => 'setApprovalCode',
        'authentication_response_code' => 'setAuthenticationResponseCode',
        'reference_number' => 'setReferenceNumber',
        'scheme_transaction_id' => 'setSchemeTransactionId',
        'network_original_amount' => 'setNetworkOriginalAmount',
        'fee_program_indicator' => 'setFeeProgramIndicator',
        'processor' => 'setProcessor',
        'host' => 'setHost',
        'network_routed' => 'setNetworkRouted',
        'par' => 'setPar',
        'network_international_id' => 'setNetworkInternationalId',
        'response_code' => 'setResponseCode',
        'response_message' => 'setResponseMessage',
        'host_response_code' => 'setHostResponseCode',
        'host_response_message' => 'setHostResponseMessage',
        'local_timestamp' => 'setLocalTimestamp',
        'debit_receipt_number' => 'setDebitReceiptNumber',
        'purchase_order_required_indicator' => 'setPurchaseOrderRequiredIndicator',
        'tax_exempt_indicator' => 'setTaxExemptIndicator',
        'purchase_apr_type' => 'setPurchaseAprType',
        'arqc_response_code' => 'setArqcResponseCode',
        'response_indicators' => 'setResponseIndicators',
        'bank_association_details' => 'setBankAssociationDetails',
        'additional_info' => 'setAdditionalInfo'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'approval_status' => 'getApprovalStatus',
        'approval_code' => 'getApprovalCode',
        'authentication_response_code' => 'getAuthenticationResponseCode',
        'reference_number' => 'getReferenceNumber',
        'scheme_transaction_id' => 'getSchemeTransactionId',
        'network_original_amount' => 'getNetworkOriginalAmount',
        'fee_program_indicator' => 'getFeeProgramIndicator',
        'processor' => 'getProcessor',
        'host' => 'getHost',
        'network_routed' => 'getNetworkRouted',
        'par' => 'getPar',
        'network_international_id' => 'getNetworkInternationalId',
        'response_code' => 'getResponseCode',
        'response_message' => 'getResponseMessage',
        'host_response_code' => 'getHostResponseCode',
        'host_response_message' => 'getHostResponseMessage',
        'local_timestamp' => 'getLocalTimestamp',
        'debit_receipt_number' => 'getDebitReceiptNumber',
        'purchase_order_required_indicator' => 'getPurchaseOrderRequiredIndicator',
        'tax_exempt_indicator' => 'getTaxExemptIndicator',
        'purchase_apr_type' => 'getPurchaseAprType',
        'arqc_response_code' => 'getArqcResponseCode',
        'response_indicators' => 'getResponseIndicators',
        'bank_association_details' => 'getBankAssociationDetails',
        'additional_info' => 'getAdditionalInfo'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const TAX_EXEMPT_INDICATOR_TAX_EXEMPT = 'TAX_EXEMPT';
    public const TAX_EXEMPT_INDICATOR_NOT_EXEMPT = 'NOT_EXEMPT';
    public const PURCHASE_APR_TYPE_VARIABLE = 'VARIABLE';
    public const PURCHASE_APR_TYPE_FIXED = 'FIXED';
    public const ARQC_RESPONSE_CODE_VALIDATION_FAILED = 'VALIDATION_FAILED';
    public const ARQC_RESPONSE_CODE_VALIDATION_UNAVAILABLE = 'VALIDATION_UNAVAILABLE';
    public const ARQC_RESPONSE_CODE_UNAVAILABLE = 'UNAVAILABLE';
    public const ARQC_RESPONSE_CODE_VALIDATION_BYPASSED = 'VALIDATION_BYPASSED';
    public const ARQC_RESPONSE_CODE_VALIDATION_PASSED = 'VALIDATION_PASSED';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTaxExemptIndicatorAllowableValues()
    {
        return [
            self::TAX_EXEMPT_INDICATOR_TAX_EXEMPT,
            self::TAX_EXEMPT_INDICATOR_NOT_EXEMPT,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getPurchaseAprTypeAllowableValues()
    {
        return [
            self::PURCHASE_APR_TYPE_VARIABLE,
            self::PURCHASE_APR_TYPE_FIXED,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getArqcResponseCodeAllowableValues()
    {
        return [
            self::ARQC_RESPONSE_CODE_VALIDATION_FAILED,
            self::ARQC_RESPONSE_CODE_VALIDATION_UNAVAILABLE,
            self::ARQC_RESPONSE_CODE_UNAVAILABLE,
            self::ARQC_RESPONSE_CODE_VALIDATION_BYPASSED,
            self::ARQC_RESPONSE_CODE_VALIDATION_PASSED,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('approval_status', $data ?? [], null);
        $this->setIfExists('approval_code', $data ?? [], null);
        $this->setIfExists('authentication_response_code', $data ?? [], null);
        $this->setIfExists('reference_number', $data ?? [], null);
        $this->setIfExists('scheme_transaction_id', $data ?? [], null);
        $this->setIfExists('network_original_amount', $data ?? [], null);
        $this->setIfExists('fee_program_indicator', $data ?? [], null);
        $this->setIfExists('processor', $data ?? [], null);
        $this->setIfExists('host', $data ?? [], null);
        $this->setIfExists('network_routed', $data ?? [], null);
        $this->setIfExists('par', $data ?? [], null);
        $this->setIfExists('network_international_id', $data ?? [], null);
        $this->setIfExists('response_code', $data ?? [], null);
        $this->setIfExists('response_message', $data ?? [], null);
        $this->setIfExists('host_response_code', $data ?? [], null);
        $this->setIfExists('host_response_message', $data ?? [], null);
        $this->setIfExists('local_timestamp', $data ?? [], null);
        $this->setIfExists('debit_receipt_number', $data ?? [], null);
        $this->setIfExists('purchase_order_required_indicator', $data ?? [], null);
        $this->setIfExists('tax_exempt_indicator', $data ?? [], null);
        $this->setIfExists('purchase_apr_type', $data ?? [], null);
        $this->setIfExists('arqc_response_code', $data ?? [], null);
        $this->setIfExists('response_indicators', $data ?? [], null);
        $this->setIfExists('bank_association_details', $data ?? [], null);
        $this->setIfExists('additional_info', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['network_original_amount']) && ($this->container['network_original_amount'] > 1.0E+18)) {
            $invalidProperties[] = "invalid value for 'network_original_amount', must be smaller than or equal to 1.0E+18.";
        }

        if (!is_null($this->container['processor']) && (mb_strlen($this->container['processor']) > 256)) {
            $invalidProperties[] = "invalid value for 'processor', the character length must be smaller than or equal to 256.";
        }

        if (!is_null($this->container['host']) && (mb_strlen($this->container['host']) > 256)) {
            $invalidProperties[] = "invalid value for 'host', the character length must be smaller than or equal to 256.";
        }

        if (!is_null($this->container['network_routed']) && (mb_strlen($this->container['network_routed']) > 10)) {
            $invalidProperties[] = "invalid value for 'network_routed', the character length must be smaller than or equal to 10.";
        }

        if (!is_null($this->container['par']) && (mb_strlen($this->container['par']) > 29)) {
            $invalidProperties[] = "invalid value for 'par', the character length must be smaller than or equal to 29.";
        }

        if (!is_null($this->container['network_international_id']) && (mb_strlen($this->container['network_international_id']) > 16)) {
            $invalidProperties[] = "invalid value for 'network_international_id', the character length must be smaller than or equal to 16.";
        }

        if (!is_null($this->container['debit_receipt_number']) && (mb_strlen($this->container['debit_receipt_number']) > 6)) {
            $invalidProperties[] = "invalid value for 'debit_receipt_number', the character length must be smaller than or equal to 6.";
        }

        if (!is_null($this->container['purchase_order_required_indicator']) && (mb_strlen($this->container['purchase_order_required_indicator']) > 15)) {
            $invalidProperties[] = "invalid value for 'purchase_order_required_indicator', the character length must be smaller than or equal to 15.";
        }

        $allowedValues = $this->getTaxExemptIndicatorAllowableValues();
        if (!is_null($this->container['tax_exempt_indicator']) && !in_array($this->container['tax_exempt_indicator'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'tax_exempt_indicator', must be one of '%s'",
                $this->container['tax_exempt_indicator'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getPurchaseAprTypeAllowableValues();
        if (!is_null($this->container['purchase_apr_type']) && !in_array($this->container['purchase_apr_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'purchase_apr_type', must be one of '%s'",
                $this->container['purchase_apr_type'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getArqcResponseCodeAllowableValues();
        if (!is_null($this->container['arqc_response_code']) && !in_array($this->container['arqc_response_code'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'arqc_response_code', must be one of '%s'",
                $this->container['arqc_response_code'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets approval_status
     *
     * @return string|null
     */
    public function getApprovalStatus()
    {
        return $this->container['approval_status'];
    }

    /**
     * Sets approval_status
     *
     * @param string|null $approval_status Final status of the transaction.
     *
     * @return self
     */
    public function setApprovalStatus($approval_status)
    {

        if (is_null($approval_status)) {
            throw new \InvalidArgumentException('non-nullable approval_status cannot be null');
        }

        $this->container['approval_status'] = $approval_status;

        return $this;
    }

    /**
     * Gets approval_code
     *
     * @return string|null
     */
    public function getApprovalCode()
    {
        return $this->container['approval_code'];
    }

    /**
     * Sets approval_code
     *
     * @param string|null $approval_code Approval code from the processor.
     *
     * @return self
     */
    public function setApprovalCode($approval_code)
    {

        if (is_null($approval_code)) {
            throw new \InvalidArgumentException('non-nullable approval_code cannot be null');
        }

        $this->container['approval_code'] = $approval_code;

        return $this;
    }

    /**
     * Gets authentication_response_code
     *
     * @return string|null
     */
    public function getAuthenticationResponseCode()
    {
        return $this->container['authentication_response_code'];
    }

    /**
     * Sets authentication_response_code
     *
     * @param string|null $authentication_response_code Response code from authentication.
     *
     * @return self
     */
    public function setAuthenticationResponseCode($authentication_response_code)
    {

        if (is_null($authentication_response_code)) {
            throw new \InvalidArgumentException('non-nullable authentication_response_code cannot be null');
        }

        $this->container['authentication_response_code'] = $authentication_response_code;

        return $this;
    }

    /**
     * Gets reference_number
     *
     * @return string|null
     */
    public function getReferenceNumber()
    {
        return $this->container['reference_number'];
    }

    /**
     * Sets reference_number
     *
     * @param string|null $reference_number Transaction reference number.
     *
     * @return self
     */
    public function setReferenceNumber($reference_number)
    {

        if (is_null($reference_number)) {
            throw new \InvalidArgumentException('non-nullable reference_number cannot be null');
        }

        $this->container['reference_number'] = $reference_number;

        return $this;
    }

    /**
     * Gets scheme_transaction_id
     *
     * @return string|null
     */
    public function getSchemeTransactionId()
    {
        return $this->container['scheme_transaction_id'];
    }

    /**
     * Sets scheme_transaction_id
     *
     * @param string|null $scheme_transaction_id Brand transaction ID.
     *
     * @return self
     */
    public function setSchemeTransactionId($scheme_transaction_id)
    {

        if (is_null($scheme_transaction_id)) {
            throw new \InvalidArgumentException('non-nullable scheme_transaction_id cannot be null');
        }

        $this->container['scheme_transaction_id'] = $scheme_transaction_id;

        return $this;
    }

    /**
     * Gets network_original_amount
     *
     * @return float|null
     */
    public function getNetworkOriginalAmount()
    {
        return $this->container['network_original_amount'];
    }

    /**
     * Sets network_original_amount
     *
     * @param float|null $network_original_amount Network original amount
     *
     * @return self
     */
    public function setNetworkOriginalAmount($network_original_amount)
    {

        if (!is_null($network_original_amount) && ($network_original_amount > 1.0E+18)) {
            throw new \InvalidArgumentException('invalid value for $network_original_amount when calling ProcessorResponseDetails., must be smaller than or equal to 1.0E+18.');
        }


        if (is_null($network_original_amount)) {
            throw new \InvalidArgumentException('non-nullable network_original_amount cannot be null');
        }

        $this->container['network_original_amount'] = $network_original_amount;

        return $this;
    }

    /**
     * Gets fee_program_indicator
     *
     * @return string|null
     */
    public function getFeeProgramIndicator()
    {
        return $this->container['fee_program_indicator'];
    }

    /**
     * Sets fee_program_indicator
     *
     * @param string|null $fee_program_indicator Contains the Fee Program Indicator (FPI) code that may be returned on Debit or PLDebit transaction response.
     *
     * @return self
     */
    public function setFeeProgramIndicator($fee_program_indicator)
    {

        if (is_null($fee_program_indicator)) {
            throw new \InvalidArgumentException('non-nullable fee_program_indicator cannot be null');
        }

        $this->container['fee_program_indicator'] = $fee_program_indicator;

        return $this;
    }

    /**
     * Gets processor
     *
     * @return string|null
     */
    public function getProcessor()
    {
        return $this->container['processor'];
    }

    /**
     * Sets processor
     *
     * @param string|null $processor Card processor.
     *
     * @return self
     */
    public function setProcessor($processor)
    {
        if (!is_null($processor) && (mb_strlen($processor) > 256)) {
            throw new \InvalidArgumentException('invalid length for $processor when calling ProcessorResponseDetails., must be smaller than or equal to 256.');
        }


        if (is_null($processor)) {
            throw new \InvalidArgumentException('non-nullable processor cannot be null');
        }

        $this->container['processor'] = $processor;

        return $this;
    }

    /**
     * Gets host
     *
     * @return string|null
     */
    public function getHost()
    {
        return $this->container['host'];
    }

    /**
     * Sets host
     *
     * @param string|null $host Processing endpoint or issuer.
     *
     * @return self
     */
    public function setHost($host)
    {
        if (!is_null($host) && (mb_strlen($host) > 256)) {
            throw new \InvalidArgumentException('invalid length for $host when calling ProcessorResponseDetails., must be smaller than or equal to 256.');
        }


        if (is_null($host)) {
            throw new \InvalidArgumentException('non-nullable host cannot be null');
        }

        $this->container['host'] = $host;

        return $this;
    }

    /**
     * Gets network_routed
     *
     * @return string|null
     */
    public function getNetworkRouted()
    {
        return $this->container['network_routed'];
    }

    /**
     * Sets network_routed
     *
     * @param string|null $network_routed Network label that shows the network where the transaction was routed for authorization (e.g. NYCE, PULSE, STAR, Visa, Mastercard, etc.).
     *
     * @return self
     */
    public function setNetworkRouted($network_routed)
    {
        if (!is_null($network_routed) && (mb_strlen($network_routed) > 10)) {
            throw new \InvalidArgumentException('invalid length for $network_routed when calling ProcessorResponseDetails., must be smaller than or equal to 10.');
        }


        if (is_null($network_routed)) {
            throw new \InvalidArgumentException('non-nullable network_routed cannot be null');
        }

        $this->container['network_routed'] = $network_routed;

        return $this;
    }

    /**
     * Gets par
     *
     * @return string|null
     */
    public function getPar()
    {
        return $this->container['par'];
    }

    /**
     * Sets par
     *
     * @param string|null $par A Payment Account Reference (PAR) is a unique identifier associated with a specific cardholder PAN. This identification number can be used in place of sensitive consumer identification fields, and transmitted across the payments ecosystem to facilitate consumer identification.
     *
     * @return self
     */
    public function setPar($par)
    {
        if (!is_null($par) && (mb_strlen($par) > 29)) {
            throw new \InvalidArgumentException('invalid length for $par when calling ProcessorResponseDetails., must be smaller than or equal to 29.');
        }


        if (is_null($par)) {
            throw new \InvalidArgumentException('non-nullable par cannot be null');
        }

        $this->container['par'] = $par;

        return $this;
    }

    /**
     * Gets network_international_id
     *
     * @return string|null
     */
    public function getNetworkInternationalId()
    {
        return $this->container['network_international_id'];
    }

    /**
     * Sets network_international_id
     *
     * @param string|null $network_international_id This field identifies the acquiring host.  Valid Values: * FISERV — Fiserv NII excluding Canadian Debit and Credit * CANADA — Canadian processing (Debit and Credit) * LAC — Latin America/Caribbean (LAC) solutions * MEXICO — Mexico (PROSA) solution
     *
     * @return self
     */
    public function setNetworkInternationalId($network_international_id)
    {
        if (!is_null($network_international_id) && (mb_strlen($network_international_id) > 16)) {
            throw new \InvalidArgumentException('invalid length for $network_international_id when calling ProcessorResponseDetails., must be smaller than or equal to 16.');
        }


        if (is_null($network_international_id)) {
            throw new \InvalidArgumentException('non-nullable network_international_id cannot be null');
        }

        $this->container['network_international_id'] = $network_international_id;

        return $this;
    }

    /**
     * Gets response_code
     *
     * @return string|null
     */
    public function getResponseCode()
    {
        return $this->container['response_code'];
    }

    /**
     * Sets response_code
     *
     * @param string|null $response_code Normalized transaction response code from the gateway (Commerce Hub Response).
     *
     * @return self
     */
    public function setResponseCode($response_code)
    {

        if (is_null($response_code)) {
            throw new \InvalidArgumentException('non-nullable response_code cannot be null');
        }

        $this->container['response_code'] = $response_code;

        return $this;
    }

    /**
     * Gets response_message
     *
     * @return string|null
     */
    public function getResponseMessage()
    {
        return $this->container['response_message'];
    }

    /**
     * Sets response_message
     *
     * @param string|null $response_message Normalized transaction message from the gateway (Commerce Hub Response).
     *
     * @return self
     */
    public function setResponseMessage($response_message)
    {

        if (is_null($response_message)) {
            throw new \InvalidArgumentException('non-nullable response_message cannot be null');
        }

        $this->container['response_message'] = $response_message;

        return $this;
    }

    /**
     * Gets host_response_code
     *
     * @return string|null
     */
    public function getHostResponseCode()
    {
        return $this->container['host_response_code'];
    }

    /**
     * Sets host_response_code
     *
     * @param string|null $host_response_code Endpoint or issuer response code.
     *
     * @return self
     */
    public function setHostResponseCode($host_response_code)
    {

        if (is_null($host_response_code)) {
            throw new \InvalidArgumentException('non-nullable host_response_code cannot be null');
        }

        $this->container['host_response_code'] = $host_response_code;

        return $this;
    }

    /**
     * Gets host_response_message
     *
     * @return string|null
     */
    public function getHostResponseMessage()
    {
        return $this->container['host_response_message'];
    }

    /**
     * Sets host_response_message
     *
     * @param string|null $host_response_message Endpoint or issuer response message.
     *
     * @return self
     */
    public function setHostResponseMessage($host_response_message)
    {

        if (is_null($host_response_message)) {
            throw new \InvalidArgumentException('non-nullable host_response_message cannot be null');
        }

        $this->container['host_response_message'] = $host_response_message;

        return $this;
    }

    /**
     * Gets local_timestamp
     *
     * @return \DateTime|null
     */
    public function getLocalTimestamp()
    {
        return $this->container['local_timestamp'];
    }

    /**
     * Sets local_timestamp
     *
     * @param \DateTime|null $local_timestamp Timestamp in ISO 8601 format YYYY-MM-DDThh:mm:ssZ
     *
     * @return self
     */
    public function setLocalTimestamp($local_timestamp)
    {

        if (is_null($local_timestamp)) {
            throw new \InvalidArgumentException('non-nullable local_timestamp cannot be null');
        }

        $this->container['local_timestamp'] = $local_timestamp;

        return $this;
    }

    /**
     * Gets debit_receipt_number
     *
     * @return string|null
     */
    public function getDebitReceiptNumber()
    {
        return $this->container['debit_receipt_number'];
    }

    /**
     * Sets debit_receipt_number
     *
     * @param string|null $debit_receipt_number Debit Receipt Number generated by switch.
     *
     * @return self
     */
    public function setDebitReceiptNumber($debit_receipt_number)
    {
        if (!is_null($debit_receipt_number) && (mb_strlen($debit_receipt_number) > 6)) {
            throw new \InvalidArgumentException('invalid length for $debit_receipt_number when calling ProcessorResponseDetails., must be smaller than or equal to 6.');
        }


        if (is_null($debit_receipt_number)) {
            throw new \InvalidArgumentException('non-nullable debit_receipt_number cannot be null');
        }

        $this->container['debit_receipt_number'] = $debit_receipt_number;

        return $this;
    }

    /**
     * Gets purchase_order_required_indicator
     *
     * @return string|null
     */
    public function getPurchaseOrderRequiredIndicator()
    {
        return $this->container['purchase_order_required_indicator'];
    }

    /**
     * Sets purchase_order_required_indicator
     *
     * @param string|null $purchase_order_required_indicator It identifies if the purchase order (PO) number is required.  Valid Values: * REQUIRED * NOT_REQUIRED
     *
     * @return self
     */
    public function setPurchaseOrderRequiredIndicator($purchase_order_required_indicator)
    {
        if (!is_null($purchase_order_required_indicator) && (mb_strlen($purchase_order_required_indicator) > 15)) {
            throw new \InvalidArgumentException('invalid length for $purchase_order_required_indicator when calling ProcessorResponseDetails., must be smaller than or equal to 15.');
        }


        if (is_null($purchase_order_required_indicator)) {
            throw new \InvalidArgumentException('non-nullable purchase_order_required_indicator cannot be null');
        }

        $this->container['purchase_order_required_indicator'] = $purchase_order_required_indicator;

        return $this;
    }

    /**
     * Gets tax_exempt_indicator
     *
     * @return string|null
     */
    public function getTaxExemptIndicator()
    {
        return $this->container['tax_exempt_indicator'];
    }

    /**
     * Sets tax_exempt_indicator
     *
     * @param string|null $tax_exempt_indicator Identifies if the customer is tax exempt.  Valid Values: * TAX_EXEMPT * NOT_EXEMPT
     *
     * @return self
     */
    public function setTaxExemptIndicator($tax_exempt_indicator)
    {
        $allowedValues = $this->getTaxExemptIndicatorAllowableValues();
        if (!is_null($tax_exempt_indicator) && !in_array($tax_exempt_indicator, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'tax_exempt_indicator', must be one of '%s'",
                    $tax_exempt_indicator,
                    implode("', '", $allowedValues)
                )
            );
        }

        if (is_null($tax_exempt_indicator)) {
            throw new \InvalidArgumentException('non-nullable tax_exempt_indicator cannot be null');
        }

        $this->container['tax_exempt_indicator'] = $tax_exempt_indicator;

        return $this;
    }

    /**
     * Gets purchase_apr_type
     *
     * @return string|null
     */
    public function getPurchaseAprType()
    {
        return $this->container['purchase_apr_type'];
    }

    /**
     * Sets purchase_apr_type
     *
     * @param string|null $purchase_apr_type The annual percentage rate charged on the account.  Valid Values: * VARIABLE * FIXED
     *
     * @return self
     */
    public function setPurchaseAprType($purchase_apr_type)
    {
        $allowedValues = $this->getPurchaseAprTypeAllowableValues();
        if (!is_null($purchase_apr_type) && !in_array($purchase_apr_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'purchase_apr_type', must be one of '%s'",
                    $purchase_apr_type,
                    implode("', '", $allowedValues)
                )
            );
        }

        if (is_null($purchase_apr_type)) {
            throw new \InvalidArgumentException('non-nullable purchase_apr_type cannot be null');
        }

        $this->container['purchase_apr_type'] = $purchase_apr_type;

        return $this;
    }

    /**
     * Gets arqc_response_code
     *
     * @return string|null
     */
    public function getArqcResponseCode()
    {
        return $this->container['arqc_response_code'];
    }

    /**
     * Sets arqc_response_code
     *
     * @param string|null $arqc_response_code An ARQC (Authorization Request Cryptogram) generated by the EMV card upon request from the pos terminal to obtain authorization for payment.  Valid Values: * VALIDATION_FAILED * VALIDATION_UNAVAILABLE * UNAVAILABLE * VALIDATION_BYPASSED * VALIDATION_PASSED
     *
     * @return self
     */
    public function setArqcResponseCode($arqc_response_code)
    {
        $allowedValues = $this->getArqcResponseCodeAllowableValues();
        if (!is_null($arqc_response_code) && !in_array($arqc_response_code, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'arqc_response_code', must be one of '%s'",
                    $arqc_response_code,
                    implode("', '", $allowedValues)
                )
            );
        }

        if (is_null($arqc_response_code)) {
            throw new \InvalidArgumentException('non-nullable arqc_response_code cannot be null');
        }

        $this->container['arqc_response_code'] = $arqc_response_code;

        return $this;
    }

    /**
     * Gets response_indicators
     *
     * @return \Fiserv\Payments\Lib\CommerceHub\Model\ResponseIndicator|null
     */
    public function getResponseIndicators()
    {
        return $this->container['response_indicators'];
    }

    /**
     * Sets response_indicators
     *
     * @param \Fiserv\Payments\Lib\CommerceHub\Model\ResponseIndicator|null $response_indicators response_indicators
     *
     * @return self
     */
    public function setResponseIndicators($response_indicators)
    {

        if (is_null($response_indicators)) {
            throw new \InvalidArgumentException('non-nullable response_indicators cannot be null');
        }

        $this->container['response_indicators'] = $response_indicators;

        return $this;
    }

    /**
     * Gets bank_association_details
     *
     * @return \Fiserv\Payments\Lib\CommerceHub\Model\BankAssociationDetails|null
     */
    public function getBankAssociationDetails()
    {
        return $this->container['bank_association_details'];
    }

    /**
     * Sets bank_association_details
     *
     * @param \Fiserv\Payments\Lib\CommerceHub\Model\BankAssociationDetails|null $bank_association_details bank_association_details
     *
     * @return self
     */
    public function setBankAssociationDetails($bank_association_details)
    {

        if (is_null($bank_association_details)) {
            throw new \InvalidArgumentException('non-nullable bank_association_details cannot be null');
        }

        $this->container['bank_association_details'] = $bank_association_details;

        return $this;
    }

    /**
     * Gets additional_info
     *
     * @return \Fiserv\Payments\Lib\CommerceHub\Model\NameValuePair[]|null
     */
    public function getAdditionalInfo()
    {
        return $this->container['additional_info'];
    }

    /**
     * Sets additional_info
     *
     * @param \Fiserv\Payments\Lib\CommerceHub\Model\NameValuePair[]|null $additional_info additional_info
     *
     * @return self
     */
    public function setAdditionalInfo($additional_info)
    {

        if (is_null($additional_info)) {
            throw new \InvalidArgumentException('non-nullable additional_info cannot be null');
        }

        $this->container['additional_info'] = $additional_info;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


