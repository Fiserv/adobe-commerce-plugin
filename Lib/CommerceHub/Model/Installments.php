<?php
/**
 * Installments
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Fiserv\Payments\Lib\CommerceHub
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Commerce Hub
 *
 * This API Specification is designed to provide technical guidance required to consume and integrate with our APIs for payment processing.
 *
 * The version of the OpenAPI document: v1.24.08
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.3.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Fiserv\Payments\Lib\CommerceHub\Model;

use \ArrayAccess;
use \Fiserv\Payments\Lib\CommerceHub\ObjectSerializer;

/**
 * Installments Class Doc Comment
 *
 * @category Class
 * @description Installment bill payment transaction information.
 * @package  Fiserv\Payments\Lib\CommerceHub
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class Installments implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Installments';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'installment_amount' => 'float',
        'last_installment_amount' => 'float',
        'installment_count' => 'int',
        'interest_rate' => 'float',
        'payment_first_day' => 'float',
        'invoice_id' => 'string',
        'invoice_date' => '\DateTime',
        'delivery_date' => '\DateTime',
        'due_date' => '\DateTime'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'installment_amount' => null,
        'last_installment_amount' => null,
        'installment_count' => null,
        'interest_rate' => null,
        'payment_first_day' => null,
        'invoice_id' => null,
        'invoice_date' => 'date',
        'delivery_date' => 'date',
        'due_date' => 'date'
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'installment_amount' => false,
        'last_installment_amount' => false,
        'installment_count' => false,
        'interest_rate' => false,
        'payment_first_day' => false,
        'invoice_id' => false,
        'invoice_date' => false,
        'delivery_date' => false,
        'due_date' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'installment_amount' => 'installmentAmount',
        'last_installment_amount' => 'lastInstallmentAmount',
        'installment_count' => 'installmentCount',
        'interest_rate' => 'interestRate',
        'payment_first_day' => 'paymentFirstDay',
        'invoice_id' => 'invoiceId',
        'invoice_date' => 'invoiceDate',
        'delivery_date' => 'deliveryDate',
        'due_date' => 'dueDate'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'installment_amount' => 'setInstallmentAmount',
        'last_installment_amount' => 'setLastInstallmentAmount',
        'installment_count' => 'setInstallmentCount',
        'interest_rate' => 'setInterestRate',
        'payment_first_day' => 'setPaymentFirstDay',
        'invoice_id' => 'setInvoiceId',
        'invoice_date' => 'setInvoiceDate',
        'delivery_date' => 'setDeliveryDate',
        'due_date' => 'setDueDate'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'installment_amount' => 'getInstallmentAmount',
        'last_installment_amount' => 'getLastInstallmentAmount',
        'installment_count' => 'getInstallmentCount',
        'interest_rate' => 'getInterestRate',
        'payment_first_day' => 'getPaymentFirstDay',
        'invoice_id' => 'getInvoiceId',
        'invoice_date' => 'getInvoiceDate',
        'delivery_date' => 'getDeliveryDate',
        'due_date' => 'getDueDate'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('installment_amount', $data ?? [], null);
        $this->setIfExists('last_installment_amount', $data ?? [], null);
        $this->setIfExists('installment_count', $data ?? [], null);
        $this->setIfExists('interest_rate', $data ?? [], null);
        $this->setIfExists('payment_first_day', $data ?? [], null);
        $this->setIfExists('invoice_id', $data ?? [], null);
        $this->setIfExists('invoice_date', $data ?? [], null);
        $this->setIfExists('delivery_date', $data ?? [], null);
        $this->setIfExists('due_date', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['installment_amount']) && ($this->container['installment_amount'] > 1.0E+18)) {
            $invalidProperties[] = "invalid value for 'installment_amount', must be smaller than or equal to 1.0E+18.";
        }

        if (!is_null($this->container['last_installment_amount']) && ($this->container['last_installment_amount'] > 1.0E+18)) {
            $invalidProperties[] = "invalid value for 'last_installment_amount', must be smaller than or equal to 1.0E+18.";
        }

        if (!is_null($this->container['installment_count']) && ($this->container['installment_count'] > 999)) {
            $invalidProperties[] = "invalid value for 'installment_count', must be smaller than or equal to 999.";
        }

        if (!is_null($this->container['interest_rate']) && ($this->container['interest_rate'] > 100)) {
            $invalidProperties[] = "invalid value for 'interest_rate', must be smaller than or equal to 100.";
        }

        if (!is_null($this->container['payment_first_day']) && ($this->container['payment_first_day'] > 1.0E+18)) {
            $invalidProperties[] = "invalid value for 'payment_first_day', must be smaller than or equal to 1.0E+18.";
        }

        if (!is_null($this->container['invoice_id']) && (mb_strlen($this->container['invoice_id']) > 256)) {
            $invalidProperties[] = "invalid value for 'invoice_id', the character length must be smaller than or equal to 256.";
        }

        if (!is_null($this->container['delivery_date']) && (mb_strlen($this->container['delivery_date']) > 10)) {
            $invalidProperties[] = "invalid value for 'delivery_date', the character length must be smaller than or equal to 10.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets installment_amount
     *
     * @return float|null
     */
    public function getInstallmentAmount()
    {
        return $this->container['installment_amount'];
    }

    /**
     * Sets installment_amount
     *
     * @param float|null $installment_amount Amount the customer will be charged per installment.
     *
     * @return self
     */
    public function setInstallmentAmount($installment_amount)
    {
        if (is_null($installment_amount)) {
            throw new \InvalidArgumentException('non-nullable installment_amount cannot be null');
        }

        if (($installment_amount > 1.0E+18)) {
            throw new \InvalidArgumentException('invalid value for $installment_amount when calling Installments., must be smaller than or equal to 1.0E+18.');
        }

        $this->container['installment_amount'] = $installment_amount;

        return $this;
    }

    /**
     * Gets last_installment_amount
     *
     * @return float|null
     */
    public function getLastInstallmentAmount()
    {
        return $this->container['last_installment_amount'];
    }

    /**
     * Sets last_installment_amount
     *
     * @param float|null $last_installment_amount Amount the customer will be charged on the last installment.
     *
     * @return self
     */
    public function setLastInstallmentAmount($last_installment_amount)
    {
        if (is_null($last_installment_amount)) {
            throw new \InvalidArgumentException('non-nullable last_installment_amount cannot be null');
        }

        if (($last_installment_amount > 1.0E+18)) {
            throw new \InvalidArgumentException('invalid value for $last_installment_amount when calling Installments., must be smaller than or equal to 1.0E+18.');
        }

        $this->container['last_installment_amount'] = $last_installment_amount;

        return $this;
    }

    /**
     * Gets installment_count
     *
     * @return int|null
     */
    public function getInstallmentCount()
    {
        return $this->container['installment_count'];
    }

    /**
     * Sets installment_count
     *
     * @param int|null $installment_count Number of installment payments in the plan
     *
     * @return self
     */
    public function setInstallmentCount($installment_count)
    {
        if (is_null($installment_count)) {
            throw new \InvalidArgumentException('non-nullable installment_count cannot be null');
        }

        if (($installment_count > 999)) {
            throw new \InvalidArgumentException('invalid value for $installment_count when calling Installments., must be smaller than or equal to 999.');
        }

        $this->container['installment_count'] = $installment_count;

        return $this;
    }

    /**
     * Gets interest_rate
     *
     * @return float|null
     */
    public function getInterestRate()
    {
        return $this->container['interest_rate'];
    }

    /**
     * Sets interest_rate
     *
     * @param float|null $interest_rate Indicates the installment interest rate if applicable.
     *
     * @return self
     */
    public function setInterestRate($interest_rate)
    {
        if (is_null($interest_rate)) {
            throw new \InvalidArgumentException('non-nullable interest_rate cannot be null');
        }

        if (($interest_rate > 100)) {
            throw new \InvalidArgumentException('invalid value for $interest_rate when calling Installments., must be smaller than or equal to 100.');
        }

        $this->container['interest_rate'] = $interest_rate;

        return $this;
    }

    /**
     * Gets payment_first_day
     *
     * @return float|null
     */
    public function getPaymentFirstDay()
    {
        return $this->container['payment_first_day'];
    }

    /**
     * Sets payment_first_day
     *
     * @param float|null $payment_first_day Amount the customer will be charged on the first day.
     *
     * @return self
     */
    public function setPaymentFirstDay($payment_first_day)
    {
        if (is_null($payment_first_day)) {
            throw new \InvalidArgumentException('non-nullable payment_first_day cannot be null');
        }

        if (($payment_first_day > 1.0E+18)) {
            throw new \InvalidArgumentException('invalid value for $payment_first_day when calling Installments., must be smaller than or equal to 1.0E+18.');
        }

        $this->container['payment_first_day'] = $payment_first_day;

        return $this;
    }

    /**
     * Gets invoice_id
     *
     * @return string|null
     */
    public function getInvoiceId()
    {
        return $this->container['invoice_id'];
    }

    /**
     * Sets invoice_id
     *
     * @param string|null $invoice_id Invoice Number of an installment bill payment transaction. Note: This field has limited platform availability. For more information, please contact your account representative.
     *
     * @return self
     */
    public function setInvoiceId($invoice_id)
    {
        if (is_null($invoice_id)) {
            throw new \InvalidArgumentException('non-nullable invoice_id cannot be null');
        }
        if ((mb_strlen($invoice_id) > 256)) {
            throw new \InvalidArgumentException('invalid length for $invoice_id when calling Installments., must be smaller than or equal to 256.');
        }

        $this->container['invoice_id'] = $invoice_id;

        return $this;
    }

    /**
     * Gets invoice_date
     *
     * @return \DateTime|null
     */
    public function getInvoiceDate()
    {
        return $this->container['invoice_date'];
    }

    /**
     * Sets invoice_date
     *
     * @param \DateTime|null $invoice_date Date that the installment invoice was created in YYYY-MM-DD format.
     *
     * @return self
     */
    public function setInvoiceDate($invoice_date)
    {
        if (is_null($invoice_date)) {
            throw new \InvalidArgumentException('non-nullable invoice_date cannot be null');
        }
        $this->container['invoice_date'] = $invoice_date;

        return $this;
    }

    /**
     * Gets delivery_date
     *
     * @return \DateTime|null
     */
    public function getDeliveryDate()
    {
        return $this->container['delivery_date'];
    }

    /**
     * Sets delivery_date
     *
     * @param \DateTime|null $delivery_date Date the product or service is delivered in YYYY-MM-DD format.
     *
     * @return self
     */
    public function setDeliveryDate($delivery_date)
    {
        if (is_null($delivery_date)) {
            throw new \InvalidArgumentException('non-nullable delivery_date cannot be null');
        }
        if ((mb_strlen($delivery_date) > 10)) {
            throw new \InvalidArgumentException('invalid length for $delivery_date when calling Installments., must be smaller than or equal to 10.');
        }

        $this->container['delivery_date'] = $delivery_date;

        return $this;
    }

    /**
     * Gets due_date
     *
     * @return \DateTime|null
     */
    public function getDueDate()
    {
        return $this->container['due_date'];
    }

    /**
     * Sets due_date
     *
     * @param \DateTime|null $due_date Date final payment is due for the installment invoice in YYYY-MM-DD format.
     *
     * @return self
     */
    public function setDueDate($due_date)
    {
        if (is_null($due_date)) {
            throw new \InvalidArgumentException('non-nullable due_date cannot be null');
        }
        $this->container['due_date'] = $due_date;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


