<?php
/**
 * DynamicDescriptors
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Fiserv\Payments\Lib\CommerceHub
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Payments
 *
 * This API Specification is designed to provide technical guidance required to consume and integrate with our APIs for payment processing.
 *
 * The version of the OpenAPI document: v1.3.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.2.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Fiserv\Payments\Lib\CommerceHub\Model;

use \ArrayAccess;
use \Fiserv\Payments\Lib\CommerceHub\ObjectSerializer;

/**
 * DynamicDescriptors Class Doc Comment
 *
 * @category Class
 * @description &lt;a href&#x3D;\&quot;../docs?path&#x3D;docs/Resources/Guides/Dynamic-Descriptor.md\&quot;&gt;Dynamic descriptor&lt;/a&gt; information about a merchant and appears on the customer statement. Note: This has limited platform availability. For more information, please contact your Account Representative.
 * @package  Fiserv\Payments\Lib\CommerceHub
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class DynamicDescriptors implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'DynamicDescriptors';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'mcc' => 'string',
        'merchant_name' => 'string',
        'customer_service_number' => 'string',
        'service_entitlement' => 'string',
        'address' => '\Fiserv\Payments\Lib\CommerceHub\Model\Address'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'mcc' => null,
        'merchant_name' => null,
        'customer_service_number' => null,
        'service_entitlement' => null,
        'address' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'mcc' => false,
		'merchant_name' => false,
		'customer_service_number' => false,
		'service_entitlement' => false,
		'address' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'mcc' => 'mcc',
        'merchant_name' => 'merchantName',
        'customer_service_number' => 'customerServiceNumber',
        'service_entitlement' => 'serviceEntitlement',
        'address' => 'address'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'mcc' => 'setMcc',
        'merchant_name' => 'setMerchantName',
        'customer_service_number' => 'setCustomerServiceNumber',
        'service_entitlement' => 'setServiceEntitlement',
        'address' => 'setAddress'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'mcc' => 'getMcc',
        'merchant_name' => 'getMerchantName',
        'customer_service_number' => 'getCustomerServiceNumber',
        'service_entitlement' => 'getServiceEntitlement',
        'address' => 'getAddress'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('mcc', $data ?? [], null);
        $this->setIfExists('merchant_name', $data ?? [], null);
        $this->setIfExists('customer_service_number', $data ?? [], null);
        $this->setIfExists('service_entitlement', $data ?? [], null);
        $this->setIfExists('address', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['mcc']) && (mb_strlen($this->container['mcc']) > 4)) {
            $invalidProperties[] = "invalid value for 'mcc', the character length must be smaller than or equal to 4.";
        }

        if (!is_null($this->container['merchant_name']) && (mb_strlen($this->container['merchant_name']) > 1024)) {
            $invalidProperties[] = "invalid value for 'merchant_name', the character length must be smaller than or equal to 1024.";
        }

        if (!is_null($this->container['customer_service_number']) && (mb_strlen($this->container['customer_service_number']) > 15)) {
            $invalidProperties[] = "invalid value for 'customer_service_number', the character length must be smaller than or equal to 15.";
        }

        if (!is_null($this->container['service_entitlement']) && (mb_strlen($this->container['service_entitlement']) > 16)) {
            $invalidProperties[] = "invalid value for 'service_entitlement', the character length must be smaller than or equal to 16.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets mcc
     *
     * @return string|null
     */
    public function getMcc()
    {
        return $this->container['mcc'];
    }

    /**
     * Sets mcc
     *
     * @param string|null $mcc Merchant Category Code (MCC). The MCC is an industry standard four-digit number used to classify a business by the type of goods or services provided.
     *
     * @return self
     */
    public function setMcc($mcc)
    {
        if (!is_null($mcc) && (mb_strlen($mcc) > 4)) {
            throw new \InvalidArgumentException('invalid length for $mcc when calling DynamicDescriptors., must be smaller than or equal to 4.');
        }


        if (is_null($mcc)) {
            throw new \InvalidArgumentException('non-nullable mcc cannot be null');
        }

        $this->container['mcc'] = $mcc;

        return $this;
    }

    /**
     * Gets merchant_name
     *
     * @return string|null
     */
    public function getMerchantName()
    {
        return $this->container['merchant_name'];
    }

    /**
     * Sets merchant_name
     *
     * @param string|null $merchant_name Doing Business As (DBA) name.
     *
     * @return self
     */
    public function setMerchantName($merchant_name)
    {
        if (!is_null($merchant_name) && (mb_strlen($merchant_name) > 1024)) {
            throw new \InvalidArgumentException('invalid length for $merchant_name when calling DynamicDescriptors., must be smaller than or equal to 1024.');
        }


        if (is_null($merchant_name)) {
            throw new \InvalidArgumentException('non-nullable merchant_name cannot be null');
        }

        $this->container['merchant_name'] = $merchant_name;

        return $this;
    }

    /**
     * Gets customer_service_number
     *
     * @return string|null
     */
    public function getCustomerServiceNumber()
    {
        return $this->container['customer_service_number'];
    }

    /**
     * Sets customer_service_number
     *
     * @param string|null $customer_service_number Customer service phone number information that is passed to the issuer and may appear on the customer statement.
     *
     * @return self
     */
    public function setCustomerServiceNumber($customer_service_number)
    {
        if (!is_null($customer_service_number) && (mb_strlen($customer_service_number) > 15)) {
            throw new \InvalidArgumentException('invalid length for $customer_service_number when calling DynamicDescriptors., must be smaller than or equal to 15.');
        }


        if (is_null($customer_service_number)) {
            throw new \InvalidArgumentException('non-nullable customer_service_number cannot be null');
        }

        $this->container['customer_service_number'] = $customer_service_number;

        return $this;
    }

    /**
     * Gets service_entitlement
     *
     * @return string|null
     */
    public function getServiceEntitlement()
    {
        return $this->container['service_entitlement'];
    }

    /**
     * Sets service_entitlement
     *
     * @param string|null $service_entitlement Merchant service entitlement number (aka merchant ID).
     *
     * @return self
     */
    public function setServiceEntitlement($service_entitlement)
    {
        if (!is_null($service_entitlement) && (mb_strlen($service_entitlement) > 16)) {
            throw new \InvalidArgumentException('invalid length for $service_entitlement when calling DynamicDescriptors., must be smaller than or equal to 16.');
        }


        if (is_null($service_entitlement)) {
            throw new \InvalidArgumentException('non-nullable service_entitlement cannot be null');
        }

        $this->container['service_entitlement'] = $service_entitlement;

        return $this;
    }

    /**
     * Gets address
     *
     * @return \Fiserv\Payments\Lib\CommerceHub\Model\Address|null
     */
    public function getAddress()
    {
        return $this->container['address'];
    }

    /**
     * Sets address
     *
     * @param \Fiserv\Payments\Lib\CommerceHub\Model\Address|null $address address
     *
     * @return self
     */
    public function setAddress($address)
    {

        if (is_null($address)) {
            throw new \InvalidArgumentException('non-nullable address cannot be null');
        }

        $this->container['address'] = $address;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


