<?php
/**
 * Check
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Fiserv\Payments\Lib\CommerceHub
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Commerce Hub
 *
 * This API Specification is designed to provide technical guidance required to consume and integrate with our APIs for payment processing.
 *
 * The version of the OpenAPI document: v1.24.08
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.3.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Fiserv\Payments\Lib\CommerceHub\Model;

use \ArrayAccess;
use \Fiserv\Payments\Lib\CommerceHub\ObjectSerializer;

/**
 * Check Class Doc Comment
 *
 * @category Class
 * @description Common &lt;a href&#x3D;\&quot;../docs?path&#x3D;docs/Resources/Master-Data/Check.md\&quot;&gt;check&lt;/a&gt; data for a transaction request and response.
 * @package  Fiserv\Payments\Lib\CommerceHub
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class Check implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Check';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'name_on_check' => 'string',
        'check_data' => 'string',
        'routing_number' => 'string',
        'account_number' => 'string',
        'check_type' => 'string',
        'account_type' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'name_on_check' => null,
        'check_data' => null,
        'routing_number' => null,
        'account_number' => null,
        'check_type' => null,
        'account_type' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'name_on_check' => false,
        'check_data' => false,
        'routing_number' => false,
        'account_number' => false,
        'check_type' => false,
        'account_type' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'name_on_check' => 'nameOnCheck',
        'check_data' => 'checkData',
        'routing_number' => 'routingNumber',
        'account_number' => 'accountNumber',
        'check_type' => 'checkType',
        'account_type' => 'accountType'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'name_on_check' => 'setNameOnCheck',
        'check_data' => 'setCheckData',
        'routing_number' => 'setRoutingNumber',
        'account_number' => 'setAccountNumber',
        'check_type' => 'setCheckType',
        'account_type' => 'setAccountType'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'name_on_check' => 'getNameOnCheck',
        'check_data' => 'getCheckData',
        'routing_number' => 'getRoutingNumber',
        'account_number' => 'getAccountNumber',
        'check_type' => 'getCheckType',
        'account_type' => 'getAccountType'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('name_on_check', $data ?? [], null);
        $this->setIfExists('check_data', $data ?? [], null);
        $this->setIfExists('routing_number', $data ?? [], null);
        $this->setIfExists('account_number', $data ?? [], null);
        $this->setIfExists('check_type', $data ?? [], null);
        $this->setIfExists('account_type', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['name_on_check']) && (mb_strlen($this->container['name_on_check']) > 50)) {
            $invalidProperties[] = "invalid value for 'name_on_check', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['check_data']) && (mb_strlen($this->container['check_data']) > 45)) {
            $invalidProperties[] = "invalid value for 'check_data', the character length must be smaller than or equal to 45.";
        }

        if (!is_null($this->container['routing_number']) && (mb_strlen($this->container['routing_number']) > 9)) {
            $invalidProperties[] = "invalid value for 'routing_number', the character length must be smaller than or equal to 9.";
        }

        if (!is_null($this->container['account_number']) && (mb_strlen($this->container['account_number']) > 45)) {
            $invalidProperties[] = "invalid value for 'account_number', the character length must be smaller than or equal to 45.";
        }

        if (!is_null($this->container['check_type']) && (mb_strlen($this->container['check_type']) > 256)) {
            $invalidProperties[] = "invalid value for 'check_type', the character length must be smaller than or equal to 256.";
        }

        if (!is_null($this->container['account_type']) && (mb_strlen($this->container['account_type']) > 256)) {
            $invalidProperties[] = "invalid value for 'account_type', the character length must be smaller than or equal to 256.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets name_on_check
     *
     * @return string|null
     */
    public function getNameOnCheck()
    {
        return $this->container['name_on_check'];
    }

    /**
     * Sets name_on_check
     *
     * @param string|null $name_on_check Check holder name.
     *
     * @return self
     */
    public function setNameOnCheck($name_on_check)
    {
        if (is_null($name_on_check)) {
            throw new \InvalidArgumentException('non-nullable name_on_check cannot be null');
        }
        if ((mb_strlen($name_on_check) > 50)) {
            throw new \InvalidArgumentException('invalid length for $name_on_check when calling Check., must be smaller than or equal to 50.');
        }

        $this->container['name_on_check'] = $name_on_check;

        return $this;
    }

    /**
     * Gets check_data
     *
     * @return string|null
     */
    public function getCheckData()
    {
        return $this->container['check_data'];
    }

    /**
     * Sets check_data
     *
     * @param string|null $check_data Identifying data for the check presented (i.e check number).
     *
     * @return self
     */
    public function setCheckData($check_data)
    {
        if (is_null($check_data)) {
            throw new \InvalidArgumentException('non-nullable check_data cannot be null');
        }
        if ((mb_strlen($check_data) > 45)) {
            throw new \InvalidArgumentException('invalid length for $check_data when calling Check., must be smaller than or equal to 45.');
        }

        $this->container['check_data'] = $check_data;

        return $this;
    }

    /**
     * Gets routing_number
     *
     * @return string|null
     */
    public function getRoutingNumber()
    {
        return $this->container['routing_number'];
    }

    /**
     * Sets routing_number
     *
     * @param string|null $routing_number Routing number endorsed on the check.
     *
     * @return self
     */
    public function setRoutingNumber($routing_number)
    {
        if (is_null($routing_number)) {
            throw new \InvalidArgumentException('non-nullable routing_number cannot be null');
        }
        if ((mb_strlen($routing_number) > 9)) {
            throw new \InvalidArgumentException('invalid length for $routing_number when calling Check., must be smaller than or equal to 9.');
        }

        $this->container['routing_number'] = $routing_number;

        return $this;
    }

    /**
     * Gets account_number
     *
     * @return string|null
     */
    public function getAccountNumber()
    {
        return $this->container['account_number'];
    }

    /**
     * Sets account_number
     *
     * @param string|null $account_number Account number endorsed on the check.
     *
     * @return self
     */
    public function setAccountNumber($account_number)
    {
        if (is_null($account_number)) {
            throw new \InvalidArgumentException('non-nullable account_number cannot be null');
        }
        if ((mb_strlen($account_number) > 45)) {
            throw new \InvalidArgumentException('invalid length for $account_number when calling Check., must be smaller than or equal to 45.');
        }

        $this->container['account_number'] = $account_number;

        return $this;
    }

    /**
     * Gets check_type
     *
     * @return string|null
     */
    public function getCheckType()
    {
        return $this->container['check_type'];
    }

    /**
     * Sets check_type
     *
     * @param string|null $check_type Describes check type.
     *
     * @return self
     */
    public function setCheckType($check_type)
    {
        if (is_null($check_type)) {
            throw new \InvalidArgumentException('non-nullable check_type cannot be null');
        }
        if ((mb_strlen($check_type) > 256)) {
            throw new \InvalidArgumentException('invalid length for $check_type when calling Check., must be smaller than or equal to 256.');
        }

        $this->container['check_type'] = $check_type;

        return $this;
    }

    /**
     * Gets account_type
     *
     * @return string|null
     */
    public function getAccountType()
    {
        return $this->container['account_type'];
    }

    /**
     * Sets account_type
     *
     * @param string|null $account_type Describes check type.
     *
     * @return self
     */
    public function setAccountType($account_type)
    {
        if (is_null($account_type)) {
            throw new \InvalidArgumentException('non-nullable account_type cannot be null');
        }
        if ((mb_strlen($account_type) > 256)) {
            throw new \InvalidArgumentException('invalid length for $account_type when calling Check., must be smaller than or equal to 256.');
        }

        $this->container['account_type'] = $account_type;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


