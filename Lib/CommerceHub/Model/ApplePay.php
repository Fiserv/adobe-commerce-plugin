<?php
/**
 * ApplePay
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Fiserv\Payments\Lib\CommerceHub
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Payments
 *
 * This API Specification is designed to provide technical guidance required to consume and integrate with our APIs for payment processing.
 *
 * The version of the OpenAPI document: v1.3.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.2.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Fiserv\Payments\Lib\CommerceHub\Model;
use \Fiserv\Payments\Lib\CommerceHub\ObjectSerializer;

/**
 * ApplePay Class Doc Comment
 *
 * @category Class
 * @package  Fiserv\Payments\Lib\CommerceHub
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ApplePay extends Source
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'ApplePay';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'data' => 'string',
        'header' => '\Fiserv\Payments\Lib\CommerceHub\Model\AppleHeader',
        'signature' => 'string',
        'version' => 'string',
        'application_data' => 'string',
        'apple_pay_merchant_id' => 'string',
        'merchant_private_key' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'data' => null,
        'header' => null,
        'signature' => null,
        'version' => null,
        'application_data' => null,
        'apple_pay_merchant_id' => null,
        'merchant_private_key' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'data' => false,
		'header' => false,
		'signature' => false,
		'version' => false,
		'application_data' => false,
		'apple_pay_merchant_id' => false,
		'merchant_private_key' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes + parent::openAPITypes();
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats + parent::openAPIFormats();
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables + parent::openAPINullables();
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'data' => 'data',
        'header' => 'header',
        'signature' => 'signature',
        'version' => 'version',
        'application_data' => 'applicationData',
        'apple_pay_merchant_id' => 'applePayMerchantId',
        'merchant_private_key' => 'merchantPrivateKey'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'data' => 'setData',
        'header' => 'setHeader',
        'signature' => 'setSignature',
        'version' => 'setVersion',
        'application_data' => 'setApplicationData',
        'apple_pay_merchant_id' => 'setApplePayMerchantId',
        'merchant_private_key' => 'setMerchantPrivateKey'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'data' => 'getData',
        'header' => 'getHeader',
        'signature' => 'getSignature',
        'version' => 'getVersion',
        'application_data' => 'getApplicationData',
        'apple_pay_merchant_id' => 'getApplePayMerchantId',
        'merchant_private_key' => 'getMerchantPrivateKey'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return parent::attributeMap() + self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return parent::setters() + self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return parent::getters() + self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }



    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        parent::__construct($data);

        $this->setIfExists('data', $data ?? [], null);
        $this->setIfExists('header', $data ?? [], null);
        $this->setIfExists('signature', $data ?? [], null);
        $this->setIfExists('version', $data ?? [], null);
        $this->setIfExists('application_data', $data ?? [], null);
        $this->setIfExists('apple_pay_merchant_id', $data ?? [], null);
        $this->setIfExists('merchant_private_key', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = parent::listInvalidProperties();

        if (!is_null($this->container['data']) && (mb_strlen($this->container['data']) > 4000)) {
            $invalidProperties[] = "invalid value for 'data', the character length must be smaller than or equal to 4000.";
        }

        if (!is_null($this->container['signature']) && (mb_strlen($this->container['signature']) > 4000)) {
            $invalidProperties[] = "invalid value for 'signature', the character length must be smaller than or equal to 4000.";
        }

        if (!is_null($this->container['version']) && (mb_strlen($this->container['version']) > 64)) {
            $invalidProperties[] = "invalid value for 'version', the character length must be smaller than or equal to 64.";
        }

        if (!is_null($this->container['application_data']) && (mb_strlen($this->container['application_data']) > 4000)) {
            $invalidProperties[] = "invalid value for 'application_data', the character length must be smaller than or equal to 4000.";
        }

        if (!is_null($this->container['apple_pay_merchant_id']) && (mb_strlen($this->container['apple_pay_merchant_id']) > 256)) {
            $invalidProperties[] = "invalid value for 'apple_pay_merchant_id', the character length must be smaller than or equal to 256.";
        }

        if (!is_null($this->container['merchant_private_key']) && (mb_strlen($this->container['merchant_private_key']) > 256)) {
            $invalidProperties[] = "invalid value for 'merchant_private_key', the character length must be smaller than or equal to 256.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets data
     *
     * @return string|null
     */
    public function getData()
    {
        return $this->container['data'];
    }

    /**
     * Sets data
     *
     * @param string|null $data Encrypted data. Payment data dictionary, base64 encoded as a string.
     *
     * @return self
     */
    public function setData($data)
    {
        if (!is_null($data) && (mb_strlen($data) > 4000)) {
            throw new \InvalidArgumentException('invalid length for $data when calling ApplePay., must be smaller than or equal to 4000.');
        }


        if (is_null($data)) {
            throw new \InvalidArgumentException('non-nullable data cannot be null');
        }

        $this->container['data'] = $data;

        return $this;
    }

    /**
     * Gets header
     *
     * @return \Fiserv\Payments\Lib\CommerceHub\Model\AppleHeader|null
     */
    public function getHeader()
    {
        return $this->container['header'];
    }

    /**
     * Sets header
     *
     * @param \Fiserv\Payments\Lib\CommerceHub\Model\AppleHeader|null $header header
     *
     * @return self
     */
    public function setHeader($header)
    {

        if (is_null($header)) {
            throw new \InvalidArgumentException('non-nullable header cannot be null');
        }

        $this->container['header'] = $header;

        return $this;
    }

    /**
     * Gets signature
     *
     * @return string|null
     */
    public function getSignature()
    {
        return $this->container['signature'];
    }

    /**
     * Sets signature
     *
     * @param string|null $signature Signature of the payment and header data. The signature includes the signing certificate, its intermediate CA certificate, and information about the signing algorithm. Detached PKCS #7 signature, base64 encoded as string.
     *
     * @return self
     */
    public function setSignature($signature)
    {
        if (!is_null($signature) && (mb_strlen($signature) > 4000)) {
            throw new \InvalidArgumentException('invalid length for $signature when calling ApplePay., must be smaller than or equal to 4000.');
        }


        if (is_null($signature)) {
            throw new \InvalidArgumentException('non-nullable signature cannot be null');
        }

        $this->container['signature'] = $signature;

        return $this;
    }

    /**
     * Gets version
     *
     * @return string|null
     */
    public function getVersion()
    {
        return $this->container['version'];
    }

    /**
     * Sets version
     *
     * @param string|null $version Specific protocol version supported by Apple. Version information about the payment token. The token uses EC_v1 for ECC-encrypted data, and RSA_v1 for RSA-encrypted data.
     *
     * @return self
     */
    public function setVersion($version)
    {
        if (!is_null($version) && (mb_strlen($version) > 64)) {
            throw new \InvalidArgumentException('invalid length for $version when calling ApplePay., must be smaller than or equal to 64.');
        }


        if (is_null($version)) {
            throw new \InvalidArgumentException('non-nullable version cannot be null');
        }

        $this->container['version'] = $version;

        return $this;
    }

    /**
     * Gets application_data
     *
     * @return string|null
     */
    public function getApplicationData()
    {
        return $this->container['application_data'];
    }

    /**
     * Sets application_data
     *
     * @param string|null $application_data Hash of the applicationData property of the original PKPaymentRequest object. If the value of that property is null, this key is omitted. SHA–256 hash hex encoded as a string.
     *
     * @return self
     */
    public function setApplicationData($application_data)
    {
        if (!is_null($application_data) && (mb_strlen($application_data) > 4000)) {
            throw new \InvalidArgumentException('invalid length for $application_data when calling ApplePay., must be smaller than or equal to 4000.');
        }


        if (is_null($application_data)) {
            throw new \InvalidArgumentException('non-nullable application_data cannot be null');
        }

        $this->container['application_data'] = $application_data;

        return $this;
    }

    /**
     * Gets apple_pay_merchant_id
     *
     * @return string|null
     */
    public function getApplePayMerchantId()
    {
        return $this->container['apple_pay_merchant_id'];
    }

    /**
     * Sets apple_pay_merchant_id
     *
     * @param string|null $apple_pay_merchant_id Unique AppID registered in the Apple portal.
     *
     * @return self
     */
    public function setApplePayMerchantId($apple_pay_merchant_id)
    {
        if (!is_null($apple_pay_merchant_id) && (mb_strlen($apple_pay_merchant_id) > 256)) {
            throw new \InvalidArgumentException('invalid length for $apple_pay_merchant_id when calling ApplePay., must be smaller than or equal to 256.');
        }


        if (is_null($apple_pay_merchant_id)) {
            throw new \InvalidArgumentException('non-nullable apple_pay_merchant_id cannot be null');
        }

        $this->container['apple_pay_merchant_id'] = $apple_pay_merchant_id;

        return $this;
    }

    /**
     * Gets merchant_private_key
     *
     * @return string|null
     */
    public function getMerchantPrivateKey()
    {
        return $this->container['merchant_private_key'];
    }

    /**
     * Sets merchant_private_key
     *
     * @param string|null $merchant_private_key Merchant private key in hex encoded format.
     *
     * @return self
     */
    public function setMerchantPrivateKey($merchant_private_key)
    {
        if (!is_null($merchant_private_key) && (mb_strlen($merchant_private_key) > 256)) {
            throw new \InvalidArgumentException('invalid length for $merchant_private_key when calling ApplePay., must be smaller than or equal to 256.');
        }


        if (is_null($merchant_private_key)) {
            throw new \InvalidArgumentException('non-nullable merchant_private_key cannot be null');
        }

        $this->container['merchant_private_key'] = $merchant_private_key;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


