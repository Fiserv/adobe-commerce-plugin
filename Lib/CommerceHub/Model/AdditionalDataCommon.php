<?php
/**
 * AdditionalDataCommon
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Fiserv\Payments\Lib\CommerceHub
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Payments
 *
 * This API Specification is designed to provide technical guidance required to consume and integrate with our APIs for payment processing.
 *
 * The version of the OpenAPI document: v1.3.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.2.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Fiserv\Payments\Lib\CommerceHub\Model;

use \ArrayAccess;
use \Fiserv\Payments\Lib\CommerceHub\ObjectSerializer;

/**
 * AdditionalDataCommon Class Doc Comment
 *
 * @category Class
 * @description &lt;a href&#x3D;\&quot;../docs?path&#x3D;docs/Resources/Master-Data/Additional-Data.md\&quot;&gt;Common data&lt;/a&gt; passed during a transaction request based on business requirements.
 * @package  Fiserv\Payments\Lib\CommerceHub
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class AdditionalDataCommon implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'AdditionalDataCommon';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'additional_data' => '\Fiserv\Payments\Lib\CommerceHub\Model\AdditionalData',
        'amount_components' => '\Fiserv\Payments\Lib\CommerceHub\Model\AmountComponents',
        'directed_routing' => '\Fiserv\Payments\Lib\CommerceHub\Model\DirectedRouting',
        'sub_merchant' => '\Fiserv\Payments\Lib\CommerceHub\Model\SubMerchant',
        'installments' => '\Fiserv\Payments\Lib\CommerceHub\Model\Installments',
        'private_label' => '\Fiserv\Payments\Lib\CommerceHub\Model\PrivateLabel',
        'custom_fields' => '\Fiserv\Payments\Lib\CommerceHub\Model\KeyValuePair[]',
        'deferred_payments' => '\Fiserv\Payments\Lib\CommerceHub\Model\DeferredPayments',
        'bill_payment_type' => 'string',
        'recurring' => '\Fiserv\Payments\Lib\CommerceHub\Model\Recurring'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'additional_data' => null,
        'amount_components' => null,
        'directed_routing' => null,
        'sub_merchant' => null,
        'installments' => null,
        'private_label' => null,
        'custom_fields' => null,
        'deferred_payments' => null,
        'bill_payment_type' => null,
        'recurring' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'additional_data' => false,
		'amount_components' => false,
		'directed_routing' => false,
		'sub_merchant' => false,
		'installments' => false,
		'private_label' => false,
		'custom_fields' => false,
		'deferred_payments' => false,
		'bill_payment_type' => false,
		'recurring' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'additional_data' => 'additionalData',
        'amount_components' => 'amountComponents',
        'directed_routing' => 'directedRouting',
        'sub_merchant' => 'subMerchant',
        'installments' => 'installments',
        'private_label' => 'privateLabel',
        'custom_fields' => 'customFields',
        'deferred_payments' => 'deferredPayments',
        'bill_payment_type' => 'billPaymentType',
        'recurring' => 'recurring'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'additional_data' => 'setAdditionalData',
        'amount_components' => 'setAmountComponents',
        'directed_routing' => 'setDirectedRouting',
        'sub_merchant' => 'setSubMerchant',
        'installments' => 'setInstallments',
        'private_label' => 'setPrivateLabel',
        'custom_fields' => 'setCustomFields',
        'deferred_payments' => 'setDeferredPayments',
        'bill_payment_type' => 'setBillPaymentType',
        'recurring' => 'setRecurring'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'additional_data' => 'getAdditionalData',
        'amount_components' => 'getAmountComponents',
        'directed_routing' => 'getDirectedRouting',
        'sub_merchant' => 'getSubMerchant',
        'installments' => 'getInstallments',
        'private_label' => 'getPrivateLabel',
        'custom_fields' => 'getCustomFields',
        'deferred_payments' => 'getDeferredPayments',
        'bill_payment_type' => 'getBillPaymentType',
        'recurring' => 'getRecurring'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('additional_data', $data ?? [], null);
        $this->setIfExists('amount_components', $data ?? [], null);
        $this->setIfExists('directed_routing', $data ?? [], null);
        $this->setIfExists('sub_merchant', $data ?? [], null);
        $this->setIfExists('installments', $data ?? [], null);
        $this->setIfExists('private_label', $data ?? [], null);
        $this->setIfExists('custom_fields', $data ?? [], null);
        $this->setIfExists('deferred_payments', $data ?? [], null);
        $this->setIfExists('bill_payment_type', $data ?? [], null);
        $this->setIfExists('recurring', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['bill_payment_type']) && (mb_strlen($this->container['bill_payment_type']) > 11)) {
            $invalidProperties[] = "invalid value for 'bill_payment_type', the character length must be smaller than or equal to 11.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets additional_data
     *
     * @return \Fiserv\Payments\Lib\CommerceHub\Model\AdditionalData|null
     */
    public function getAdditionalData()
    {
        return $this->container['additional_data'];
    }

    /**
     * Sets additional_data
     *
     * @param \Fiserv\Payments\Lib\CommerceHub\Model\AdditionalData|null $additional_data additional_data
     *
     * @return self
     */
    public function setAdditionalData($additional_data)
    {

        if (is_null($additional_data)) {
            throw new \InvalidArgumentException('non-nullable additional_data cannot be null');
        }

        $this->container['additional_data'] = $additional_data;

        return $this;
    }

    /**
     * Gets amount_components
     *
     * @return \Fiserv\Payments\Lib\CommerceHub\Model\AmountComponents|null
     */
    public function getAmountComponents()
    {
        return $this->container['amount_components'];
    }

    /**
     * Sets amount_components
     *
     * @param \Fiserv\Payments\Lib\CommerceHub\Model\AmountComponents|null $amount_components amount_components
     *
     * @return self
     */
    public function setAmountComponents($amount_components)
    {

        if (is_null($amount_components)) {
            throw new \InvalidArgumentException('non-nullable amount_components cannot be null');
        }

        $this->container['amount_components'] = $amount_components;

        return $this;
    }

    /**
     * Gets directed_routing
     *
     * @return \Fiserv\Payments\Lib\CommerceHub\Model\DirectedRouting|null
     */
    public function getDirectedRouting()
    {
        return $this->container['directed_routing'];
    }

    /**
     * Sets directed_routing
     *
     * @param \Fiserv\Payments\Lib\CommerceHub\Model\DirectedRouting|null $directed_routing directed_routing
     *
     * @return self
     */
    public function setDirectedRouting($directed_routing)
    {

        if (is_null($directed_routing)) {
            throw new \InvalidArgumentException('non-nullable directed_routing cannot be null');
        }

        $this->container['directed_routing'] = $directed_routing;

        return $this;
    }

    /**
     * Gets sub_merchant
     *
     * @return \Fiserv\Payments\Lib\CommerceHub\Model\SubMerchant|null
     */
    public function getSubMerchant()
    {
        return $this->container['sub_merchant'];
    }

    /**
     * Sets sub_merchant
     *
     * @param \Fiserv\Payments\Lib\CommerceHub\Model\SubMerchant|null $sub_merchant sub_merchant
     *
     * @return self
     */
    public function setSubMerchant($sub_merchant)
    {

        if (is_null($sub_merchant)) {
            throw new \InvalidArgumentException('non-nullable sub_merchant cannot be null');
        }

        $this->container['sub_merchant'] = $sub_merchant;

        return $this;
    }

    /**
     * Gets installments
     *
     * @return \Fiserv\Payments\Lib\CommerceHub\Model\Installments|null
     */
    public function getInstallments()
    {
        return $this->container['installments'];
    }

    /**
     * Sets installments
     *
     * @param \Fiserv\Payments\Lib\CommerceHub\Model\Installments|null $installments installments
     *
     * @return self
     */
    public function setInstallments($installments)
    {

        if (is_null($installments)) {
            throw new \InvalidArgumentException('non-nullable installments cannot be null');
        }

        $this->container['installments'] = $installments;

        return $this;
    }

    /**
     * Gets private_label
     *
     * @return \Fiserv\Payments\Lib\CommerceHub\Model\PrivateLabel|null
     */
    public function getPrivateLabel()
    {
        return $this->container['private_label'];
    }

    /**
     * Sets private_label
     *
     * @param \Fiserv\Payments\Lib\CommerceHub\Model\PrivateLabel|null $private_label private_label
     *
     * @return self
     */
    public function setPrivateLabel($private_label)
    {

        if (is_null($private_label)) {
            throw new \InvalidArgumentException('non-nullable private_label cannot be null');
        }

        $this->container['private_label'] = $private_label;

        return $this;
    }

    /**
     * Gets custom_fields
     *
     * @return \Fiserv\Payments\Lib\CommerceHub\Model\KeyValuePair[]|null
     */
    public function getCustomFields()
    {
        return $this->container['custom_fields'];
    }

    /**
     * Sets custom_fields
     *
     * @param \Fiserv\Payments\Lib\CommerceHub\Model\KeyValuePair[]|null $custom_fields Used to submit merchant custom values.
     *
     * @return self
     */
    public function setCustomFields($custom_fields)
    {

        if (is_null($custom_fields)) {
            throw new \InvalidArgumentException('non-nullable custom_fields cannot be null');
        }

        $this->container['custom_fields'] = $custom_fields;

        return $this;
    }

    /**
     * Gets deferred_payments
     *
     * @return \Fiserv\Payments\Lib\CommerceHub\Model\DeferredPayments|null
     */
    public function getDeferredPayments()
    {
        return $this->container['deferred_payments'];
    }

    /**
     * Sets deferred_payments
     *
     * @param \Fiserv\Payments\Lib\CommerceHub\Model\DeferredPayments|null $deferred_payments deferred_payments
     *
     * @return self
     */
    public function setDeferredPayments($deferred_payments)
    {

        if (is_null($deferred_payments)) {
            throw new \InvalidArgumentException('non-nullable deferred_payments cannot be null');
        }

        $this->container['deferred_payments'] = $deferred_payments;

        return $this;
    }

    /**
     * Gets bill_payment_type
     *
     * @return string|null
     */
    public function getBillPaymentType()
    {
        return $this->container['bill_payment_type'];
    }

    /**
     * Sets bill_payment_type
     *
     * @param string|null $bill_payment_type Indicates the type of bill payment.  Valid Values: * SINGLE - Single charge not for recurring services or installment plan. * RECURRING - Agreement where charges will occur on a periodic basis. * INSTALLMENT - Single purchase where the cardholder is billed (charged) in installments. * DEFERRED - A charge for an order with a delayed payment for a specified amount of time.
     *
     * @return self
     */
    public function setBillPaymentType($bill_payment_type)
    {
        if (!is_null($bill_payment_type) && (mb_strlen($bill_payment_type) > 11)) {
            throw new \InvalidArgumentException('invalid length for $bill_payment_type when calling AdditionalDataCommon., must be smaller than or equal to 11.');
        }


        if (is_null($bill_payment_type)) {
            throw new \InvalidArgumentException('non-nullable bill_payment_type cannot be null');
        }

        $this->container['bill_payment_type'] = $bill_payment_type;

        return $this;
    }

    /**
     * Gets recurring
     *
     * @return \Fiserv\Payments\Lib\CommerceHub\Model\Recurring|null
     */
    public function getRecurring()
    {
        return $this->container['recurring'];
    }

    /**
     * Sets recurring
     *
     * @param \Fiserv\Payments\Lib\CommerceHub\Model\Recurring|null $recurring recurring
     *
     * @return self
     */
    public function setRecurring($recurring)
    {

        if (is_null($recurring)) {
            throw new \InvalidArgumentException('non-nullable recurring cannot be null');
        }

        $this->container['recurring'] = $recurring;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


