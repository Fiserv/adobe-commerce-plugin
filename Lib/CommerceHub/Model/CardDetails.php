<?php
/**
 * CardDetails
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Fiserv\Payments\Lib\CommerceHub
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Commerce Hub
 *
 * This API Specification is designed to provide technical guidance required to consume and integrate with our APIs for payment processing.
 *
 * The version of the OpenAPI document: v1.24.08
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.3.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Fiserv\Payments\Lib\CommerceHub\Model;

use \ArrayAccess;
use \Fiserv\Payments\Lib\CommerceHub\ObjectSerializer;

/**
 * CardDetails Class Doc Comment
 *
 * @category Class
 * @description &lt;a href&#x3D;\&quot;../docs?path&#x3D;docs/Resources/Master-Data/Card-Details.md\&quot;&gt;Card meta data&lt;/a&gt; details for a for a PaymentCard, PaymentEMV, PaymentTrack or PaymentToken.
 * @package  Fiserv\Payments\Lib\CommerceHub
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class CardDetails implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'CardDetails';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'bin_source' => 'string',
        'record_type' => 'string',
        'low_bin' => 'string',
        'high_bin' => 'string',
        'bin_length' => 'string',
        'bin_detail_pan' => 'string',
        'issuer_bank_name' => 'string',
        'country_code' => 'string',
        'detailed_card_product' => 'string',
        'detailed_card_indicator' => 'string',
        'pin_signature_capability' => 'string',
        'issuer_update_year' => 'string',
        'issuer_update_month' => 'string',
        'issuer_update_day' => 'string',
        'regulator_indicator' => 'string',
        'card_class' => 'string',
        'ebt_state' => 'string',
        'fsa_indicator' => 'string',
        'non_money_transfer_octs_domestic' => 'string',
        'non_money_transfer_octs_cross_border' => 'string',
        'online_gambling_octs_domestic' => 'string',
        'online_gambling_octs_cross_border' => 'string',
        'money_transfer_octs_domestic' => 'string',
        'money_transfer_octs_cross_border' => 'string',
        'fast_funds_domestic_money_transfer' => 'string',
        'fast_funds_cross_border_money_transfer' => 'string',
        'fast_funds_domestic_non_money_transfer' => 'string',
        'fast_funds_cross_border_non_money_transfer' => 'string',
        'fast_funds_domestic_gambling' => 'string',
        'fast_funds_cross_border_gambling' => 'string',
        'prepaid_indicator' => 'string',
        'anonymous_prepaid_indicator' => 'string',
        'product_id' => 'string',
        'visa_product_sub_type' => 'string',
        'visa_large_ticket_indicator' => 'string',
        'account_fund_source' => 'string',
        'pan_length_min' => 'string',
        'pan_length_max' => 'string',
        'token_indicator' => 'string',
        'issuing_network' => 'string',
        'cardholder_billing_currency' => 'string',
        'account_fund_source_subtype' => 'string',
        'b2b_program_id' => 'string',
        'money_send_indicator' => 'string',
        'client_id' => 'string',
        'debit_pinless_indicator' => '\Fiserv\Payments\Lib\CommerceHub\Model\DebitNetworkPinlessDetails[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'bin_source' => null,
        'record_type' => null,
        'low_bin' => null,
        'high_bin' => null,
        'bin_length' => null,
        'bin_detail_pan' => null,
        'issuer_bank_name' => null,
        'country_code' => null,
        'detailed_card_product' => null,
        'detailed_card_indicator' => null,
        'pin_signature_capability' => null,
        'issuer_update_year' => null,
        'issuer_update_month' => null,
        'issuer_update_day' => null,
        'regulator_indicator' => null,
        'card_class' => null,
        'ebt_state' => null,
        'fsa_indicator' => null,
        'non_money_transfer_octs_domestic' => null,
        'non_money_transfer_octs_cross_border' => null,
        'online_gambling_octs_domestic' => null,
        'online_gambling_octs_cross_border' => null,
        'money_transfer_octs_domestic' => null,
        'money_transfer_octs_cross_border' => null,
        'fast_funds_domestic_money_transfer' => null,
        'fast_funds_cross_border_money_transfer' => null,
        'fast_funds_domestic_non_money_transfer' => null,
        'fast_funds_cross_border_non_money_transfer' => null,
        'fast_funds_domestic_gambling' => null,
        'fast_funds_cross_border_gambling' => null,
        'prepaid_indicator' => null,
        'anonymous_prepaid_indicator' => null,
        'product_id' => null,
        'visa_product_sub_type' => null,
        'visa_large_ticket_indicator' => null,
        'account_fund_source' => null,
        'pan_length_min' => null,
        'pan_length_max' => null,
        'token_indicator' => null,
        'issuing_network' => null,
        'cardholder_billing_currency' => null,
        'account_fund_source_subtype' => null,
        'b2b_program_id' => null,
        'money_send_indicator' => null,
        'client_id' => null,
        'debit_pinless_indicator' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'bin_source' => false,
        'record_type' => false,
        'low_bin' => false,
        'high_bin' => false,
        'bin_length' => false,
        'bin_detail_pan' => false,
        'issuer_bank_name' => false,
        'country_code' => false,
        'detailed_card_product' => false,
        'detailed_card_indicator' => false,
        'pin_signature_capability' => false,
        'issuer_update_year' => false,
        'issuer_update_month' => false,
        'issuer_update_day' => false,
        'regulator_indicator' => false,
        'card_class' => false,
        'ebt_state' => false,
        'fsa_indicator' => false,
        'non_money_transfer_octs_domestic' => false,
        'non_money_transfer_octs_cross_border' => false,
        'online_gambling_octs_domestic' => false,
        'online_gambling_octs_cross_border' => false,
        'money_transfer_octs_domestic' => false,
        'money_transfer_octs_cross_border' => false,
        'fast_funds_domestic_money_transfer' => false,
        'fast_funds_cross_border_money_transfer' => false,
        'fast_funds_domestic_non_money_transfer' => false,
        'fast_funds_cross_border_non_money_transfer' => false,
        'fast_funds_domestic_gambling' => false,
        'fast_funds_cross_border_gambling' => false,
        'prepaid_indicator' => false,
        'anonymous_prepaid_indicator' => false,
        'product_id' => false,
        'visa_product_sub_type' => false,
        'visa_large_ticket_indicator' => false,
        'account_fund_source' => false,
        'pan_length_min' => false,
        'pan_length_max' => false,
        'token_indicator' => false,
        'issuing_network' => false,
        'cardholder_billing_currency' => false,
        'account_fund_source_subtype' => false,
        'b2b_program_id' => false,
        'money_send_indicator' => false,
        'client_id' => false,
        'debit_pinless_indicator' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'bin_source' => 'binSource',
        'record_type' => 'recordType',
        'low_bin' => 'lowBin',
        'high_bin' => 'highBin',
        'bin_length' => 'binLength',
        'bin_detail_pan' => 'binDetailPan',
        'issuer_bank_name' => 'issuerBankName',
        'country_code' => 'countryCode',
        'detailed_card_product' => 'detailedCardProduct',
        'detailed_card_indicator' => 'detailedCardIndicator',
        'pin_signature_capability' => 'pinSignatureCapability',
        'issuer_update_year' => 'issuerUpdateYear',
        'issuer_update_month' => 'issuerUpdateMonth',
        'issuer_update_day' => 'issuerUpdateDay',
        'regulator_indicator' => 'regulatorIndicator',
        'card_class' => 'cardClass',
        'ebt_state' => 'ebtState',
        'fsa_indicator' => 'fsaIndicator',
        'non_money_transfer_octs_domestic' => 'nonMoneyTransferOCTsDomestic',
        'non_money_transfer_octs_cross_border' => 'nonMoneyTransferOCTsCrossBorder',
        'online_gambling_octs_domestic' => 'onlineGamblingOCTsDomestic',
        'online_gambling_octs_cross_border' => 'onlineGamblingOCTsCrossBorder',
        'money_transfer_octs_domestic' => 'moneyTransferOCTsDomestic',
        'money_transfer_octs_cross_border' => 'moneyTransferOCTsCrossBorder',
        'fast_funds_domestic_money_transfer' => 'fastFundsDomesticMoneyTransfer',
        'fast_funds_cross_border_money_transfer' => 'fastFundsCrossBorderMoneyTransfer',
        'fast_funds_domestic_non_money_transfer' => 'fastFundsDomesticNonMoneyTransfer',
        'fast_funds_cross_border_non_money_transfer' => 'fastFundsCrossBorderNonMoneyTransfer',
        'fast_funds_domestic_gambling' => 'fastFundsDomesticGambling',
        'fast_funds_cross_border_gambling' => 'fastFundsCrossBorderGambling',
        'prepaid_indicator' => 'prepaidIndicator',
        'anonymous_prepaid_indicator' => 'anonymousPrepaidIndicator',
        'product_id' => 'productId',
        'visa_product_sub_type' => 'visaProductSubType',
        'visa_large_ticket_indicator' => 'visaLargeTicketIndicator',
        'account_fund_source' => 'accountFundSource',
        'pan_length_min' => 'panLengthMin',
        'pan_length_max' => 'panLengthMax',
        'token_indicator' => 'tokenIndicator',
        'issuing_network' => 'issuingNetwork',
        'cardholder_billing_currency' => 'cardholderBillingCurrency',
        'account_fund_source_subtype' => 'accountFundSourceSubtype',
        'b2b_program_id' => 'b2bProgramId',
        'money_send_indicator' => 'moneySendIndicator',
        'client_id' => 'clientId',
        'debit_pinless_indicator' => 'debitPinlessIndicator'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'bin_source' => 'setBinSource',
        'record_type' => 'setRecordType',
        'low_bin' => 'setLowBin',
        'high_bin' => 'setHighBin',
        'bin_length' => 'setBinLength',
        'bin_detail_pan' => 'setBinDetailPan',
        'issuer_bank_name' => 'setIssuerBankName',
        'country_code' => 'setCountryCode',
        'detailed_card_product' => 'setDetailedCardProduct',
        'detailed_card_indicator' => 'setDetailedCardIndicator',
        'pin_signature_capability' => 'setPinSignatureCapability',
        'issuer_update_year' => 'setIssuerUpdateYear',
        'issuer_update_month' => 'setIssuerUpdateMonth',
        'issuer_update_day' => 'setIssuerUpdateDay',
        'regulator_indicator' => 'setRegulatorIndicator',
        'card_class' => 'setCardClass',
        'ebt_state' => 'setEbtState',
        'fsa_indicator' => 'setFsaIndicator',
        'non_money_transfer_octs_domestic' => 'setNonMoneyTransferOctsDomestic',
        'non_money_transfer_octs_cross_border' => 'setNonMoneyTransferOctsCrossBorder',
        'online_gambling_octs_domestic' => 'setOnlineGamblingOctsDomestic',
        'online_gambling_octs_cross_border' => 'setOnlineGamblingOctsCrossBorder',
        'money_transfer_octs_domestic' => 'setMoneyTransferOctsDomestic',
        'money_transfer_octs_cross_border' => 'setMoneyTransferOctsCrossBorder',
        'fast_funds_domestic_money_transfer' => 'setFastFundsDomesticMoneyTransfer',
        'fast_funds_cross_border_money_transfer' => 'setFastFundsCrossBorderMoneyTransfer',
        'fast_funds_domestic_non_money_transfer' => 'setFastFundsDomesticNonMoneyTransfer',
        'fast_funds_cross_border_non_money_transfer' => 'setFastFundsCrossBorderNonMoneyTransfer',
        'fast_funds_domestic_gambling' => 'setFastFundsDomesticGambling',
        'fast_funds_cross_border_gambling' => 'setFastFundsCrossBorderGambling',
        'prepaid_indicator' => 'setPrepaidIndicator',
        'anonymous_prepaid_indicator' => 'setAnonymousPrepaidIndicator',
        'product_id' => 'setProductId',
        'visa_product_sub_type' => 'setVisaProductSubType',
        'visa_large_ticket_indicator' => 'setVisaLargeTicketIndicator',
        'account_fund_source' => 'setAccountFundSource',
        'pan_length_min' => 'setPanLengthMin',
        'pan_length_max' => 'setPanLengthMax',
        'token_indicator' => 'setTokenIndicator',
        'issuing_network' => 'setIssuingNetwork',
        'cardholder_billing_currency' => 'setCardholderBillingCurrency',
        'account_fund_source_subtype' => 'setAccountFundSourceSubtype',
        'b2b_program_id' => 'setB2bProgramId',
        'money_send_indicator' => 'setMoneySendIndicator',
        'client_id' => 'setClientId',
        'debit_pinless_indicator' => 'setDebitPinlessIndicator'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'bin_source' => 'getBinSource',
        'record_type' => 'getRecordType',
        'low_bin' => 'getLowBin',
        'high_bin' => 'getHighBin',
        'bin_length' => 'getBinLength',
        'bin_detail_pan' => 'getBinDetailPan',
        'issuer_bank_name' => 'getIssuerBankName',
        'country_code' => 'getCountryCode',
        'detailed_card_product' => 'getDetailedCardProduct',
        'detailed_card_indicator' => 'getDetailedCardIndicator',
        'pin_signature_capability' => 'getPinSignatureCapability',
        'issuer_update_year' => 'getIssuerUpdateYear',
        'issuer_update_month' => 'getIssuerUpdateMonth',
        'issuer_update_day' => 'getIssuerUpdateDay',
        'regulator_indicator' => 'getRegulatorIndicator',
        'card_class' => 'getCardClass',
        'ebt_state' => 'getEbtState',
        'fsa_indicator' => 'getFsaIndicator',
        'non_money_transfer_octs_domestic' => 'getNonMoneyTransferOctsDomestic',
        'non_money_transfer_octs_cross_border' => 'getNonMoneyTransferOctsCrossBorder',
        'online_gambling_octs_domestic' => 'getOnlineGamblingOctsDomestic',
        'online_gambling_octs_cross_border' => 'getOnlineGamblingOctsCrossBorder',
        'money_transfer_octs_domestic' => 'getMoneyTransferOctsDomestic',
        'money_transfer_octs_cross_border' => 'getMoneyTransferOctsCrossBorder',
        'fast_funds_domestic_money_transfer' => 'getFastFundsDomesticMoneyTransfer',
        'fast_funds_cross_border_money_transfer' => 'getFastFundsCrossBorderMoneyTransfer',
        'fast_funds_domestic_non_money_transfer' => 'getFastFundsDomesticNonMoneyTransfer',
        'fast_funds_cross_border_non_money_transfer' => 'getFastFundsCrossBorderNonMoneyTransfer',
        'fast_funds_domestic_gambling' => 'getFastFundsDomesticGambling',
        'fast_funds_cross_border_gambling' => 'getFastFundsCrossBorderGambling',
        'prepaid_indicator' => 'getPrepaidIndicator',
        'anonymous_prepaid_indicator' => 'getAnonymousPrepaidIndicator',
        'product_id' => 'getProductId',
        'visa_product_sub_type' => 'getVisaProductSubType',
        'visa_large_ticket_indicator' => 'getVisaLargeTicketIndicator',
        'account_fund_source' => 'getAccountFundSource',
        'pan_length_min' => 'getPanLengthMin',
        'pan_length_max' => 'getPanLengthMax',
        'token_indicator' => 'getTokenIndicator',
        'issuing_network' => 'getIssuingNetwork',
        'cardholder_billing_currency' => 'getCardholderBillingCurrency',
        'account_fund_source_subtype' => 'getAccountFundSourceSubtype',
        'b2b_program_id' => 'getB2bProgramId',
        'money_send_indicator' => 'getMoneySendIndicator',
        'client_id' => 'getClientId',
        'debit_pinless_indicator' => 'getDebitPinlessIndicator'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('bin_source', $data ?? [], null);
        $this->setIfExists('record_type', $data ?? [], null);
        $this->setIfExists('low_bin', $data ?? [], null);
        $this->setIfExists('high_bin', $data ?? [], null);
        $this->setIfExists('bin_length', $data ?? [], null);
        $this->setIfExists('bin_detail_pan', $data ?? [], null);
        $this->setIfExists('issuer_bank_name', $data ?? [], null);
        $this->setIfExists('country_code', $data ?? [], null);
        $this->setIfExists('detailed_card_product', $data ?? [], null);
        $this->setIfExists('detailed_card_indicator', $data ?? [], null);
        $this->setIfExists('pin_signature_capability', $data ?? [], null);
        $this->setIfExists('issuer_update_year', $data ?? [], null);
        $this->setIfExists('issuer_update_month', $data ?? [], null);
        $this->setIfExists('issuer_update_day', $data ?? [], null);
        $this->setIfExists('regulator_indicator', $data ?? [], null);
        $this->setIfExists('card_class', $data ?? [], null);
        $this->setIfExists('ebt_state', $data ?? [], null);
        $this->setIfExists('fsa_indicator', $data ?? [], null);
        $this->setIfExists('non_money_transfer_octs_domestic', $data ?? [], null);
        $this->setIfExists('non_money_transfer_octs_cross_border', $data ?? [], null);
        $this->setIfExists('online_gambling_octs_domestic', $data ?? [], null);
        $this->setIfExists('online_gambling_octs_cross_border', $data ?? [], null);
        $this->setIfExists('money_transfer_octs_domestic', $data ?? [], null);
        $this->setIfExists('money_transfer_octs_cross_border', $data ?? [], null);
        $this->setIfExists('fast_funds_domestic_money_transfer', $data ?? [], null);
        $this->setIfExists('fast_funds_cross_border_money_transfer', $data ?? [], null);
        $this->setIfExists('fast_funds_domestic_non_money_transfer', $data ?? [], null);
        $this->setIfExists('fast_funds_cross_border_non_money_transfer', $data ?? [], null);
        $this->setIfExists('fast_funds_domestic_gambling', $data ?? [], null);
        $this->setIfExists('fast_funds_cross_border_gambling', $data ?? [], null);
        $this->setIfExists('prepaid_indicator', $data ?? [], null);
        $this->setIfExists('anonymous_prepaid_indicator', $data ?? [], null);
        $this->setIfExists('product_id', $data ?? [], null);
        $this->setIfExists('visa_product_sub_type', $data ?? [], null);
        $this->setIfExists('visa_large_ticket_indicator', $data ?? [], null);
        $this->setIfExists('account_fund_source', $data ?? [], null);
        $this->setIfExists('pan_length_min', $data ?? [], null);
        $this->setIfExists('pan_length_max', $data ?? [], null);
        $this->setIfExists('token_indicator', $data ?? [], null);
        $this->setIfExists('issuing_network', $data ?? [], null);
        $this->setIfExists('cardholder_billing_currency', $data ?? [], null);
        $this->setIfExists('account_fund_source_subtype', $data ?? [], null);
        $this->setIfExists('b2b_program_id', $data ?? [], null);
        $this->setIfExists('money_send_indicator', $data ?? [], null);
        $this->setIfExists('client_id', $data ?? [], null);
        $this->setIfExists('debit_pinless_indicator', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['bin_source']) && (mb_strlen($this->container['bin_source']) > 30)) {
            $invalidProperties[] = "invalid value for 'bin_source', the character length must be smaller than or equal to 30.";
        }

        if (!is_null($this->container['record_type']) && (mb_strlen($this->container['record_type']) > 10)) {
            $invalidProperties[] = "invalid value for 'record_type', the character length must be smaller than or equal to 10.";
        }

        if (!is_null($this->container['low_bin']) && (mb_strlen($this->container['low_bin']) > 21)) {
            $invalidProperties[] = "invalid value for 'low_bin', the character length must be smaller than or equal to 21.";
        }

        if (!is_null($this->container['high_bin']) && (mb_strlen($this->container['high_bin']) > 21)) {
            $invalidProperties[] = "invalid value for 'high_bin', the character length must be smaller than or equal to 21.";
        }

        if (!is_null($this->container['bin_length']) && (mb_strlen($this->container['bin_length']) > 2)) {
            $invalidProperties[] = "invalid value for 'bin_length', the character length must be smaller than or equal to 2.";
        }

        if (!is_null($this->container['bin_detail_pan']) && (mb_strlen($this->container['bin_detail_pan']) > 2)) {
            $invalidProperties[] = "invalid value for 'bin_detail_pan', the character length must be smaller than or equal to 2.";
        }

        if (!is_null($this->container['issuer_bank_name']) && (mb_strlen($this->container['issuer_bank_name']) > 100)) {
            $invalidProperties[] = "invalid value for 'issuer_bank_name', the character length must be smaller than or equal to 100.";
        }

        if (!is_null($this->container['country_code']) && (mb_strlen($this->container['country_code']) > 3)) {
            $invalidProperties[] = "invalid value for 'country_code', the character length must be smaller than or equal to 3.";
        }

        if (!is_null($this->container['detailed_card_product']) && (mb_strlen($this->container['detailed_card_product']) > 21)) {
            $invalidProperties[] = "invalid value for 'detailed_card_product', the character length must be smaller than or equal to 21.";
        }

        if (!is_null($this->container['detailed_card_indicator']) && (mb_strlen($this->container['detailed_card_indicator']) > 16)) {
            $invalidProperties[] = "invalid value for 'detailed_card_indicator', the character length must be smaller than or equal to 16.";
        }

        if (!is_null($this->container['pin_signature_capability']) && (mb_strlen($this->container['pin_signature_capability']) > 16)) {
            $invalidProperties[] = "invalid value for 'pin_signature_capability', the character length must be smaller than or equal to 16.";
        }

        if (!is_null($this->container['issuer_update_year']) && (mb_strlen($this->container['issuer_update_year']) > 2)) {
            $invalidProperties[] = "invalid value for 'issuer_update_year', the character length must be smaller than or equal to 2.";
        }

        if (!is_null($this->container['issuer_update_month']) && (mb_strlen($this->container['issuer_update_month']) > 2)) {
            $invalidProperties[] = "invalid value for 'issuer_update_month', the character length must be smaller than or equal to 2.";
        }

        if (!is_null($this->container['issuer_update_day']) && (mb_strlen($this->container['issuer_update_day']) > 2)) {
            $invalidProperties[] = "invalid value for 'issuer_update_day', the character length must be smaller than or equal to 2.";
        }

        if (!is_null($this->container['regulator_indicator']) && (mb_strlen($this->container['regulator_indicator']) > 15)) {
            $invalidProperties[] = "invalid value for 'regulator_indicator', the character length must be smaller than or equal to 15.";
        }

        if (!is_null($this->container['card_class']) && (mb_strlen($this->container['card_class']) > 30)) {
            $invalidProperties[] = "invalid value for 'card_class', the character length must be smaller than or equal to 30.";
        }

        if (!is_null($this->container['ebt_state']) && (mb_strlen($this->container['ebt_state']) > 2)) {
            $invalidProperties[] = "invalid value for 'ebt_state', the character length must be smaller than or equal to 2.";
        }

        if (!is_null($this->container['fsa_indicator']) && (mb_strlen($this->container['fsa_indicator']) > 13)) {
            $invalidProperties[] = "invalid value for 'fsa_indicator', the character length must be smaller than or equal to 13.";
        }

        if (!is_null($this->container['non_money_transfer_octs_domestic']) && (mb_strlen($this->container['non_money_transfer_octs_domestic']) > 13)) {
            $invalidProperties[] = "invalid value for 'non_money_transfer_octs_domestic', the character length must be smaller than or equal to 13.";
        }

        if (!is_null($this->container['non_money_transfer_octs_cross_border']) && (mb_strlen($this->container['non_money_transfer_octs_cross_border']) > 13)) {
            $invalidProperties[] = "invalid value for 'non_money_transfer_octs_cross_border', the character length must be smaller than or equal to 13.";
        }

        if (!is_null($this->container['online_gambling_octs_domestic']) && (mb_strlen($this->container['online_gambling_octs_domestic']) > 13)) {
            $invalidProperties[] = "invalid value for 'online_gambling_octs_domestic', the character length must be smaller than or equal to 13.";
        }

        if (!is_null($this->container['online_gambling_octs_cross_border']) && (mb_strlen($this->container['online_gambling_octs_cross_border']) > 13)) {
            $invalidProperties[] = "invalid value for 'online_gambling_octs_cross_border', the character length must be smaller than or equal to 13.";
        }

        if (!is_null($this->container['money_transfer_octs_domestic']) && (mb_strlen($this->container['money_transfer_octs_domestic']) > 13)) {
            $invalidProperties[] = "invalid value for 'money_transfer_octs_domestic', the character length must be smaller than or equal to 13.";
        }

        if (!is_null($this->container['money_transfer_octs_cross_border']) && (mb_strlen($this->container['money_transfer_octs_cross_border']) > 13)) {
            $invalidProperties[] = "invalid value for 'money_transfer_octs_cross_border', the character length must be smaller than or equal to 13.";
        }

        if (!is_null($this->container['fast_funds_domestic_money_transfer']) && (mb_strlen($this->container['fast_funds_domestic_money_transfer']) > 13)) {
            $invalidProperties[] = "invalid value for 'fast_funds_domestic_money_transfer', the character length must be smaller than or equal to 13.";
        }

        if (!is_null($this->container['fast_funds_cross_border_money_transfer']) && (mb_strlen($this->container['fast_funds_cross_border_money_transfer']) > 13)) {
            $invalidProperties[] = "invalid value for 'fast_funds_cross_border_money_transfer', the character length must be smaller than or equal to 13.";
        }

        if (!is_null($this->container['fast_funds_domestic_non_money_transfer']) && (mb_strlen($this->container['fast_funds_domestic_non_money_transfer']) > 13)) {
            $invalidProperties[] = "invalid value for 'fast_funds_domestic_non_money_transfer', the character length must be smaller than or equal to 13.";
        }

        if (!is_null($this->container['fast_funds_cross_border_non_money_transfer']) && (mb_strlen($this->container['fast_funds_cross_border_non_money_transfer']) > 13)) {
            $invalidProperties[] = "invalid value for 'fast_funds_cross_border_non_money_transfer', the character length must be smaller than or equal to 13.";
        }

        if (!is_null($this->container['fast_funds_domestic_gambling']) && (mb_strlen($this->container['fast_funds_domestic_gambling']) > 13)) {
            $invalidProperties[] = "invalid value for 'fast_funds_domestic_gambling', the character length must be smaller than or equal to 13.";
        }

        if (!is_null($this->container['fast_funds_cross_border_gambling']) && (mb_strlen($this->container['fast_funds_cross_border_gambling']) > 13)) {
            $invalidProperties[] = "invalid value for 'fast_funds_cross_border_gambling', the character length must be smaller than or equal to 13.";
        }

        if (!is_null($this->container['prepaid_indicator']) && (mb_strlen($this->container['prepaid_indicator']) > 13)) {
            $invalidProperties[] = "invalid value for 'prepaid_indicator', the character length must be smaller than or equal to 13.";
        }

        if (!is_null($this->container['anonymous_prepaid_indicator']) && (mb_strlen($this->container['anonymous_prepaid_indicator']) > 26)) {
            $invalidProperties[] = "invalid value for 'anonymous_prepaid_indicator', the character length must be smaller than or equal to 26.";
        }

        if (!is_null($this->container['product_id']) && (mb_strlen($this->container['product_id']) > 5)) {
            $invalidProperties[] = "invalid value for 'product_id', the character length must be smaller than or equal to 5.";
        }

        if (!is_null($this->container['visa_product_sub_type']) && (mb_strlen($this->container['visa_product_sub_type']) > 2)) {
            $invalidProperties[] = "invalid value for 'visa_product_sub_type', the character length must be smaller than or equal to 2.";
        }

        if (!is_null($this->container['visa_large_ticket_indicator']) && (mb_strlen($this->container['visa_large_ticket_indicator']) > 13)) {
            $invalidProperties[] = "invalid value for 'visa_large_ticket_indicator', the character length must be smaller than or equal to 13.";
        }

        if (!is_null($this->container['account_fund_source']) && (mb_strlen($this->container['account_fund_source']) > 15)) {
            $invalidProperties[] = "invalid value for 'account_fund_source', the character length must be smaller than or equal to 15.";
        }

        if (!is_null($this->container['pan_length_min']) && (mb_strlen($this->container['pan_length_min']) > 2)) {
            $invalidProperties[] = "invalid value for 'pan_length_min', the character length must be smaller than or equal to 2.";
        }

        if (!is_null($this->container['pan_length_max']) && (mb_strlen($this->container['pan_length_max']) > 2)) {
            $invalidProperties[] = "invalid value for 'pan_length_max', the character length must be smaller than or equal to 2.";
        }

        if (!is_null($this->container['token_indicator']) && (mb_strlen($this->container['token_indicator']) > 13)) {
            $invalidProperties[] = "invalid value for 'token_indicator', the character length must be smaller than or equal to 13.";
        }

        if (!is_null($this->container['issuing_network']) && (mb_strlen($this->container['issuing_network']) > 10)) {
            $invalidProperties[] = "invalid value for 'issuing_network', the character length must be smaller than or equal to 10.";
        }

        if (!is_null($this->container['cardholder_billing_currency']) && (mb_strlen($this->container['cardholder_billing_currency']) > 3)) {
            $invalidProperties[] = "invalid value for 'cardholder_billing_currency', the character length must be smaller than or equal to 3.";
        }

        if (!is_null($this->container['account_fund_source_subtype']) && (mb_strlen($this->container['account_fund_source_subtype']) > 22)) {
            $invalidProperties[] = "invalid value for 'account_fund_source_subtype', the character length must be smaller than or equal to 22.";
        }

        if (!is_null($this->container['b2b_program_id']) && (mb_strlen($this->container['b2b_program_id']) > 15)) {
            $invalidProperties[] = "invalid value for 'b2b_program_id', the character length must be smaller than or equal to 15.";
        }

        if (!is_null($this->container['money_send_indicator']) && (mb_strlen($this->container['money_send_indicator']) > 25)) {
            $invalidProperties[] = "invalid value for 'money_send_indicator', the character length must be smaller than or equal to 25.";
        }

        if (!is_null($this->container['client_id']) && (mb_strlen($this->container['client_id']) > 64)) {
            $invalidProperties[] = "invalid value for 'client_id', the character length must be smaller than or equal to 64.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets bin_source
     *
     * @return string|null
     */
    public function getBinSource()
    {
        return $this->container['bin_source'];
    }

    /**
     * Sets bin_source
     *
     * @param string|null $bin_source Categorizes the source of the BIN record.
     *
     * @return self
     */
    public function setBinSource($bin_source)
    {
        if (is_null($bin_source)) {
            throw new \InvalidArgumentException('non-nullable bin_source cannot be null');
        }
        if ((mb_strlen($bin_source) > 30)) {
            throw new \InvalidArgumentException('invalid length for $bin_source when calling CardDetails., must be smaller than or equal to 30.');
        }

        $this->container['bin_source'] = $bin_source;

        return $this;
    }

    /**
     * Gets record_type
     *
     * @return string|null
     */
    public function getRecordType()
    {
        return $this->container['record_type'];
    }

    /**
     * Sets record_type
     *
     * @param string|null $record_type Identifies a detail record type
     *
     * @return self
     */
    public function setRecordType($record_type)
    {
        if (is_null($record_type)) {
            throw new \InvalidArgumentException('non-nullable record_type cannot be null');
        }
        if ((mb_strlen($record_type) > 10)) {
            throw new \InvalidArgumentException('invalid length for $record_type when calling CardDetails., must be smaller than or equal to 10.');
        }

        $this->container['record_type'] = $record_type;

        return $this;
    }

    /**
     * Gets low_bin
     *
     * @return string|null
     */
    public function getLowBin()
    {
        return $this->container['low_bin'];
    }

    /**
     * Sets low_bin
     *
     * @param string|null $low_bin This field contains the low BIN value of the BIN range.
     *
     * @return self
     */
    public function setLowBin($low_bin)
    {
        if (is_null($low_bin)) {
            throw new \InvalidArgumentException('non-nullable low_bin cannot be null');
        }
        if ((mb_strlen($low_bin) > 21)) {
            throw new \InvalidArgumentException('invalid length for $low_bin when calling CardDetails., must be smaller than or equal to 21.');
        }

        $this->container['low_bin'] = $low_bin;

        return $this;
    }

    /**
     * Gets high_bin
     *
     * @return string|null
     */
    public function getHighBin()
    {
        return $this->container['high_bin'];
    }

    /**
     * Sets high_bin
     *
     * @param string|null $high_bin This field contains the high BIN value of the BIN range.
     *
     * @return self
     */
    public function setHighBin($high_bin)
    {
        if (is_null($high_bin)) {
            throw new \InvalidArgumentException('non-nullable high_bin cannot be null');
        }
        if ((mb_strlen($high_bin) > 21)) {
            throw new \InvalidArgumentException('invalid length for $high_bin when calling CardDetails., must be smaller than or equal to 21.');
        }

        $this->container['high_bin'] = $high_bin;

        return $this;
    }

    /**
     * Gets bin_length
     *
     * @return string|null
     */
    public function getBinLength()
    {
        return $this->container['bin_length'];
    }

    /**
     * Sets bin_length
     *
     * @param string|null $bin_length Length of the BIN.
     *
     * @return self
     */
    public function setBinLength($bin_length)
    {
        if (is_null($bin_length)) {
            throw new \InvalidArgumentException('non-nullable bin_length cannot be null');
        }
        if ((mb_strlen($bin_length) > 2)) {
            throw new \InvalidArgumentException('invalid length for $bin_length when calling CardDetails., must be smaller than or equal to 2.');
        }

        $this->container['bin_length'] = $bin_length;

        return $this;
    }

    /**
     * Gets bin_detail_pan
     *
     * @return string|null
     */
    public function getBinDetailPan()
    {
        return $this->container['bin_detail_pan'];
    }

    /**
     * Sets bin_detail_pan
     *
     * @param string|null $bin_detail_pan Displays the primary PAN length.
     *
     * @return self
     */
    public function setBinDetailPan($bin_detail_pan)
    {
        if (is_null($bin_detail_pan)) {
            throw new \InvalidArgumentException('non-nullable bin_detail_pan cannot be null');
        }
        if ((mb_strlen($bin_detail_pan) > 2)) {
            throw new \InvalidArgumentException('invalid length for $bin_detail_pan when calling CardDetails., must be smaller than or equal to 2.');
        }

        $this->container['bin_detail_pan'] = $bin_detail_pan;

        return $this;
    }

    /**
     * Gets issuer_bank_name
     *
     * @return string|null
     */
    public function getIssuerBankName()
    {
        return $this->container['issuer_bank_name'];
    }

    /**
     * Sets issuer_bank_name
     *
     * @param string|null $issuer_bank_name Issuer bank name for the BIN.
     *
     * @return self
     */
    public function setIssuerBankName($issuer_bank_name)
    {
        if (is_null($issuer_bank_name)) {
            throw new \InvalidArgumentException('non-nullable issuer_bank_name cannot be null');
        }
        if ((mb_strlen($issuer_bank_name) > 100)) {
            throw new \InvalidArgumentException('invalid length for $issuer_bank_name when calling CardDetails., must be smaller than or equal to 100.');
        }

        $this->container['issuer_bank_name'] = $issuer_bank_name;

        return $this;
    }

    /**
     * Gets country_code
     *
     * @return string|null
     */
    public function getCountryCode()
    {
        return $this->container['country_code'];
    }

    /**
     * Sets country_code
     *
     * @param string|null $country_code <a href=\"../docs?path=docs/Resources/Master-Data/Country-Code.md\">Country code</a> in ISO-3166-1 alpha-3 format.
     *
     * @return self
     */
    public function setCountryCode($country_code)
    {
        if (is_null($country_code)) {
            throw new \InvalidArgumentException('non-nullable country_code cannot be null');
        }
        if ((mb_strlen($country_code) > 3)) {
            throw new \InvalidArgumentException('invalid length for $country_code when calling CardDetails., must be smaller than or equal to 3.');
        }

        $this->container['country_code'] = $country_code;

        return $this;
    }

    /**
     * Gets detailed_card_product
     *
     * @return string|null
     */
    public function getDetailedCardProduct()
    {
        return $this->container['detailed_card_product'];
    }

    /**
     * Sets detailed_card_product
     *
     * @param string|null $detailed_card_product Identifies the specific card network.
     *
     * @return self
     */
    public function setDetailedCardProduct($detailed_card_product)
    {
        if (is_null($detailed_card_product)) {
            throw new \InvalidArgumentException('non-nullable detailed_card_product cannot be null');
        }
        if ((mb_strlen($detailed_card_product) > 21)) {
            throw new \InvalidArgumentException('invalid length for $detailed_card_product when calling CardDetails., must be smaller than or equal to 21.');
        }

        $this->container['detailed_card_product'] = $detailed_card_product;

        return $this;
    }

    /**
     * Gets detailed_card_indicator
     *
     * @return string|null
     */
    public function getDetailedCardIndicator()
    {
        return $this->container['detailed_card_indicator'];
    }

    /**
     * Sets detailed_card_indicator
     *
     * @param string|null $detailed_card_indicator Identifies the type of credit or debit card.
     *
     * @return self
     */
    public function setDetailedCardIndicator($detailed_card_indicator)
    {
        if (is_null($detailed_card_indicator)) {
            throw new \InvalidArgumentException('non-nullable detailed_card_indicator cannot be null');
        }
        if ((mb_strlen($detailed_card_indicator) > 16)) {
            throw new \InvalidArgumentException('invalid length for $detailed_card_indicator when calling CardDetails., must be smaller than or equal to 16.');
        }

        $this->container['detailed_card_indicator'] = $detailed_card_indicator;

        return $this;
    }

    /**
     * Gets pin_signature_capability
     *
     * @return string|null
     */
    public function getPinSignatureCapability()
    {
        return $this->container['pin_signature_capability'];
    }

    /**
     * Sets pin_signature_capability
     *
     * @param string|null $pin_signature_capability Identifies the card PIN/Signature capability.
     *
     * @return self
     */
    public function setPinSignatureCapability($pin_signature_capability)
    {
        if (is_null($pin_signature_capability)) {
            throw new \InvalidArgumentException('non-nullable pin_signature_capability cannot be null');
        }
        if ((mb_strlen($pin_signature_capability) > 16)) {
            throw new \InvalidArgumentException('invalid length for $pin_signature_capability when calling CardDetails., must be smaller than or equal to 16.');
        }

        $this->container['pin_signature_capability'] = $pin_signature_capability;

        return $this;
    }

    /**
     * Gets issuer_update_year
     *
     * @return string|null
     */
    public function getIssuerUpdateYear()
    {
        return $this->container['issuer_update_year'];
    }

    /**
     * Sets issuer_update_year
     *
     * @param string|null $issuer_update_year The year the BIN record was last updated.
     *
     * @return self
     */
    public function setIssuerUpdateYear($issuer_update_year)
    {
        if (is_null($issuer_update_year)) {
            throw new \InvalidArgumentException('non-nullable issuer_update_year cannot be null');
        }
        if ((mb_strlen($issuer_update_year) > 2)) {
            throw new \InvalidArgumentException('invalid length for $issuer_update_year when calling CardDetails., must be smaller than or equal to 2.');
        }

        $this->container['issuer_update_year'] = $issuer_update_year;

        return $this;
    }

    /**
     * Gets issuer_update_month
     *
     * @return string|null
     */
    public function getIssuerUpdateMonth()
    {
        return $this->container['issuer_update_month'];
    }

    /**
     * Sets issuer_update_month
     *
     * @param string|null $issuer_update_month The month the BIN record was last updated.
     *
     * @return self
     */
    public function setIssuerUpdateMonth($issuer_update_month)
    {
        if (is_null($issuer_update_month)) {
            throw new \InvalidArgumentException('non-nullable issuer_update_month cannot be null');
        }
        if ((mb_strlen($issuer_update_month) > 2)) {
            throw new \InvalidArgumentException('invalid length for $issuer_update_month when calling CardDetails., must be smaller than or equal to 2.');
        }

        $this->container['issuer_update_month'] = $issuer_update_month;

        return $this;
    }

    /**
     * Gets issuer_update_day
     *
     * @return string|null
     */
    public function getIssuerUpdateDay()
    {
        return $this->container['issuer_update_day'];
    }

    /**
     * Sets issuer_update_day
     *
     * @param string|null $issuer_update_day The day the BIN record was last updated.
     *
     * @return self
     */
    public function setIssuerUpdateDay($issuer_update_day)
    {
        if (is_null($issuer_update_day)) {
            throw new \InvalidArgumentException('non-nullable issuer_update_day cannot be null');
        }
        if ((mb_strlen($issuer_update_day) > 2)) {
            throw new \InvalidArgumentException('invalid length for $issuer_update_day when calling CardDetails., must be smaller than or equal to 2.');
        }

        $this->container['issuer_update_day'] = $issuer_update_day;

        return $this;
    }

    /**
     * Gets regulator_indicator
     *
     * @return string|null
     */
    public function getRegulatorIndicator()
    {
        return $this->container['regulator_indicator'];
    }

    /**
     * Sets regulator_indicator
     *
     * @param string|null $regulator_indicator Identifies if the card is non-regulated or regulated. Applies to US issued cards only (Visa, Mastercard, and Discover).
     *
     * @return self
     */
    public function setRegulatorIndicator($regulator_indicator)
    {
        if (is_null($regulator_indicator)) {
            throw new \InvalidArgumentException('non-nullable regulator_indicator cannot be null');
        }
        if ((mb_strlen($regulator_indicator) > 15)) {
            throw new \InvalidArgumentException('invalid length for $regulator_indicator when calling CardDetails., must be smaller than or equal to 15.');
        }

        $this->container['regulator_indicator'] = $regulator_indicator;

        return $this;
    }

    /**
     * Gets card_class
     *
     * @return string|null
     */
    public function getCardClass()
    {
        return $this->container['card_class'];
    }

    /**
     * Sets card_class
     *
     * @param string|null $card_class Categorizes the BIN as a Business card, Corporate T&E card, Purchase card or Consumer card.
     *
     * @return self
     */
    public function setCardClass($card_class)
    {
        if (is_null($card_class)) {
            throw new \InvalidArgumentException('non-nullable card_class cannot be null');
        }
        if ((mb_strlen($card_class) > 30)) {
            throw new \InvalidArgumentException('invalid length for $card_class when calling CardDetails., must be smaller than or equal to 30.');
        }

        $this->container['card_class'] = $card_class;

        return $this;
    }

    /**
     * Gets ebt_state
     *
     * @return string|null
     */
    public function getEbtState()
    {
        return $this->container['ebt_state'];
    }

    /**
     * Sets ebt_state
     *
     * @param string|null $ebt_state This is the EBT State. Will only be present if EBT capable. Information originates from the debit network.
     *
     * @return self
     */
    public function setEbtState($ebt_state)
    {
        if (is_null($ebt_state)) {
            throw new \InvalidArgumentException('non-nullable ebt_state cannot be null');
        }
        if ((mb_strlen($ebt_state) > 2)) {
            throw new \InvalidArgumentException('invalid length for $ebt_state when calling CardDetails., must be smaller than or equal to 2.');
        }

        $this->container['ebt_state'] = $ebt_state;

        return $this;
    }

    /**
     * Gets fsa_indicator
     *
     * @return string|null
     */
    public function getFsaIndicator()
    {
        return $this->container['fsa_indicator'];
    }

    /**
     * Sets fsa_indicator
     *
     * @param string|null $fsa_indicator FSA/HSA (Flexible Spending Account / Health Savings Account) indicator, which denotes prepaid card program in the US that permits use of funds to pay for qualified out of pocket medical expenses.
     *
     * @return self
     */
    public function setFsaIndicator($fsa_indicator)
    {
        if (is_null($fsa_indicator)) {
            throw new \InvalidArgumentException('non-nullable fsa_indicator cannot be null');
        }
        if ((mb_strlen($fsa_indicator) > 13)) {
            throw new \InvalidArgumentException('invalid length for $fsa_indicator when calling CardDetails., must be smaller than or equal to 13.');
        }

        $this->container['fsa_indicator'] = $fsa_indicator;

        return $this;
    }

    /**
     * Gets non_money_transfer_octs_domestic
     *
     * @return string|null
     */
    public function getNonMoneyTransferOctsDomestic()
    {
        return $this->container['non_money_transfer_octs_domestic'];
    }

    /**
     * Sets non_money_transfer_octs_domestic
     *
     * @param string|null $non_money_transfer_octs_domestic Indicates if domestic non-money transfer OCTs are supported. Visa Only.
     *
     * @return self
     */
    public function setNonMoneyTransferOctsDomestic($non_money_transfer_octs_domestic)
    {
        if (is_null($non_money_transfer_octs_domestic)) {
            throw new \InvalidArgumentException('non-nullable non_money_transfer_octs_domestic cannot be null');
        }
        if ((mb_strlen($non_money_transfer_octs_domestic) > 13)) {
            throw new \InvalidArgumentException('invalid length for $non_money_transfer_octs_domestic when calling CardDetails., must be smaller than or equal to 13.');
        }

        $this->container['non_money_transfer_octs_domestic'] = $non_money_transfer_octs_domestic;

        return $this;
    }

    /**
     * Gets non_money_transfer_octs_cross_border
     *
     * @return string|null
     */
    public function getNonMoneyTransferOctsCrossBorder()
    {
        return $this->container['non_money_transfer_octs_cross_border'];
    }

    /**
     * Sets non_money_transfer_octs_cross_border
     *
     * @param string|null $non_money_transfer_octs_cross_border Indicates if cross-border non-money transfer OCTs are supported. Visa Only.
     *
     * @return self
     */
    public function setNonMoneyTransferOctsCrossBorder($non_money_transfer_octs_cross_border)
    {
        if (is_null($non_money_transfer_octs_cross_border)) {
            throw new \InvalidArgumentException('non-nullable non_money_transfer_octs_cross_border cannot be null');
        }
        if ((mb_strlen($non_money_transfer_octs_cross_border) > 13)) {
            throw new \InvalidArgumentException('invalid length for $non_money_transfer_octs_cross_border when calling CardDetails., must be smaller than or equal to 13.');
        }

        $this->container['non_money_transfer_octs_cross_border'] = $non_money_transfer_octs_cross_border;

        return $this;
    }

    /**
     * Gets online_gambling_octs_domestic
     *
     * @return string|null
     */
    public function getOnlineGamblingOctsDomestic()
    {
        return $this->container['online_gambling_octs_domestic'];
    }

    /**
     * Sets online_gambling_octs_domestic
     *
     * @param string|null $online_gambling_octs_domestic Indicates if domestic online gambling OCTs are supported. Visa Only.
     *
     * @return self
     */
    public function setOnlineGamblingOctsDomestic($online_gambling_octs_domestic)
    {
        if (is_null($online_gambling_octs_domestic)) {
            throw new \InvalidArgumentException('non-nullable online_gambling_octs_domestic cannot be null');
        }
        if ((mb_strlen($online_gambling_octs_domestic) > 13)) {
            throw new \InvalidArgumentException('invalid length for $online_gambling_octs_domestic when calling CardDetails., must be smaller than or equal to 13.');
        }

        $this->container['online_gambling_octs_domestic'] = $online_gambling_octs_domestic;

        return $this;
    }

    /**
     * Gets online_gambling_octs_cross_border
     *
     * @return string|null
     */
    public function getOnlineGamblingOctsCrossBorder()
    {
        return $this->container['online_gambling_octs_cross_border'];
    }

    /**
     * Sets online_gambling_octs_cross_border
     *
     * @param string|null $online_gambling_octs_cross_border Indicates if cross-border online gambling OCTs are supported. Visa Only.
     *
     * @return self
     */
    public function setOnlineGamblingOctsCrossBorder($online_gambling_octs_cross_border)
    {
        if (is_null($online_gambling_octs_cross_border)) {
            throw new \InvalidArgumentException('non-nullable online_gambling_octs_cross_border cannot be null');
        }
        if ((mb_strlen($online_gambling_octs_cross_border) > 13)) {
            throw new \InvalidArgumentException('invalid length for $online_gambling_octs_cross_border when calling CardDetails., must be smaller than or equal to 13.');
        }

        $this->container['online_gambling_octs_cross_border'] = $online_gambling_octs_cross_border;

        return $this;
    }

    /**
     * Gets money_transfer_octs_domestic
     *
     * @return string|null
     */
    public function getMoneyTransferOctsDomestic()
    {
        return $this->container['money_transfer_octs_domestic'];
    }

    /**
     * Sets money_transfer_octs_domestic
     *
     * @param string|null $money_transfer_octs_domestic Indicates if domestic money transfer OCTs are supported. Visa Only.
     *
     * @return self
     */
    public function setMoneyTransferOctsDomestic($money_transfer_octs_domestic)
    {
        if (is_null($money_transfer_octs_domestic)) {
            throw new \InvalidArgumentException('non-nullable money_transfer_octs_domestic cannot be null');
        }
        if ((mb_strlen($money_transfer_octs_domestic) > 13)) {
            throw new \InvalidArgumentException('invalid length for $money_transfer_octs_domestic when calling CardDetails., must be smaller than or equal to 13.');
        }

        $this->container['money_transfer_octs_domestic'] = $money_transfer_octs_domestic;

        return $this;
    }

    /**
     * Gets money_transfer_octs_cross_border
     *
     * @return string|null
     */
    public function getMoneyTransferOctsCrossBorder()
    {
        return $this->container['money_transfer_octs_cross_border'];
    }

    /**
     * Sets money_transfer_octs_cross_border
     *
     * @param string|null $money_transfer_octs_cross_border Indicates if cross-border money transfer OCTs are supported. Visa Only.
     *
     * @return self
     */
    public function setMoneyTransferOctsCrossBorder($money_transfer_octs_cross_border)
    {
        if (is_null($money_transfer_octs_cross_border)) {
            throw new \InvalidArgumentException('non-nullable money_transfer_octs_cross_border cannot be null');
        }
        if ((mb_strlen($money_transfer_octs_cross_border) > 13)) {
            throw new \InvalidArgumentException('invalid length for $money_transfer_octs_cross_border when calling CardDetails., must be smaller than or equal to 13.');
        }

        $this->container['money_transfer_octs_cross_border'] = $money_transfer_octs_cross_border;

        return $this;
    }

    /**
     * Gets fast_funds_domestic_money_transfer
     *
     * @return string|null
     */
    public function getFastFundsDomesticMoneyTransfer()
    {
        return $this->container['fast_funds_domestic_money_transfer'];
    }

    /**
     * Sets fast_funds_domestic_money_transfer
     *
     * @param string|null $fast_funds_domestic_money_transfer Indicates if fast funds is supported for domestic money transfer OCTs. Visa Only.
     *
     * @return self
     */
    public function setFastFundsDomesticMoneyTransfer($fast_funds_domestic_money_transfer)
    {
        if (is_null($fast_funds_domestic_money_transfer)) {
            throw new \InvalidArgumentException('non-nullable fast_funds_domestic_money_transfer cannot be null');
        }
        if ((mb_strlen($fast_funds_domestic_money_transfer) > 13)) {
            throw new \InvalidArgumentException('invalid length for $fast_funds_domestic_money_transfer when calling CardDetails., must be smaller than or equal to 13.');
        }

        $this->container['fast_funds_domestic_money_transfer'] = $fast_funds_domestic_money_transfer;

        return $this;
    }

    /**
     * Gets fast_funds_cross_border_money_transfer
     *
     * @return string|null
     */
    public function getFastFundsCrossBorderMoneyTransfer()
    {
        return $this->container['fast_funds_cross_border_money_transfer'];
    }

    /**
     * Sets fast_funds_cross_border_money_transfer
     *
     * @param string|null $fast_funds_cross_border_money_transfer Indicates if fast funds is supported for cross-border money transfer OCTs. Visa Only.
     *
     * @return self
     */
    public function setFastFundsCrossBorderMoneyTransfer($fast_funds_cross_border_money_transfer)
    {
        if (is_null($fast_funds_cross_border_money_transfer)) {
            throw new \InvalidArgumentException('non-nullable fast_funds_cross_border_money_transfer cannot be null');
        }
        if ((mb_strlen($fast_funds_cross_border_money_transfer) > 13)) {
            throw new \InvalidArgumentException('invalid length for $fast_funds_cross_border_money_transfer when calling CardDetails., must be smaller than or equal to 13.');
        }

        $this->container['fast_funds_cross_border_money_transfer'] = $fast_funds_cross_border_money_transfer;

        return $this;
    }

    /**
     * Gets fast_funds_domestic_non_money_transfer
     *
     * @return string|null
     */
    public function getFastFundsDomesticNonMoneyTransfer()
    {
        return $this->container['fast_funds_domestic_non_money_transfer'];
    }

    /**
     * Sets fast_funds_domestic_non_money_transfer
     *
     * @param string|null $fast_funds_domestic_non_money_transfer Indicates if fast funds is supported for domestic non-money transfer OCTs. Visa Only.
     *
     * @return self
     */
    public function setFastFundsDomesticNonMoneyTransfer($fast_funds_domestic_non_money_transfer)
    {
        if (is_null($fast_funds_domestic_non_money_transfer)) {
            throw new \InvalidArgumentException('non-nullable fast_funds_domestic_non_money_transfer cannot be null');
        }
        if ((mb_strlen($fast_funds_domestic_non_money_transfer) > 13)) {
            throw new \InvalidArgumentException('invalid length for $fast_funds_domestic_non_money_transfer when calling CardDetails., must be smaller than or equal to 13.');
        }

        $this->container['fast_funds_domestic_non_money_transfer'] = $fast_funds_domestic_non_money_transfer;

        return $this;
    }

    /**
     * Gets fast_funds_cross_border_non_money_transfer
     *
     * @return string|null
     */
    public function getFastFundsCrossBorderNonMoneyTransfer()
    {
        return $this->container['fast_funds_cross_border_non_money_transfer'];
    }

    /**
     * Sets fast_funds_cross_border_non_money_transfer
     *
     * @param string|null $fast_funds_cross_border_non_money_transfer Indicates if fast funds is supported for cross-border non-money transfer OCTs. Visa Only.
     *
     * @return self
     */
    public function setFastFundsCrossBorderNonMoneyTransfer($fast_funds_cross_border_non_money_transfer)
    {
        if (is_null($fast_funds_cross_border_non_money_transfer)) {
            throw new \InvalidArgumentException('non-nullable fast_funds_cross_border_non_money_transfer cannot be null');
        }
        if ((mb_strlen($fast_funds_cross_border_non_money_transfer) > 13)) {
            throw new \InvalidArgumentException('invalid length for $fast_funds_cross_border_non_money_transfer when calling CardDetails., must be smaller than or equal to 13.');
        }

        $this->container['fast_funds_cross_border_non_money_transfer'] = $fast_funds_cross_border_non_money_transfer;

        return $this;
    }

    /**
     * Gets fast_funds_domestic_gambling
     *
     * @return string|null
     */
    public function getFastFundsDomesticGambling()
    {
        return $this->container['fast_funds_domestic_gambling'];
    }

    /**
     * Sets fast_funds_domestic_gambling
     *
     * @param string|null $fast_funds_domestic_gambling Indicates if fast funds is supported for domestic gambling OCTs. Visa Only.
     *
     * @return self
     */
    public function setFastFundsDomesticGambling($fast_funds_domestic_gambling)
    {
        if (is_null($fast_funds_domestic_gambling)) {
            throw new \InvalidArgumentException('non-nullable fast_funds_domestic_gambling cannot be null');
        }
        if ((mb_strlen($fast_funds_domestic_gambling) > 13)) {
            throw new \InvalidArgumentException('invalid length for $fast_funds_domestic_gambling when calling CardDetails., must be smaller than or equal to 13.');
        }

        $this->container['fast_funds_domestic_gambling'] = $fast_funds_domestic_gambling;

        return $this;
    }

    /**
     * Gets fast_funds_cross_border_gambling
     *
     * @return string|null
     */
    public function getFastFundsCrossBorderGambling()
    {
        return $this->container['fast_funds_cross_border_gambling'];
    }

    /**
     * Sets fast_funds_cross_border_gambling
     *
     * @param string|null $fast_funds_cross_border_gambling Indicates if fast funds is supported for cross-border gambling OCTs. Visa Only.
     *
     * @return self
     */
    public function setFastFundsCrossBorderGambling($fast_funds_cross_border_gambling)
    {
        if (is_null($fast_funds_cross_border_gambling)) {
            throw new \InvalidArgumentException('non-nullable fast_funds_cross_border_gambling cannot be null');
        }
        if ((mb_strlen($fast_funds_cross_border_gambling) > 13)) {
            throw new \InvalidArgumentException('invalid length for $fast_funds_cross_border_gambling when calling CardDetails., must be smaller than or equal to 13.');
        }

        $this->container['fast_funds_cross_border_gambling'] = $fast_funds_cross_border_gambling;

        return $this;
    }

    /**
     * Gets prepaid_indicator
     *
     * @return string|null
     */
    public function getPrepaidIndicator()
    {
        return $this->container['prepaid_indicator'];
    }

    /**
     * Sets prepaid_indicator
     *
     * @param string|null $prepaid_indicator Indicates whether the card is prepaid. For Visa, MasterCard, Amex, Discover, and UnionPay.
     *
     * @return self
     */
    public function setPrepaidIndicator($prepaid_indicator)
    {
        if (is_null($prepaid_indicator)) {
            throw new \InvalidArgumentException('non-nullable prepaid_indicator cannot be null');
        }
        if ((mb_strlen($prepaid_indicator) > 13)) {
            throw new \InvalidArgumentException('invalid length for $prepaid_indicator when calling CardDetails., must be smaller than or equal to 13.');
        }

        $this->container['prepaid_indicator'] = $prepaid_indicator;

        return $this;
    }

    /**
     * Gets anonymous_prepaid_indicator
     *
     * @return string|null
     */
    public function getAnonymousPrepaidIndicator()
    {
        return $this->container['anonymous_prepaid_indicator'];
    }

    /**
     * Sets anonymous_prepaid_indicator
     *
     * @param string|null $anonymous_prepaid_indicator Identifies whether Anonymous Prepaid is supported, like AMLD5 (Anti-Money Laundering Directive) compliant, non-AMLD5 compliant, or non-anonymous prepaid programs / not a prepaid program. Mastercard and UnionPay Only.
     *
     * @return self
     */
    public function setAnonymousPrepaidIndicator($anonymous_prepaid_indicator)
    {
        if (is_null($anonymous_prepaid_indicator)) {
            throw new \InvalidArgumentException('non-nullable anonymous_prepaid_indicator cannot be null');
        }
        if ((mb_strlen($anonymous_prepaid_indicator) > 26)) {
            throw new \InvalidArgumentException('invalid length for $anonymous_prepaid_indicator when calling CardDetails., must be smaller than or equal to 26.');
        }

        $this->container['anonymous_prepaid_indicator'] = $anonymous_prepaid_indicator;

        return $this;
    }

    /**
     * Gets product_id
     *
     * @return string|null
     */
    public function getProductId()
    {
        return $this->container['product_id'];
    }

    /**
     * Sets product_id
     *
     * @param string|null $product_id Indicates card product sub categories (Purchase Card, Business Card, etc.) for Visa, Mastercard, Discover or Private Label. Refer to BIN specs for valid values.
     *
     * @return self
     */
    public function setProductId($product_id)
    {
        if (is_null($product_id)) {
            throw new \InvalidArgumentException('non-nullable product_id cannot be null');
        }
        if ((mb_strlen($product_id) > 5)) {
            throw new \InvalidArgumentException('invalid length for $product_id when calling CardDetails., must be smaller than or equal to 5.');
        }

        $this->container['product_id'] = $product_id;

        return $this;
    }

    /**
     * Gets visa_product_sub_type
     *
     * @return string|null
     */
    public function getVisaProductSubType()
    {
        return $this->container['visa_product_sub_type'];
    }

    /**
     * Sets visa_product_sub_type
     *
     * @param string|null $visa_product_sub_type This is used to identify product subtypes. Refer to BIN specs for valid values.
     *
     * @return self
     */
    public function setVisaProductSubType($visa_product_sub_type)
    {
        if (is_null($visa_product_sub_type)) {
            throw new \InvalidArgumentException('non-nullable visa_product_sub_type cannot be null');
        }
        if ((mb_strlen($visa_product_sub_type) > 2)) {
            throw new \InvalidArgumentException('invalid length for $visa_product_sub_type when calling CardDetails., must be smaller than or equal to 2.');
        }

        $this->container['visa_product_sub_type'] = $visa_product_sub_type;

        return $this;
    }

    /**
     * Gets visa_large_ticket_indicator
     *
     * @return string|null
     */
    public function getVisaLargeTicketIndicator()
    {
        return $this->container['visa_large_ticket_indicator'];
    }

    /**
     * Sets visa_large_ticket_indicator
     *
     * @param string|null $visa_large_ticket_indicator Indicates if large ticket are supported. Visa only.
     *
     * @return self
     */
    public function setVisaLargeTicketIndicator($visa_large_ticket_indicator)
    {
        if (is_null($visa_large_ticket_indicator)) {
            throw new \InvalidArgumentException('non-nullable visa_large_ticket_indicator cannot be null');
        }
        if ((mb_strlen($visa_large_ticket_indicator) > 13)) {
            throw new \InvalidArgumentException('invalid length for $visa_large_ticket_indicator when calling CardDetails., must be smaller than or equal to 13.');
        }

        $this->container['visa_large_ticket_indicator'] = $visa_large_ticket_indicator;

        return $this;
    }

    /**
     * Gets account_fund_source
     *
     * @return string|null
     */
    public function getAccountFundSource()
    {
        return $this->container['account_fund_source'];
    }

    /**
     * Sets account_fund_source
     *
     * @param string|null $account_fund_source Identifies the source of the funds associated with the primary account for the card. For Visa, MasterCard, Amex, Discover, and UnionPay.
     *
     * @return self
     */
    public function setAccountFundSource($account_fund_source)
    {
        if (is_null($account_fund_source)) {
            throw new \InvalidArgumentException('non-nullable account_fund_source cannot be null');
        }
        if ((mb_strlen($account_fund_source) > 15)) {
            throw new \InvalidArgumentException('invalid length for $account_fund_source when calling CardDetails., must be smaller than or equal to 15.');
        }

        $this->container['account_fund_source'] = $account_fund_source;

        return $this;
    }

    /**
     * Gets pan_length_min
     *
     * @return string|null
     */
    public function getPanLengthMin()
    {
        return $this->container['pan_length_min'];
    }

    /**
     * Sets pan_length_min
     *
     * @param string|null $pan_length_min Primary Account Number (PAN) Length Minimum
     *
     * @return self
     */
    public function setPanLengthMin($pan_length_min)
    {
        if (is_null($pan_length_min)) {
            throw new \InvalidArgumentException('non-nullable pan_length_min cannot be null');
        }
        if ((mb_strlen($pan_length_min) > 2)) {
            throw new \InvalidArgumentException('invalid length for $pan_length_min when calling CardDetails., must be smaller than or equal to 2.');
        }

        $this->container['pan_length_min'] = $pan_length_min;

        return $this;
    }

    /**
     * Gets pan_length_max
     *
     * @return string|null
     */
    public function getPanLengthMax()
    {
        return $this->container['pan_length_max'];
    }

    /**
     * Sets pan_length_max
     *
     * @param string|null $pan_length_max Primary Account Number (PAN) Length Maximum
     *
     * @return self
     */
    public function setPanLengthMax($pan_length_max)
    {
        if (is_null($pan_length_max)) {
            throw new \InvalidArgumentException('non-nullable pan_length_max cannot be null');
        }
        if ((mb_strlen($pan_length_max) > 2)) {
            throw new \InvalidArgumentException('invalid length for $pan_length_max when calling CardDetails., must be smaller than or equal to 2.');
        }

        $this->container['pan_length_max'] = $pan_length_max;

        return $this;
    }

    /**
     * Gets token_indicator
     *
     * @return string|null
     */
    public function getTokenIndicator()
    {
        return $this->container['token_indicator'];
    }

    /**
     * Sets token_indicator
     *
     * @param string|null $token_indicator Indicates if network token is supported
     *
     * @return self
     */
    public function setTokenIndicator($token_indicator)
    {
        if (is_null($token_indicator)) {
            throw new \InvalidArgumentException('non-nullable token_indicator cannot be null');
        }
        if ((mb_strlen($token_indicator) > 13)) {
            throw new \InvalidArgumentException('invalid length for $token_indicator when calling CardDetails., must be smaller than or equal to 13.');
        }

        $this->container['token_indicator'] = $token_indicator;

        return $this;
    }

    /**
     * Gets issuing_network
     *
     * @return string|null
     */
    public function getIssuingNetwork()
    {
        return $this->container['issuing_network'];
    }

    /**
     * Sets issuing_network
     *
     * @param string|null $issuing_network Identifies Discover card types
     *
     * @return self
     */
    public function setIssuingNetwork($issuing_network)
    {
        if (is_null($issuing_network)) {
            throw new \InvalidArgumentException('non-nullable issuing_network cannot be null');
        }
        if ((mb_strlen($issuing_network) > 10)) {
            throw new \InvalidArgumentException('invalid length for $issuing_network when calling CardDetails., must be smaller than or equal to 10.');
        }

        $this->container['issuing_network'] = $issuing_network;

        return $this;
    }

    /**
     * Gets cardholder_billing_currency
     *
     * @return string|null
     */
    public function getCardholderBillingCurrency()
    {
        return $this->container['cardholder_billing_currency'];
    }

    /**
     * Sets cardholder_billing_currency
     *
     * @param string|null $cardholder_billing_currency Cardholder billing currency in <a href=\"../docs?path=docs/Resources/Master-Data/Currency-Code.md\">ISO-4217 3-character Alpha Code</a>
     *
     * @return self
     */
    public function setCardholderBillingCurrency($cardholder_billing_currency)
    {
        if (is_null($cardholder_billing_currency)) {
            throw new \InvalidArgumentException('non-nullable cardholder_billing_currency cannot be null');
        }
        if ((mb_strlen($cardholder_billing_currency) > 3)) {
            throw new \InvalidArgumentException('invalid length for $cardholder_billing_currency when calling CardDetails., must be smaller than or equal to 3.');
        }

        $this->container['cardholder_billing_currency'] = $cardholder_billing_currency;

        return $this;
    }

    /**
     * Gets account_fund_source_subtype
     *
     * @return string|null
     */
    public function getAccountFundSourceSubtype()
    {
        return $this->container['account_fund_source_subtype'];
    }

    /**
     * Sets account_fund_source_subtype
     *
     * @param string|null $account_fund_source_subtype Account fund source subtype. Mastercard and UnionPay Only.
     *
     * @return self
     */
    public function setAccountFundSourceSubtype($account_fund_source_subtype)
    {
        if (is_null($account_fund_source_subtype)) {
            throw new \InvalidArgumentException('non-nullable account_fund_source_subtype cannot be null');
        }
        if ((mb_strlen($account_fund_source_subtype) > 22)) {
            throw new \InvalidArgumentException('invalid length for $account_fund_source_subtype when calling CardDetails., must be smaller than or equal to 22.');
        }

        $this->container['account_fund_source_subtype'] = $account_fund_source_subtype;

        return $this;
    }

    /**
     * Gets b2b_program_id
     *
     * @return string|null
     */
    public function getB2bProgramId()
    {
        return $this->container['b2b_program_id'];
    }

    /**
     * Sets b2b_program_id
     *
     * @param string|null $b2b_program_id Business-to-Business Virtual Payments Product Offering. Visa Only.
     *
     * @return self
     */
    public function setB2bProgramId($b2b_program_id)
    {
        if (is_null($b2b_program_id)) {
            throw new \InvalidArgumentException('non-nullable b2b_program_id cannot be null');
        }
        if ((mb_strlen($b2b_program_id) > 15)) {
            throw new \InvalidArgumentException('invalid length for $b2b_program_id when calling CardDetails., must be smaller than or equal to 15.');
        }

        $this->container['b2b_program_id'] = $b2b_program_id;

        return $this;
    }

    /**
     * Gets money_send_indicator
     *
     * @return string|null
     */
    public function getMoneySendIndicator()
    {
        return $this->container['money_send_indicator'];
    }

    /**
     * Sets money_send_indicator
     *
     * @param string|null $money_send_indicator MoneySend is a set of a Mastercard network transactions that facilitate fund transfers. This indicator determines if the Mastercard account is eligible to receive a MoneySend payment.
     *
     * @return self
     */
    public function setMoneySendIndicator($money_send_indicator)
    {
        if (is_null($money_send_indicator)) {
            throw new \InvalidArgumentException('non-nullable money_send_indicator cannot be null');
        }
        if ((mb_strlen($money_send_indicator) > 25)) {
            throw new \InvalidArgumentException('invalid length for $money_send_indicator when calling CardDetails., must be smaller than or equal to 25.');
        }

        $this->container['money_send_indicator'] = $money_send_indicator;

        return $this;
    }

    /**
     * Gets client_id
     *
     * @return string|null
     */
    public function getClientId()
    {
        return $this->container['client_id'];
    }

    /**
     * Sets client_id
     *
     * @param string|null $client_id Intermediate field which categorizes BIN records as client ownership, with restricted availability to that client like PLCC private label.
     *
     * @return self
     */
    public function setClientId($client_id)
    {
        if (is_null($client_id)) {
            throw new \InvalidArgumentException('non-nullable client_id cannot be null');
        }
        if ((mb_strlen($client_id) > 64)) {
            throw new \InvalidArgumentException('invalid length for $client_id when calling CardDetails., must be smaller than or equal to 64.');
        }

        $this->container['client_id'] = $client_id;

        return $this;
    }

    /**
     * Gets debit_pinless_indicator
     *
     * @return \Fiserv\Payments\Lib\CommerceHub\Model\DebitNetworkPinlessDetails[]|null
     */
    public function getDebitPinlessIndicator()
    {
        return $this->container['debit_pinless_indicator'];
    }

    /**
     * Sets debit_pinless_indicator
     *
     * @param \Fiserv\Payments\Lib\CommerceHub\Model\DebitNetworkPinlessDetails[]|null $debit_pinless_indicator A list of debit network PINless details.
     *
     * @return self
     */
    public function setDebitPinlessIndicator($debit_pinless_indicator)
    {
        if (is_null($debit_pinless_indicator)) {
            throw new \InvalidArgumentException('non-nullable debit_pinless_indicator cannot be null');
        }
        $this->container['debit_pinless_indicator'] = $debit_pinless_indicator;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


