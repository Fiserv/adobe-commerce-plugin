<?php
/**
 * NetworkDetails
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Fiserv\Payments\Lib\CommerceHub
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Commerce Hub
 *
 * This API Specification is designed to provide technical guidance required to consume and integrate with our APIs for payment processing.
 *
 * The version of the OpenAPI document: v1.24.08
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.3.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Fiserv\Payments\Lib\CommerceHub\Model;

use \ArrayAccess;
use \Fiserv\Payments\Lib\CommerceHub\ObjectSerializer;

/**
 * NetworkDetails Class Doc Comment
 *
 * @category Class
 * @description Contains the authorization &lt;a href&#x3D;\&quot;../docs?path&#x3D;docs/Resources/Master-Data/Network-Details.md\&quot;&gt;network response&lt;/a&gt; details.
 * @package  Fiserv\Payments\Lib\CommerceHub
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class NetworkDetails implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'NetworkDetails';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'network' => '\Fiserv\Payments\Lib\CommerceHub\Model\Network',
        'debit_network_id' => 'string',
        'transaction_sequence' => 'string',
        'system_trace' => 'string',
        'debit_issuer_data' => 'string',
        'network_response_status' => 'string',
        'network_response_code' => 'string',
        'merchant_advice_code' => 'string',
        'pos_entry_mode_change' => 'bool',
        'card_level_result_code' => 'string',
        'validation_code' => 'string',
        'downgrade_reason' => 'string',
        'credit_auth_type' => 'string',
        'auth_score' => 'string',
        'partial_auth_transaction_id' => 'string',
        'total_auth_amount' => 'float',
        'transaction_identifier' => 'string',
        'mag_stripe_quality_indicator' => 'string',
        'network_avs_code' => 'string',
        'pan_mapping_account_number' => 'string',
        'cardholder_response' => 'string',
        'auth_source' => 'string',
        'debit_routing' => 'string',
        'cavv_response_code' => 'string',
        'cavv_response_message' => 'string',
        'tavv_response_code' => 'string',
        'tavv_response_message' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'network' => null,
        'debit_network_id' => null,
        'transaction_sequence' => null,
        'system_trace' => null,
        'debit_issuer_data' => null,
        'network_response_status' => null,
        'network_response_code' => null,
        'merchant_advice_code' => null,
        'pos_entry_mode_change' => null,
        'card_level_result_code' => null,
        'validation_code' => null,
        'downgrade_reason' => null,
        'credit_auth_type' => null,
        'auth_score' => null,
        'partial_auth_transaction_id' => null,
        'total_auth_amount' => null,
        'transaction_identifier' => null,
        'mag_stripe_quality_indicator' => null,
        'network_avs_code' => null,
        'pan_mapping_account_number' => null,
        'cardholder_response' => null,
        'auth_source' => null,
        'debit_routing' => null,
        'cavv_response_code' => null,
        'cavv_response_message' => null,
        'tavv_response_code' => null,
        'tavv_response_message' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'network' => false,
        'debit_network_id' => false,
        'transaction_sequence' => false,
        'system_trace' => false,
        'debit_issuer_data' => false,
        'network_response_status' => false,
        'network_response_code' => false,
        'merchant_advice_code' => false,
        'pos_entry_mode_change' => false,
        'card_level_result_code' => false,
        'validation_code' => false,
        'downgrade_reason' => false,
        'credit_auth_type' => false,
        'auth_score' => false,
        'partial_auth_transaction_id' => false,
        'total_auth_amount' => false,
        'transaction_identifier' => false,
        'mag_stripe_quality_indicator' => false,
        'network_avs_code' => false,
        'pan_mapping_account_number' => false,
        'cardholder_response' => false,
        'auth_source' => false,
        'debit_routing' => false,
        'cavv_response_code' => false,
        'cavv_response_message' => false,
        'tavv_response_code' => false,
        'tavv_response_message' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'network' => 'network',
        'debit_network_id' => 'debitNetworkId',
        'transaction_sequence' => 'transactionSequence',
        'system_trace' => 'systemTrace',
        'debit_issuer_data' => 'debitIssuerData',
        'network_response_status' => 'networkResponseStatus',
        'network_response_code' => 'networkResponseCode',
        'merchant_advice_code' => 'merchantAdviceCode',
        'pos_entry_mode_change' => 'posEntryModeChange',
        'card_level_result_code' => 'cardLevelResultCode',
        'validation_code' => 'validationCode',
        'downgrade_reason' => 'downgradeReason',
        'credit_auth_type' => 'creditAuthType',
        'auth_score' => 'authScore',
        'partial_auth_transaction_id' => 'partialAuthTransactionId',
        'total_auth_amount' => 'totalAuthAmount',
        'transaction_identifier' => 'transactionIdentifier',
        'mag_stripe_quality_indicator' => 'magStripeQualityIndicator',
        'network_avs_code' => 'networkAvsCode',
        'pan_mapping_account_number' => 'panMappingAccountNumber',
        'cardholder_response' => 'cardholderResponse',
        'auth_source' => 'authSource',
        'debit_routing' => 'debitRouting',
        'cavv_response_code' => 'cavvResponseCode',
        'cavv_response_message' => 'cavvResponseMessage',
        'tavv_response_code' => 'tavvResponseCode',
        'tavv_response_message' => 'tavvResponseMessage'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'network' => 'setNetwork',
        'debit_network_id' => 'setDebitNetworkId',
        'transaction_sequence' => 'setTransactionSequence',
        'system_trace' => 'setSystemTrace',
        'debit_issuer_data' => 'setDebitIssuerData',
        'network_response_status' => 'setNetworkResponseStatus',
        'network_response_code' => 'setNetworkResponseCode',
        'merchant_advice_code' => 'setMerchantAdviceCode',
        'pos_entry_mode_change' => 'setPosEntryModeChange',
        'card_level_result_code' => 'setCardLevelResultCode',
        'validation_code' => 'setValidationCode',
        'downgrade_reason' => 'setDowngradeReason',
        'credit_auth_type' => 'setCreditAuthType',
        'auth_score' => 'setAuthScore',
        'partial_auth_transaction_id' => 'setPartialAuthTransactionId',
        'total_auth_amount' => 'setTotalAuthAmount',
        'transaction_identifier' => 'setTransactionIdentifier',
        'mag_stripe_quality_indicator' => 'setMagStripeQualityIndicator',
        'network_avs_code' => 'setNetworkAvsCode',
        'pan_mapping_account_number' => 'setPanMappingAccountNumber',
        'cardholder_response' => 'setCardholderResponse',
        'auth_source' => 'setAuthSource',
        'debit_routing' => 'setDebitRouting',
        'cavv_response_code' => 'setCavvResponseCode',
        'cavv_response_message' => 'setCavvResponseMessage',
        'tavv_response_code' => 'setTavvResponseCode',
        'tavv_response_message' => 'setTavvResponseMessage'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'network' => 'getNetwork',
        'debit_network_id' => 'getDebitNetworkId',
        'transaction_sequence' => 'getTransactionSequence',
        'system_trace' => 'getSystemTrace',
        'debit_issuer_data' => 'getDebitIssuerData',
        'network_response_status' => 'getNetworkResponseStatus',
        'network_response_code' => 'getNetworkResponseCode',
        'merchant_advice_code' => 'getMerchantAdviceCode',
        'pos_entry_mode_change' => 'getPosEntryModeChange',
        'card_level_result_code' => 'getCardLevelResultCode',
        'validation_code' => 'getValidationCode',
        'downgrade_reason' => 'getDowngradeReason',
        'credit_auth_type' => 'getCreditAuthType',
        'auth_score' => 'getAuthScore',
        'partial_auth_transaction_id' => 'getPartialAuthTransactionId',
        'total_auth_amount' => 'getTotalAuthAmount',
        'transaction_identifier' => 'getTransactionIdentifier',
        'mag_stripe_quality_indicator' => 'getMagStripeQualityIndicator',
        'network_avs_code' => 'getNetworkAvsCode',
        'pan_mapping_account_number' => 'getPanMappingAccountNumber',
        'cardholder_response' => 'getCardholderResponse',
        'auth_source' => 'getAuthSource',
        'debit_routing' => 'getDebitRouting',
        'cavv_response_code' => 'getCavvResponseCode',
        'cavv_response_message' => 'getCavvResponseMessage',
        'tavv_response_code' => 'getTavvResponseCode',
        'tavv_response_message' => 'getTavvResponseMessage'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('network', $data ?? [], null);
        $this->setIfExists('debit_network_id', $data ?? [], null);
        $this->setIfExists('transaction_sequence', $data ?? [], null);
        $this->setIfExists('system_trace', $data ?? [], null);
        $this->setIfExists('debit_issuer_data', $data ?? [], null);
        $this->setIfExists('network_response_status', $data ?? [], null);
        $this->setIfExists('network_response_code', $data ?? [], null);
        $this->setIfExists('merchant_advice_code', $data ?? [], null);
        $this->setIfExists('pos_entry_mode_change', $data ?? [], null);
        $this->setIfExists('card_level_result_code', $data ?? [], null);
        $this->setIfExists('validation_code', $data ?? [], null);
        $this->setIfExists('downgrade_reason', $data ?? [], null);
        $this->setIfExists('credit_auth_type', $data ?? [], null);
        $this->setIfExists('auth_score', $data ?? [], null);
        $this->setIfExists('partial_auth_transaction_id', $data ?? [], null);
        $this->setIfExists('total_auth_amount', $data ?? [], null);
        $this->setIfExists('transaction_identifier', $data ?? [], null);
        $this->setIfExists('mag_stripe_quality_indicator', $data ?? [], null);
        $this->setIfExists('network_avs_code', $data ?? [], null);
        $this->setIfExists('pan_mapping_account_number', $data ?? [], null);
        $this->setIfExists('cardholder_response', $data ?? [], null);
        $this->setIfExists('auth_source', $data ?? [], null);
        $this->setIfExists('debit_routing', $data ?? [], null);
        $this->setIfExists('cavv_response_code', $data ?? [], null);
        $this->setIfExists('cavv_response_message', $data ?? [], null);
        $this->setIfExists('tavv_response_code', $data ?? [], null);
        $this->setIfExists('tavv_response_message', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['debit_network_id']) && (mb_strlen($this->container['debit_network_id']) > 64)) {
            $invalidProperties[] = "invalid value for 'debit_network_id', the character length must be smaller than or equal to 64.";
        }

        if (!is_null($this->container['transaction_sequence']) && (mb_strlen($this->container['transaction_sequence']) > 64)) {
            $invalidProperties[] = "invalid value for 'transaction_sequence', the character length must be smaller than or equal to 64.";
        }

        if (!is_null($this->container['system_trace']) && (mb_strlen($this->container['system_trace']) > 64)) {
            $invalidProperties[] = "invalid value for 'system_trace', the character length must be smaller than or equal to 64.";
        }

        if (!is_null($this->container['network_response_status']) && (mb_strlen($this->container['network_response_status']) > 32)) {
            $invalidProperties[] = "invalid value for 'network_response_status', the character length must be smaller than or equal to 32.";
        }

        if (!is_null($this->container['network_response_code']) && (mb_strlen($this->container['network_response_code']) > 16)) {
            $invalidProperties[] = "invalid value for 'network_response_code', the character length must be smaller than or equal to 16.";
        }

        if (!is_null($this->container['merchant_advice_code']) && (mb_strlen($this->container['merchant_advice_code']) > 8)) {
            $invalidProperties[] = "invalid value for 'merchant_advice_code', the character length must be smaller than or equal to 8.";
        }

        if (!is_null($this->container['network_avs_code']) && (mb_strlen($this->container['network_avs_code']) > 1)) {
            $invalidProperties[] = "invalid value for 'network_avs_code', the character length must be smaller than or equal to 1.";
        }

        if (!is_null($this->container['pan_mapping_account_number']) && (mb_strlen($this->container['pan_mapping_account_number']) > 19)) {
            $invalidProperties[] = "invalid value for 'pan_mapping_account_number', the character length must be smaller than or equal to 19.";
        }

        if (!is_null($this->container['cardholder_response']) && (mb_strlen($this->container['cardholder_response']) > 5)) {
            $invalidProperties[] = "invalid value for 'cardholder_response', the character length must be smaller than or equal to 5.";
        }

        if (!is_null($this->container['debit_routing']) && (mb_strlen($this->container['debit_routing']) > 256)) {
            $invalidProperties[] = "invalid value for 'debit_routing', the character length must be smaller than or equal to 256.";
        }

        if (!is_null($this->container['cavv_response_code']) && (mb_strlen($this->container['cavv_response_code']) > 1)) {
            $invalidProperties[] = "invalid value for 'cavv_response_code', the character length must be smaller than or equal to 1.";
        }

        if (!is_null($this->container['tavv_response_code']) && (mb_strlen($this->container['tavv_response_code']) > 1)) {
            $invalidProperties[] = "invalid value for 'tavv_response_code', the character length must be smaller than or equal to 1.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets network
     *
     * @return \Fiserv\Payments\Lib\CommerceHub\Model\Network|null
     */
    public function getNetwork()
    {
        return $this->container['network'];
    }

    /**
     * Sets network
     *
     * @param \Fiserv\Payments\Lib\CommerceHub\Model\Network|null $network network
     *
     * @return self
     */
    public function setNetwork($network)
    {
        if (is_null($network)) {
            throw new \InvalidArgumentException('non-nullable network cannot be null');
        }
        $this->container['network'] = $network;

        return $this;
    }

    /**
     * Gets debit_network_id
     *
     * @return string|null
     */
    public function getDebitNetworkId()
    {
        return $this->container['debit_network_id'];
    }

    /**
     * Sets debit_network_id
     *
     * @param string|null $debit_network_id Network ID for the debit component.
     *
     * @return self
     */
    public function setDebitNetworkId($debit_network_id)
    {
        if (is_null($debit_network_id)) {
            throw new \InvalidArgumentException('non-nullable debit_network_id cannot be null');
        }
        if ((mb_strlen($debit_network_id) > 64)) {
            throw new \InvalidArgumentException('invalid length for $debit_network_id when calling NetworkDetails., must be smaller than or equal to 64.');
        }

        $this->container['debit_network_id'] = $debit_network_id;

        return $this;
    }

    /**
     * Gets transaction_sequence
     *
     * @return string|null
     */
    public function getTransactionSequence()
    {
        return $this->container['transaction_sequence'];
    }

    /**
     * Sets transaction_sequence
     *
     * @param string|null $transaction_sequence Transaction specific data that may be returned in response messages.
     *
     * @return self
     */
    public function setTransactionSequence($transaction_sequence)
    {
        if (is_null($transaction_sequence)) {
            throw new \InvalidArgumentException('non-nullable transaction_sequence cannot be null');
        }
        if ((mb_strlen($transaction_sequence) > 64)) {
            throw new \InvalidArgumentException('invalid length for $transaction_sequence when calling NetworkDetails., must be smaller than or equal to 64.');
        }

        $this->container['transaction_sequence'] = $transaction_sequence;

        return $this;
    }

    /**
     * Gets system_trace
     *
     * @return string|null
     */
    public function getSystemTrace()
    {
        return $this->container['system_trace'];
    }

    /**
     * Sets system_trace
     *
     * @param string|null $system_trace Original trace number that was returned in an authorization response.
     *
     * @return self
     */
    public function setSystemTrace($system_trace)
    {
        if (is_null($system_trace)) {
            throw new \InvalidArgumentException('non-nullable system_trace cannot be null');
        }
        if ((mb_strlen($system_trace) > 64)) {
            throw new \InvalidArgumentException('invalid length for $system_trace when calling NetworkDetails., must be smaller than or equal to 64.');
        }

        $this->container['system_trace'] = $system_trace;

        return $this;
    }

    /**
     * Gets debit_issuer_data
     *
     * @return string|null
     */
    public function getDebitIssuerData()
    {
        return $this->container['debit_issuer_data'];
    }

    /**
     * Sets debit_issuer_data
     *
     * @param string|null $debit_issuer_data Debit issuer specific data that may be returned in the response messages.
     *
     * @return self
     */
    public function setDebitIssuerData($debit_issuer_data)
    {
        if (is_null($debit_issuer_data)) {
            throw new \InvalidArgumentException('non-nullable debit_issuer_data cannot be null');
        }
        $this->container['debit_issuer_data'] = $debit_issuer_data;

        return $this;
    }

    /**
     * Gets network_response_status
     *
     * @return string|null
     */
    public function getNetworkResponseStatus()
    {
        return $this->container['network_response_status'];
    }

    /**
     * Sets network_response_status
     *
     * @param string|null $network_response_status Network response status.
     *
     * @return self
     */
    public function setNetworkResponseStatus($network_response_status)
    {
        if (is_null($network_response_status)) {
            throw new \InvalidArgumentException('non-nullable network_response_status cannot be null');
        }
        if ((mb_strlen($network_response_status) > 32)) {
            throw new \InvalidArgumentException('invalid length for $network_response_status when calling NetworkDetails., must be smaller than or equal to 32.');
        }

        $this->container['network_response_status'] = $network_response_status;

        return $this;
    }

    /**
     * Gets network_response_code
     *
     * @return string|null
     */
    public function getNetworkResponseCode()
    {
        return $this->container['network_response_code'];
    }

    /**
     * Sets network_response_code
     *
     * @param string|null $network_response_code Debit network response code.
     *
     * @return self
     */
    public function setNetworkResponseCode($network_response_code)
    {
        if (is_null($network_response_code)) {
            throw new \InvalidArgumentException('non-nullable network_response_code cannot be null');
        }
        if ((mb_strlen($network_response_code) > 16)) {
            throw new \InvalidArgumentException('invalid length for $network_response_code when calling NetworkDetails., must be smaller than or equal to 16.');
        }

        $this->container['network_response_code'] = $network_response_code;

        return $this;
    }

    /**
     * Gets merchant_advice_code
     *
     * @return string|null
     */
    public function getMerchantAdviceCode()
    {
        return $this->container['merchant_advice_code'];
    }

    /**
     * Sets merchant_advice_code
     *
     * @param string|null $merchant_advice_code This field contains a code which may be returned by the issuer to provide additional information for a transaction.
     *
     * @return self
     */
    public function setMerchantAdviceCode($merchant_advice_code)
    {
        if (is_null($merchant_advice_code)) {
            throw new \InvalidArgumentException('non-nullable merchant_advice_code cannot be null');
        }
        if ((mb_strlen($merchant_advice_code) > 8)) {
            throw new \InvalidArgumentException('invalid length for $merchant_advice_code when calling NetworkDetails., must be smaller than or equal to 8.');
        }

        $this->container['merchant_advice_code'] = $merchant_advice_code;

        return $this;
    }

    /**
     * Gets pos_entry_mode_change
     *
     * @return bool|null
     */
    public function getPosEntryModeChange()
    {
        return $this->container['pos_entry_mode_change'];
    }

    /**
     * Sets pos_entry_mode_change
     *
     * @param bool|null $pos_entry_mode_change Issuer will reply if the entry mode has changed.
     *
     * @return self
     */
    public function setPosEntryModeChange($pos_entry_mode_change)
    {
        if (is_null($pos_entry_mode_change)) {
            throw new \InvalidArgumentException('non-nullable pos_entry_mode_change cannot be null');
        }
        $this->container['pos_entry_mode_change'] = $pos_entry_mode_change;

        return $this;
    }

    /**
     * Gets card_level_result_code
     *
     * @return string|null
     */
    public function getCardLevelResultCode()
    {
        return $this->container['card_level_result_code'];
    }

    /**
     * Sets card_level_result_code
     *
     * @param string|null $card_level_result_code Identifies purchase, corporate, and business card level e.g. Level II/Level III
     *
     * @return self
     */
    public function setCardLevelResultCode($card_level_result_code)
    {
        if (is_null($card_level_result_code)) {
            throw new \InvalidArgumentException('non-nullable card_level_result_code cannot be null');
        }
        $this->container['card_level_result_code'] = $card_level_result_code;

        return $this;
    }

    /**
     * Gets validation_code
     *
     * @return string|null
     */
    public function getValidationCode()
    {
        return $this->container['validation_code'];
    }

    /**
     * Sets validation_code
     *
     * @param string|null $validation_code A code calculated by card brands to ensure that the fields present in the authorization are also present in the clearing record.
     *
     * @return self
     */
    public function setValidationCode($validation_code)
    {
        if (is_null($validation_code)) {
            throw new \InvalidArgumentException('non-nullable validation_code cannot be null');
        }
        $this->container['validation_code'] = $validation_code;

        return $this;
    }

    /**
     * Gets downgrade_reason
     *
     * @return string|null
     */
    public function getDowngradeReason()
    {
        return $this->container['downgrade_reason'];
    }

    /**
     * Sets downgrade_reason
     *
     * @param string|null $downgrade_reason Downgrade reason as supplied by network.
     *
     * @return self
     */
    public function setDowngradeReason($downgrade_reason)
    {
        if (is_null($downgrade_reason)) {
            throw new \InvalidArgumentException('non-nullable downgrade_reason cannot be null');
        }
        $this->container['downgrade_reason'] = $downgrade_reason;

        return $this;
    }

    /**
     * Gets credit_auth_type
     *
     * @return string|null
     */
    public function getCreditAuthType()
    {
        return $this->container['credit_auth_type'];
    }

    /**
     * Sets credit_auth_type
     *
     * @param string|null $credit_auth_type Indicates the type of authorization required.
     *
     * @return self
     */
    public function setCreditAuthType($credit_auth_type)
    {
        if (is_null($credit_auth_type)) {
            throw new \InvalidArgumentException('non-nullable credit_auth_type cannot be null');
        }
        $this->container['credit_auth_type'] = $credit_auth_type;

        return $this;
    }

    /**
     * Gets auth_score
     *
     * @return string|null
     */
    public function getAuthScore()
    {
        return $this->container['auth_score'];
    }

    /**
     * Sets auth_score
     *
     * @param string|null $auth_score The auth score returned for the transaction.
     *
     * @return self
     */
    public function setAuthScore($auth_score)
    {
        if (is_null($auth_score)) {
            throw new \InvalidArgumentException('non-nullable auth_score cannot be null');
        }
        $this->container['auth_score'] = $auth_score;

        return $this;
    }

    /**
     * Gets partial_auth_transaction_id
     *
     * @return string|null
     */
    public function getPartialAuthTransactionId()
    {
        return $this->container['partial_auth_transaction_id'];
    }

    /**
     * Sets partial_auth_transaction_id
     *
     * @param string|null $partial_auth_transaction_id Generated identifier unique for each original authorization request.
     *
     * @return self
     */
    public function setPartialAuthTransactionId($partial_auth_transaction_id)
    {
        if (is_null($partial_auth_transaction_id)) {
            throw new \InvalidArgumentException('non-nullable partial_auth_transaction_id cannot be null');
        }
        $this->container['partial_auth_transaction_id'] = $partial_auth_transaction_id;

        return $this;
    }

    /**
     * Gets total_auth_amount
     *
     * @return float|null
     */
    public function getTotalAuthAmount()
    {
        return $this->container['total_auth_amount'];
    }

    /**
     * Sets total_auth_amount
     *
     * @param float|null $total_auth_amount Total amount authorized.
     *
     * @return self
     */
    public function setTotalAuthAmount($total_auth_amount)
    {
        if (is_null($total_auth_amount)) {
            throw new \InvalidArgumentException('non-nullable total_auth_amount cannot be null');
        }
        $this->container['total_auth_amount'] = $total_auth_amount;

        return $this;
    }

    /**
     * Gets transaction_identifier
     *
     * @return string|null
     */
    public function getTransactionIdentifier()
    {
        return $this->container['transaction_identifier'];
    }

    /**
     * Sets transaction_identifier
     *
     * @param string|null $transaction_identifier This field represents a unique value used to identify and link all related transactions for authorization and settlement
     *
     * @return self
     */
    public function setTransactionIdentifier($transaction_identifier)
    {
        if (is_null($transaction_identifier)) {
            throw new \InvalidArgumentException('non-nullable transaction_identifier cannot be null');
        }
        $this->container['transaction_identifier'] = $transaction_identifier;

        return $this;
    }

    /**
     * Gets mag_stripe_quality_indicator
     *
     * @return string|null
     */
    public function getMagStripeQualityIndicator()
    {
        return $this->container['mag_stripe_quality_indicator'];
    }

    /**
     * Sets mag_stripe_quality_indicator
     *
     * @param string|null $mag_stripe_quality_indicator <a href=\"..docs/?path=docs/Resources/Master-Data/Network-Details.md#mag-stripe-quality-indicator\">MAG Stripe Quality Indicator</a>
     *
     * @return self
     */
    public function setMagStripeQualityIndicator($mag_stripe_quality_indicator)
    {
        if (is_null($mag_stripe_quality_indicator)) {
            throw new \InvalidArgumentException('non-nullable mag_stripe_quality_indicator cannot be null');
        }
        $this->container['mag_stripe_quality_indicator'] = $mag_stripe_quality_indicator;

        return $this;
    }

    /**
     * Gets network_avs_code
     *
     * @return string|null
     */
    public function getNetworkAvsCode()
    {
        return $this->container['network_avs_code'];
    }

    /**
     * Sets network_avs_code
     *
     * @param string|null $network_avs_code Non-Normalized newtork AVS response code is available.
     *
     * @return self
     */
    public function setNetworkAvsCode($network_avs_code)
    {
        if (is_null($network_avs_code)) {
            throw new \InvalidArgumentException('non-nullable network_avs_code cannot be null');
        }
        if ((mb_strlen($network_avs_code) > 1)) {
            throw new \InvalidArgumentException('invalid length for $network_avs_code when calling NetworkDetails., must be smaller than or equal to 1.');
        }

        $this->container['network_avs_code'] = $network_avs_code;

        return $this;
    }

    /**
     * Gets pan_mapping_account_number
     *
     * @return string|null
     */
    public function getPanMappingAccountNumber()
    {
        return $this->container['pan_mapping_account_number'];
    }

    /**
     * Sets pan_mapping_account_number
     *
     * @param string|null $pan_mapping_account_number Returned for MasterCard Token transactions (only for MCCs 4111, 4131, 4784, and 7523) and for all AMEX Token transactions.
     *
     * @return self
     */
    public function setPanMappingAccountNumber($pan_mapping_account_number)
    {
        if (is_null($pan_mapping_account_number)) {
            throw new \InvalidArgumentException('non-nullable pan_mapping_account_number cannot be null');
        }
        if ((mb_strlen($pan_mapping_account_number) > 19)) {
            throw new \InvalidArgumentException('invalid length for $pan_mapping_account_number when calling NetworkDetails., must be smaller than or equal to 19.');
        }

        $this->container['pan_mapping_account_number'] = $pan_mapping_account_number;

        return $this;
    }

    /**
     * Gets cardholder_response
     *
     * @return string|null
     */
    public function getCardholderResponse()
    {
        return $this->container['cardholder_response'];
    }

    /**
     * Sets cardholder_response
     *
     * @param string|null $cardholder_response <a href=\"..docs/?path=docs/Resources/Master-Data/Network-Details.md&branch=main#network-details\">Card Holder Response</a>
     *
     * @return self
     */
    public function setCardholderResponse($cardholder_response)
    {
        if (is_null($cardholder_response)) {
            throw new \InvalidArgumentException('non-nullable cardholder_response cannot be null');
        }
        if ((mb_strlen($cardholder_response) > 5)) {
            throw new \InvalidArgumentException('invalid length for $cardholder_response when calling NetworkDetails., must be smaller than or equal to 5.');
        }

        $this->container['cardholder_response'] = $cardholder_response;

        return $this;
    }

    /**
     * Gets auth_source
     *
     * @return string|null
     */
    public function getAuthSource()
    {
        return $this->container['auth_source'];
    }

    /**
     * Sets auth_source
     *
     * @param string|null $auth_source Code indicating how the network performed the authorization.
     *
     * @return self
     */
    public function setAuthSource($auth_source)
    {
        if (is_null($auth_source)) {
            throw new \InvalidArgumentException('non-nullable auth_source cannot be null');
        }
        $this->container['auth_source'] = $auth_source;

        return $this;
    }

    /**
     * Gets debit_routing
     *
     * @return string|null
     */
    public function getDebitRouting()
    {
        return $this->container['debit_routing'];
    }

    /**
     * Sets debit_routing
     *
     * @param string|null $debit_routing <a href=\"..docs/?path=docs/Resources/Master-Data/Network-Details.md&branch=main#network-details\">Debit Routing</a>
     *
     * @return self
     */
    public function setDebitRouting($debit_routing)
    {
        if (is_null($debit_routing)) {
            throw new \InvalidArgumentException('non-nullable debit_routing cannot be null');
        }
        if ((mb_strlen($debit_routing) > 256)) {
            throw new \InvalidArgumentException('invalid length for $debit_routing when calling NetworkDetails., must be smaller than or equal to 256.');
        }

        $this->container['debit_routing'] = $debit_routing;

        return $this;
    }

    /**
     * Gets cavv_response_code
     *
     * @return string|null
     */
    public function getCavvResponseCode()
    {
        return $this->container['cavv_response_code'];
    }

    /**
     * Sets cavv_response_code
     *
     * @param string|null $cavv_response_code CAVV Response Code
     *
     * @return self
     */
    public function setCavvResponseCode($cavv_response_code)
    {
        if (is_null($cavv_response_code)) {
            throw new \InvalidArgumentException('non-nullable cavv_response_code cannot be null');
        }
        if ((mb_strlen($cavv_response_code) > 1)) {
            throw new \InvalidArgumentException('invalid length for $cavv_response_code when calling NetworkDetails., must be smaller than or equal to 1.');
        }

        $this->container['cavv_response_code'] = $cavv_response_code;

        return $this;
    }

    /**
     * Gets cavv_response_message
     *
     * @return string|null
     */
    public function getCavvResponseMessage()
    {
        return $this->container['cavv_response_message'];
    }

    /**
     * Sets cavv_response_message
     *
     * @param string|null $cavv_response_message CAVV Response Message
     *
     * @return self
     */
    public function setCavvResponseMessage($cavv_response_message)
    {
        if (is_null($cavv_response_message)) {
            throw new \InvalidArgumentException('non-nullable cavv_response_message cannot be null');
        }
        $this->container['cavv_response_message'] = $cavv_response_message;

        return $this;
    }

    /**
     * Gets tavv_response_code
     *
     * @return string|null
     */
    public function getTavvResponseCode()
    {
        return $this->container['tavv_response_code'];
    }

    /**
     * Sets tavv_response_code
     *
     * @param string|null $tavv_response_code TAVV Response Code
     *
     * @return self
     */
    public function setTavvResponseCode($tavv_response_code)
    {
        if (is_null($tavv_response_code)) {
            throw new \InvalidArgumentException('non-nullable tavv_response_code cannot be null');
        }
        if ((mb_strlen($tavv_response_code) > 1)) {
            throw new \InvalidArgumentException('invalid length for $tavv_response_code when calling NetworkDetails., must be smaller than or equal to 1.');
        }

        $this->container['tavv_response_code'] = $tavv_response_code;

        return $this;
    }

    /**
     * Gets tavv_response_message
     *
     * @return string|null
     */
    public function getTavvResponseMessage()
    {
        return $this->container['tavv_response_message'];
    }

    /**
     * Sets tavv_response_message
     *
     * @param string|null $tavv_response_message TAVV Response Message
     *
     * @return self
     */
    public function setTavvResponseMessage($tavv_response_message)
    {
        if (is_null($tavv_response_message)) {
            throw new \InvalidArgumentException('non-nullable tavv_response_message cannot be null');
        }
        $this->container['tavv_response_message'] = $tavv_response_message;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


