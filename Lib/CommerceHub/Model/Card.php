<?php
/**
 * Card
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Fiserv\Payments\Lib\CommerceHub
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Payments
 *
 * This API Specification is designed to provide technical guidance required to consume and integrate with our APIs for payment processing.
 *
 * The version of the OpenAPI document: v1.3.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.2.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Fiserv\Payments\Lib\CommerceHub\Model;

use \ArrayAccess;
use \Fiserv\Payments\Lib\CommerceHub\ObjectSerializer;

/**
 * Card Class Doc Comment
 *
 * @category Class
 * @description Common &lt;a href&#x3D;\&quot;../docs?path&#x3D;docs/Resources/Master-Data/Card.md\&quot;&gt;card&lt;/a&gt; data for a transaction request and response.
 * @package  Fiserv\Payments\Lib\CommerceHub
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class Card implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Card';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'card_data' => 'string',
        'name_on_card' => 'string',
        'expiration_month' => 'string',
        'expiration_year' => 'string',
        'security_code' => 'string',
        'security_code_indicator' => 'string',
        'bin' => 'string',
        'last4' => 'string',
        'scheme' => 'string',
        'beginning_balance' => 'float',
        'ending_balance' => 'float'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'card_data' => null,
        'name_on_card' => null,
        'expiration_month' => null,
        'expiration_year' => null,
        'security_code' => null,
        'security_code_indicator' => null,
        'bin' => null,
        'last4' => null,
        'scheme' => null,
        'beginning_balance' => null,
        'ending_balance' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'card_data' => false,
		'name_on_card' => false,
		'expiration_month' => false,
		'expiration_year' => false,
		'security_code' => false,
		'security_code_indicator' => false,
		'bin' => false,
		'last4' => false,
		'scheme' => false,
		'beginning_balance' => false,
		'ending_balance' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'card_data' => 'cardData',
        'name_on_card' => 'nameOnCard',
        'expiration_month' => 'expirationMonth',
        'expiration_year' => 'expirationYear',
        'security_code' => 'securityCode',
        'security_code_indicator' => 'securityCodeIndicator',
        'bin' => 'bin',
        'last4' => 'last4',
        'scheme' => 'scheme',
        'beginning_balance' => 'beginningBalance',
        'ending_balance' => 'endingBalance'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'card_data' => 'setCardData',
        'name_on_card' => 'setNameOnCard',
        'expiration_month' => 'setExpirationMonth',
        'expiration_year' => 'setExpirationYear',
        'security_code' => 'setSecurityCode',
        'security_code_indicator' => 'setSecurityCodeIndicator',
        'bin' => 'setBin',
        'last4' => 'setLast4',
        'scheme' => 'setScheme',
        'beginning_balance' => 'setBeginningBalance',
        'ending_balance' => 'setEndingBalance'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'card_data' => 'getCardData',
        'name_on_card' => 'getNameOnCard',
        'expiration_month' => 'getExpirationMonth',
        'expiration_year' => 'getExpirationYear',
        'security_code' => 'getSecurityCode',
        'security_code_indicator' => 'getSecurityCodeIndicator',
        'bin' => 'getBin',
        'last4' => 'getLast4',
        'scheme' => 'getScheme',
        'beginning_balance' => 'getBeginningBalance',
        'ending_balance' => 'getEndingBalance'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('card_data', $data ?? [], null);
        $this->setIfExists('name_on_card', $data ?? [], null);
        $this->setIfExists('expiration_month', $data ?? [], null);
        $this->setIfExists('expiration_year', $data ?? [], null);
        $this->setIfExists('security_code', $data ?? [], null);
        $this->setIfExists('security_code_indicator', $data ?? [], null);
        $this->setIfExists('bin', $data ?? [], null);
        $this->setIfExists('last4', $data ?? [], null);
        $this->setIfExists('scheme', $data ?? [], null);
        $this->setIfExists('beginning_balance', $data ?? [], null);
        $this->setIfExists('ending_balance', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['card_data']) && (mb_strlen($this->container['card_data']) > 256)) {
            $invalidProperties[] = "invalid value for 'card_data', the character length must be smaller than or equal to 256.";
        }

        if (!is_null($this->container['name_on_card']) && (mb_strlen($this->container['name_on_card']) > 256)) {
            $invalidProperties[] = "invalid value for 'name_on_card', the character length must be smaller than or equal to 256.";
        }

        if (!is_null($this->container['expiration_month']) && !preg_match("/^(0[1-9]|1[012])$/", $this->container['expiration_month'])) {
            $invalidProperties[] = "invalid value for 'expiration_month', must be conform to the pattern /^(0[1-9]|1[012])$/.";
        }

        if (!is_null($this->container['expiration_year']) && (mb_strlen($this->container['expiration_year']) > 4)) {
            $invalidProperties[] = "invalid value for 'expiration_year', the character length must be smaller than or equal to 4.";
        }

        if (!is_null($this->container['expiration_year']) && !preg_match("/^[0-9]{4}$/", $this->container['expiration_year'])) {
            $invalidProperties[] = "invalid value for 'expiration_year', must be conform to the pattern /^[0-9]{4}$/.";
        }

        if (!is_null($this->container['security_code']) && (mb_strlen($this->container['security_code']) > 4)) {
            $invalidProperties[] = "invalid value for 'security_code', the character length must be smaller than or equal to 4.";
        }

        if (!is_null($this->container['security_code_indicator']) && (mb_strlen($this->container['security_code_indicator']) > 15)) {
            $invalidProperties[] = "invalid value for 'security_code_indicator', the character length must be smaller than or equal to 15.";
        }

        if (!is_null($this->container['bin']) && (mb_strlen($this->container['bin']) > 8)) {
            $invalidProperties[] = "invalid value for 'bin', the character length must be smaller than or equal to 8.";
        }

        if (!is_null($this->container['last4']) && (mb_strlen($this->container['last4']) > 4)) {
            $invalidProperties[] = "invalid value for 'last4', the character length must be smaller than or equal to 4.";
        }

        if (!is_null($this->container['scheme']) && (mb_strlen($this->container['scheme']) > 256)) {
            $invalidProperties[] = "invalid value for 'scheme', the character length must be smaller than or equal to 256.";
        }

        if (!is_null($this->container['beginning_balance']) && ($this->container['beginning_balance'] > 1.0E+18)) {
            $invalidProperties[] = "invalid value for 'beginning_balance', must be smaller than or equal to 1.0E+18.";
        }

        if (!is_null($this->container['ending_balance']) && ($this->container['ending_balance'] > 1.0E+18)) {
            $invalidProperties[] = "invalid value for 'ending_balance', must be smaller than or equal to 1.0E+18.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets card_data
     *
     * @return string|null
     */
    public function getCardData()
    {
        return $this->container['card_data'];
    }

    /**
     * Sets card_data
     *
     * @param string|null $card_data Card number or encrypted data.
     *
     * @return self
     */
    public function setCardData($card_data)
    {
        if (!is_null($card_data) && (mb_strlen($card_data) > 256)) {
            throw new \InvalidArgumentException('invalid length for $card_data when calling Card., must be smaller than or equal to 256.');
        }


        if (is_null($card_data)) {
            throw new \InvalidArgumentException('non-nullable card_data cannot be null');
        }

        $this->container['card_data'] = $card_data;

        return $this;
    }

    /**
     * Gets name_on_card
     *
     * @return string|null
     */
    public function getNameOnCard()
    {
        return $this->container['name_on_card'];
    }

    /**
     * Sets name_on_card
     *
     * @param string|null $name_on_card Cardholder name.
     *
     * @return self
     */
    public function setNameOnCard($name_on_card)
    {
        if (!is_null($name_on_card) && (mb_strlen($name_on_card) > 256)) {
            throw new \InvalidArgumentException('invalid length for $name_on_card when calling Card., must be smaller than or equal to 256.');
        }


        if (is_null($name_on_card)) {
            throw new \InvalidArgumentException('non-nullable name_on_card cannot be null');
        }

        $this->container['name_on_card'] = $name_on_card;

        return $this;
    }

    /**
     * Gets expiration_month
     *
     * @return string|null
     */
    public function getExpirationMonth()
    {
        return $this->container['expiration_month'];
    }

    /**
     * Sets expiration_month
     *
     * @param string|null $expiration_month 2-digit expiration month.
     *
     * @return self
     */
    public function setExpirationMonth($expiration_month)
    {

        if (!is_null($expiration_month) && (!preg_match("/^(0[1-9]|1[012])$/", $expiration_month))) {
            throw new \InvalidArgumentException("invalid value for \$expiration_month when calling Card., must conform to the pattern /^(0[1-9]|1[012])$/.");
        }


        if (is_null($expiration_month)) {
            throw new \InvalidArgumentException('non-nullable expiration_month cannot be null');
        }

        $this->container['expiration_month'] = $expiration_month;

        return $this;
    }

    /**
     * Gets expiration_year
     *
     * @return string|null
     */
    public function getExpirationYear()
    {
        return $this->container['expiration_year'];
    }

    /**
     * Sets expiration_year
     *
     * @param string|null $expiration_year 4-digit expiration year.
     *
     * @return self
     */
    public function setExpirationYear($expiration_year)
    {
        if (!is_null($expiration_year) && (mb_strlen($expiration_year) > 4)) {
            throw new \InvalidArgumentException('invalid length for $expiration_year when calling Card., must be smaller than or equal to 4.');
        }
        if (!is_null($expiration_year) && (!preg_match("/^[0-9]{4}$/", $expiration_year))) {
            throw new \InvalidArgumentException("invalid value for \$expiration_year when calling Card., must conform to the pattern /^[0-9]{4}$/.");
        }


        if (is_null($expiration_year)) {
            throw new \InvalidArgumentException('non-nullable expiration_year cannot be null');
        }

        $this->container['expiration_year'] = $expiration_year;

        return $this;
    }

    /**
     * Gets security_code
     *
     * @return string|null
     */
    public function getSecurityCode()
    {
        return $this->container['security_code'];
    }

    /**
     * Sets security_code
     *
     * @param string|null $security_code Card Security Code (CSC), Card Verification Data (CVD), Card Verification Number (CVN), Card Verification Value (CVV), Card Verification Code (CVC), Verification Code (V-code or V code), or Signature Panel Code (SPC).
     *
     * @return self
     */
    public function setSecurityCode($security_code)
    {
        if (!is_null($security_code) && (mb_strlen($security_code) > 4)) {
            throw new \InvalidArgumentException('invalid length for $security_code when calling Card., must be smaller than or equal to 4.');
        }


        if (is_null($security_code)) {
            throw new \InvalidArgumentException('non-nullable security_code cannot be null');
        }

        $this->container['security_code'] = $security_code;

        return $this;
    }

    /**
     * Gets security_code_indicator
     *
     * @return string|null
     */
    public function getSecurityCodeIndicator()
    {
        return $this->container['security_code_indicator'];
    }

    /**
     * Sets security_code_indicator
     *
     * @param string|null $security_code_indicator Indicates how the security code is passed.  Valid Values: * NOT_SUPPORTED (Default) * PROVIDED * VALUE_ILLEGIBLE * NOT_AVAILABLE
     *
     * @return self
     */
    public function setSecurityCodeIndicator($security_code_indicator)
    {
        if (!is_null($security_code_indicator) && (mb_strlen($security_code_indicator) > 15)) {
            throw new \InvalidArgumentException('invalid length for $security_code_indicator when calling Card., must be smaller than or equal to 15.');
        }


        if (is_null($security_code_indicator)) {
            throw new \InvalidArgumentException('non-nullable security_code_indicator cannot be null');
        }

        $this->container['security_code_indicator'] = $security_code_indicator;

        return $this;
    }

    /**
     * Gets bin
     *
     * @return string|null
     */
    public function getBin()
    {
        return $this->container['bin'];
    }

    /**
     * Sets bin
     *
     * @param string|null $bin Bank Identification Number (BIN), the initial set of four to six numbers of the Primary Account Number (PAN). The BIN identifies the issuer and Level 2/3 qualifications.
     *
     * @return self
     */
    public function setBin($bin)
    {
        if (!is_null($bin) && (mb_strlen($bin) > 8)) {
            throw new \InvalidArgumentException('invalid length for $bin when calling Card., must be smaller than or equal to 8.');
        }


        if (is_null($bin)) {
            throw new \InvalidArgumentException('non-nullable bin cannot be null');
        }

        $this->container['bin'] = $bin;

        return $this;
    }

    /**
     * Gets last4
     *
     * @return string|null
     */
    public function getLast4()
    {
        return $this->container['last4'];
    }

    /**
     * Sets last4
     *
     * @param string|null $last4 Contains the last four digits of the Primary Account Number (PAN).
     *
     * @return self
     */
    public function setLast4($last4)
    {
        if (!is_null($last4) && (mb_strlen($last4) > 4)) {
            throw new \InvalidArgumentException('invalid length for $last4 when calling Card., must be smaller than or equal to 4.');
        }


        if (is_null($last4)) {
            throw new \InvalidArgumentException('non-nullable last4 cannot be null');
        }

        $this->container['last4'] = $last4;

        return $this;
    }

    /**
     * Gets scheme
     *
     * @return string|null
     */
    public function getScheme()
    {
        return $this->container['scheme'];
    }

    /**
     * Sets scheme
     *
     * @param string|null $scheme Card brand.
     *
     * @return self
     */
    public function setScheme($scheme)
    {
        if (!is_null($scheme) && (mb_strlen($scheme) > 256)) {
            throw new \InvalidArgumentException('invalid length for $scheme when calling Card., must be smaller than or equal to 256.');
        }


        if (is_null($scheme)) {
            throw new \InvalidArgumentException('non-nullable scheme cannot be null');
        }

        $this->container['scheme'] = $scheme;

        return $this;
    }

    /**
     * Gets beginning_balance
     *
     * @return float|null
     */
    public function getBeginningBalance()
    {
        return $this->container['beginning_balance'];
    }

    /**
     * Sets beginning_balance
     *
     * @param float|null $beginning_balance Beginning card balance.
     *
     * @return self
     */
    public function setBeginningBalance($beginning_balance)
    {

        if (!is_null($beginning_balance) && ($beginning_balance > 1.0E+18)) {
            throw new \InvalidArgumentException('invalid value for $beginning_balance when calling Card., must be smaller than or equal to 1.0E+18.');
        }


        if (is_null($beginning_balance)) {
            throw new \InvalidArgumentException('non-nullable beginning_balance cannot be null');
        }

        $this->container['beginning_balance'] = $beginning_balance;

        return $this;
    }

    /**
     * Gets ending_balance
     *
     * @return float|null
     */
    public function getEndingBalance()
    {
        return $this->container['ending_balance'];
    }

    /**
     * Sets ending_balance
     *
     * @param float|null $ending_balance Ending card balance.
     *
     * @return self
     */
    public function setEndingBalance($ending_balance)
    {

        if (!is_null($ending_balance) && ($ending_balance > 1.0E+18)) {
            throw new \InvalidArgumentException('invalid value for $ending_balance when calling Card., must be smaller than or equal to 1.0E+18.');
        }


        if (is_null($ending_balance)) {
            throw new \InvalidArgumentException('non-nullable ending_balance cannot be null');
        }

        $this->container['ending_balance'] = $ending_balance;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


