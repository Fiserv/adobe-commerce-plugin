<?php
/**
 * MerchantDetails
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Fiserv\Payments\Lib\CommerceHub
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Commerce Hub
 *
 * This API Specification is designed to provide technical guidance required to consume and integrate with our APIs for payment processing.
 *
 * The version of the OpenAPI document: v1.24.08
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.3.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Fiserv\Payments\Lib\CommerceHub\Model;

use \ArrayAccess;
use \Fiserv\Payments\Lib\CommerceHub\ObjectSerializer;

/**
 * MerchantDetails Class Doc Comment
 *
 * @category Class
 * @description Used to pass &lt;a href&#x3D;\&quot;../docs?path&#x3D;docs/Resources/Master-Data/Merchant-Details.md\&quot;&gt;merchant&lt;/a&gt; specific data during the transaction.
 * @package  Fiserv\Payments\Lib\CommerceHub
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class MerchantDetails implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'MerchantDetails';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'token_type' => 'string',
        'store_id' => 'string',
        'terminal_id' => 'string',
        'merchant_id' => 'string',
        'site_type_indicator' => 'string',
        'dba_name' => 'string',
        'promotion_code' => 'string',
        'terminal_lane_number' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'token_type' => null,
        'store_id' => null,
        'terminal_id' => null,
        'merchant_id' => null,
        'site_type_indicator' => null,
        'dba_name' => null,
        'promotion_code' => null,
        'terminal_lane_number' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'token_type' => false,
        'store_id' => false,
        'terminal_id' => false,
        'merchant_id' => false,
        'site_type_indicator' => false,
        'dba_name' => false,
        'promotion_code' => false,
        'terminal_lane_number' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'token_type' => 'tokenType',
        'store_id' => 'storeId',
        'terminal_id' => 'terminalId',
        'merchant_id' => 'merchantId',
        'site_type_indicator' => 'siteTypeIndicator',
        'dba_name' => 'dbaName',
        'promotion_code' => 'promotionCode',
        'terminal_lane_number' => 'terminalLaneNumber'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'token_type' => 'setTokenType',
        'store_id' => 'setStoreId',
        'terminal_id' => 'setTerminalId',
        'merchant_id' => 'setMerchantId',
        'site_type_indicator' => 'setSiteTypeIndicator',
        'dba_name' => 'setDbaName',
        'promotion_code' => 'setPromotionCode',
        'terminal_lane_number' => 'setTerminalLaneNumber'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'token_type' => 'getTokenType',
        'store_id' => 'getStoreId',
        'terminal_id' => 'getTerminalId',
        'merchant_id' => 'getMerchantId',
        'site_type_indicator' => 'getSiteTypeIndicator',
        'dba_name' => 'getDbaName',
        'promotion_code' => 'getPromotionCode',
        'terminal_lane_number' => 'getTerminalLaneNumber'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('token_type', $data ?? [], null);
        $this->setIfExists('store_id', $data ?? [], null);
        $this->setIfExists('terminal_id', $data ?? [], null);
        $this->setIfExists('merchant_id', $data ?? [], null);
        $this->setIfExists('site_type_indicator', $data ?? [], null);
        $this->setIfExists('dba_name', $data ?? [], null);
        $this->setIfExists('promotion_code', $data ?? [], null);
        $this->setIfExists('terminal_lane_number', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['token_type']) && (mb_strlen($this->container['token_type']) > 64)) {
            $invalidProperties[] = "invalid value for 'token_type', the character length must be smaller than or equal to 64.";
        }

        if (!is_null($this->container['store_id']) && (mb_strlen($this->container['store_id']) > 1024)) {
            $invalidProperties[] = "invalid value for 'store_id', the character length must be smaller than or equal to 1024.";
        }

        if (!is_null($this->container['terminal_id']) && (mb_strlen($this->container['terminal_id']) > 1024)) {
            $invalidProperties[] = "invalid value for 'terminal_id', the character length must be smaller than or equal to 1024.";
        }

        if (!is_null($this->container['merchant_id']) && (mb_strlen($this->container['merchant_id']) > 1024)) {
            $invalidProperties[] = "invalid value for 'merchant_id', the character length must be smaller than or equal to 1024.";
        }

        if (!is_null($this->container['site_type_indicator']) && (mb_strlen($this->container['site_type_indicator']) > 64)) {
            $invalidProperties[] = "invalid value for 'site_type_indicator', the character length must be smaller than or equal to 64.";
        }

        if (!is_null($this->container['dba_name']) && (mb_strlen($this->container['dba_name']) > 1024)) {
            $invalidProperties[] = "invalid value for 'dba_name', the character length must be smaller than or equal to 1024.";
        }

        if (!is_null($this->container['promotion_code']) && (mb_strlen($this->container['promotion_code']) > 1024)) {
            $invalidProperties[] = "invalid value for 'promotion_code', the character length must be smaller than or equal to 1024.";
        }

        if (!is_null($this->container['terminal_lane_number']) && (mb_strlen($this->container['terminal_lane_number']) > 16)) {
            $invalidProperties[] = "invalid value for 'terminal_lane_number', the character length must be smaller than or equal to 16.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets token_type
     *
     * @return string|null
     */
    public function getTokenType()
    {
        return $this->container['token_type'];
    }

    /**
     * Sets token_type
     *
     * @param string|null $token_type Specific token type requested by the merchant.
     *
     * @return self
     */
    public function setTokenType($token_type)
    {
        if (is_null($token_type)) {
            throw new \InvalidArgumentException('non-nullable token_type cannot be null');
        }
        if ((mb_strlen($token_type) > 64)) {
            throw new \InvalidArgumentException('invalid length for $token_type when calling MerchantDetails., must be smaller than or equal to 64.');
        }

        $this->container['token_type'] = $token_type;

        return $this;
    }

    /**
     * Gets store_id
     *
     * @return string|null
     */
    public function getStoreId()
    {
        return $this->container['store_id'];
    }

    /**
     * Sets store_id
     *
     * @param string|null $store_id The unique ID or number used to identify the unique location, store, or site.
     *
     * @return self
     */
    public function setStoreId($store_id)
    {
        if (is_null($store_id)) {
            throw new \InvalidArgumentException('non-nullable store_id cannot be null');
        }
        if ((mb_strlen($store_id) > 1024)) {
            throw new \InvalidArgumentException('invalid length for $store_id when calling MerchantDetails., must be smaller than or equal to 1024.');
        }

        $this->container['store_id'] = $store_id;

        return $this;
    }

    /**
     * Gets terminal_id
     *
     * @return string|null
     */
    public function getTerminalId()
    {
        return $this->container['terminal_id'];
    }

    /**
     * Sets terminal_id
     *
     * @param string|null $terminal_id Identifies the specific device or point of entry where the transaction originated. Value assigned by the acquirer, gateway or a <a href=\"../docs?path=docs/Resources/Guides/BYOID.md\">merchant custom identifier</a>.
     *
     * @return self
     */
    public function setTerminalId($terminal_id)
    {
        if (is_null($terminal_id)) {
            throw new \InvalidArgumentException('non-nullable terminal_id cannot be null');
        }
        if ((mb_strlen($terminal_id) > 1024)) {
            throw new \InvalidArgumentException('invalid length for $terminal_id when calling MerchantDetails., must be smaller than or equal to 1024.');
        }

        $this->container['terminal_id'] = $terminal_id;

        return $this;
    }

    /**
     * Gets merchant_id
     *
     * @return string|null
     */
    public function getMerchantId()
    {
        return $this->container['merchant_id'];
    }

    /**
     * Sets merchant_id
     *
     * @param string|null $merchant_id A unique ID used to identify the Merchant. Value assigned by the acquirer, gateway or a <a href=\"../docs?path=docs/Resources/Guides/BYOID.md\">merchant custom identifier</a>.
     *
     * @return self
     */
    public function setMerchantId($merchant_id)
    {
        if (is_null($merchant_id)) {
            throw new \InvalidArgumentException('non-nullable merchant_id cannot be null');
        }
        if ((mb_strlen($merchant_id) > 1024)) {
            throw new \InvalidArgumentException('invalid length for $merchant_id when calling MerchantDetails., must be smaller than or equal to 1024.');
        }

        $this->container['merchant_id'] = $merchant_id;

        return $this;
    }

    /**
     * Gets site_type_indicator
     *
     * @return string|null
     */
    public function getSiteTypeIndicator()
    {
        return $this->container['site_type_indicator'];
    }

    /**
     * Sets site_type_indicator
     *
     * @param string|null $site_type_indicator This field identifies whether the site is COMMERCIAL or RETAIL.
     *
     * @return self
     */
    public function setSiteTypeIndicator($site_type_indicator)
    {
        if (is_null($site_type_indicator)) {
            throw new \InvalidArgumentException('non-nullable site_type_indicator cannot be null');
        }
        if ((mb_strlen($site_type_indicator) > 64)) {
            throw new \InvalidArgumentException('invalid length for $site_type_indicator when calling MerchantDetails., must be smaller than or equal to 64.');
        }

        $this->container['site_type_indicator'] = $site_type_indicator;

        return $this;
    }

    /**
     * Gets dba_name
     *
     * @return string|null
     */
    public function getDbaName()
    {
        return $this->container['dba_name'];
    }

    /**
     * Sets dba_name
     *
     * @param string|null $dba_name The first 3 characters of this field are the abbreviated Payment Facilitator name followed by an asterisk (*) or equal (=) followed by the sub merchant name.
     *
     * @return self
     */
    public function setDbaName($dba_name)
    {
        if (is_null($dba_name)) {
            throw new \InvalidArgumentException('non-nullable dba_name cannot be null');
        }
        if ((mb_strlen($dba_name) > 1024)) {
            throw new \InvalidArgumentException('invalid length for $dba_name when calling MerchantDetails., must be smaller than or equal to 1024.');
        }

        $this->container['dba_name'] = $dba_name;

        return $this;
    }

    /**
     * Gets promotion_code
     *
     * @return string|null
     */
    public function getPromotionCode()
    {
        return $this->container['promotion_code'];
    }

    /**
     * Sets promotion_code
     *
     * @param string|null $promotion_code Promotion code.
     *
     * @return self
     */
    public function setPromotionCode($promotion_code)
    {
        if (is_null($promotion_code)) {
            throw new \InvalidArgumentException('non-nullable promotion_code cannot be null');
        }
        if ((mb_strlen($promotion_code) > 1024)) {
            throw new \InvalidArgumentException('invalid length for $promotion_code when calling MerchantDetails., must be smaller than or equal to 1024.');
        }

        $this->container['promotion_code'] = $promotion_code;

        return $this;
    }

    /**
     * Gets terminal_lane_number
     *
     * @return string|null
     */
    public function getTerminalLaneNumber()
    {
        return $this->container['terminal_lane_number'];
    }

    /**
     * Sets terminal_lane_number
     *
     * @param string|null $terminal_lane_number Terminal lane number, register number, or pump number.
     *
     * @return self
     */
    public function setTerminalLaneNumber($terminal_lane_number)
    {
        if (is_null($terminal_lane_number)) {
            throw new \InvalidArgumentException('non-nullable terminal_lane_number cannot be null');
        }
        if ((mb_strlen($terminal_lane_number) > 16)) {
            throw new \InvalidArgumentException('invalid length for $terminal_lane_number when calling MerchantDetails., must be smaller than or equal to 16.');
        }

        $this->container['terminal_lane_number'] = $terminal_lane_number;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


