<?php
/**
 * Address
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Fiserv\Payments\Lib\CommerceHub
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Commerce Hub
 *
 * This API Specification is designed to provide technical guidance required to consume and integrate with our APIs for payment processing.
 *
 * The version of the OpenAPI document: v1.24.08
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.3.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Fiserv\Payments\Lib\CommerceHub\Model;

use \ArrayAccess;
use \Fiserv\Payments\Lib\CommerceHub\ObjectSerializer;

/**
 * Address Class Doc Comment
 *
 * @category Class
 * @description Model for &lt;a href&#x3D;\&quot;../docs?path&#x3D;docs/Resources/Master-Data/Address.md\&quot;&gt;address&lt;/a&gt; information.
 * @package  Fiserv\Payments\Lib\CommerceHub
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class Address implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Address';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'street' => 'string',
        'house_number_or_name' => 'string',
        'recipient_name_or_address' => 'string',
        'city' => 'string',
        'state_or_province' => 'string',
        'postal_code' => 'string',
        'country' => 'string',
        'county' => 'string',
        'address_history' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'street' => null,
        'house_number_or_name' => null,
        'recipient_name_or_address' => null,
        'city' => null,
        'state_or_province' => null,
        'postal_code' => null,
        'country' => null,
        'county' => null,
        'address_history' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'street' => false,
        'house_number_or_name' => false,
        'recipient_name_or_address' => false,
        'city' => false,
        'state_or_province' => false,
        'postal_code' => false,
        'country' => false,
        'county' => false,
        'address_history' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'street' => 'street',
        'house_number_or_name' => 'houseNumberOrName',
        'recipient_name_or_address' => 'recipientNameOrAddress',
        'city' => 'city',
        'state_or_province' => 'stateOrProvince',
        'postal_code' => 'postalCode',
        'country' => 'country',
        'county' => 'county',
        'address_history' => 'addressHistory'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'street' => 'setStreet',
        'house_number_or_name' => 'setHouseNumberOrName',
        'recipient_name_or_address' => 'setRecipientNameOrAddress',
        'city' => 'setCity',
        'state_or_province' => 'setStateOrProvince',
        'postal_code' => 'setPostalCode',
        'country' => 'setCountry',
        'county' => 'setCounty',
        'address_history' => 'setAddressHistory'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'street' => 'getStreet',
        'house_number_or_name' => 'getHouseNumberOrName',
        'recipient_name_or_address' => 'getRecipientNameOrAddress',
        'city' => 'getCity',
        'state_or_province' => 'getStateOrProvince',
        'postal_code' => 'getPostalCode',
        'country' => 'getCountry',
        'county' => 'getCounty',
        'address_history' => 'getAddressHistory'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('street', $data ?? [], null);
        $this->setIfExists('house_number_or_name', $data ?? [], null);
        $this->setIfExists('recipient_name_or_address', $data ?? [], null);
        $this->setIfExists('city', $data ?? [], null);
        $this->setIfExists('state_or_province', $data ?? [], null);
        $this->setIfExists('postal_code', $data ?? [], null);
        $this->setIfExists('country', $data ?? [], null);
        $this->setIfExists('county', $data ?? [], null);
        $this->setIfExists('address_history', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['street']) && (mb_strlen($this->container['street']) > 256)) {
            $invalidProperties[] = "invalid value for 'street', the character length must be smaller than or equal to 256.";
        }

        if (!is_null($this->container['house_number_or_name']) && (mb_strlen($this->container['house_number_or_name']) > 256)) {
            $invalidProperties[] = "invalid value for 'house_number_or_name', the character length must be smaller than or equal to 256.";
        }

        if (!is_null($this->container['recipient_name_or_address']) && (mb_strlen($this->container['recipient_name_or_address']) > 256)) {
            $invalidProperties[] = "invalid value for 'recipient_name_or_address', the character length must be smaller than or equal to 256.";
        }

        if (!is_null($this->container['city']) && (mb_strlen($this->container['city']) > 256)) {
            $invalidProperties[] = "invalid value for 'city', the character length must be smaller than or equal to 256.";
        }

        if (!is_null($this->container['state_or_province']) && (mb_strlen($this->container['state_or_province']) > 256)) {
            $invalidProperties[] = "invalid value for 'state_or_province', the character length must be smaller than or equal to 256.";
        }

        if (!is_null($this->container['postal_code']) && (mb_strlen($this->container['postal_code']) > 10)) {
            $invalidProperties[] = "invalid value for 'postal_code', the character length must be smaller than or equal to 10.";
        }

        if (!is_null($this->container['country']) && (mb_strlen($this->container['country']) > 256)) {
            $invalidProperties[] = "invalid value for 'country', the character length must be smaller than or equal to 256.";
        }

        if (!is_null($this->container['county']) && (mb_strlen($this->container['county']) > 256)) {
            $invalidProperties[] = "invalid value for 'county', the character length must be smaller than or equal to 256.";
        }

        if (!is_null($this->container['address_history']) && (mb_strlen($this->container['address_history']) > 32)) {
            $invalidProperties[] = "invalid value for 'address_history', the character length must be smaller than or equal to 32.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets street
     *
     * @return string|null
     */
    public function getStreet()
    {
        return $this->container['street'];
    }

    /**
     * Sets street
     *
     * @param string|null $street Street address.
     *
     * @return self
     */
    public function setStreet($street)
    {
        if (is_null($street)) {
            throw new \InvalidArgumentException('non-nullable street cannot be null');
        }
        if ((mb_strlen($street) > 256)) {
            throw new \InvalidArgumentException('invalid length for $street when calling Address., must be smaller than or equal to 256.');
        }

        $this->container['street'] = $street;

        return $this;
    }

    /**
     * Gets house_number_or_name
     *
     * @return string|null
     */
    public function getHouseNumberOrName()
    {
        return $this->container['house_number_or_name'];
    }

    /**
     * Sets house_number_or_name
     *
     * @param string|null $house_number_or_name Secondary address information, e.g. house number or name.
     *
     * @return self
     */
    public function setHouseNumberOrName($house_number_or_name)
    {
        if (is_null($house_number_or_name)) {
            throw new \InvalidArgumentException('non-nullable house_number_or_name cannot be null');
        }
        if ((mb_strlen($house_number_or_name) > 256)) {
            throw new \InvalidArgumentException('invalid length for $house_number_or_name when calling Address., must be smaller than or equal to 256.');
        }

        $this->container['house_number_or_name'] = $house_number_or_name;

        return $this;
    }

    /**
     * Gets recipient_name_or_address
     *
     * @return string|null
     */
    public function getRecipientNameOrAddress()
    {
        return $this->container['recipient_name_or_address'];
    }

    /**
     * Sets recipient_name_or_address
     *
     * @param string|null $recipient_name_or_address Tertiary address information e.g. recipient name, company name or address.
     *
     * @return self
     */
    public function setRecipientNameOrAddress($recipient_name_or_address)
    {
        if (is_null($recipient_name_or_address)) {
            throw new \InvalidArgumentException('non-nullable recipient_name_or_address cannot be null');
        }
        if ((mb_strlen($recipient_name_or_address) > 256)) {
            throw new \InvalidArgumentException('invalid length for $recipient_name_or_address when calling Address., must be smaller than or equal to 256.');
        }

        $this->container['recipient_name_or_address'] = $recipient_name_or_address;

        return $this;
    }

    /**
     * Gets city
     *
     * @return string|null
     */
    public function getCity()
    {
        return $this->container['city'];
    }

    /**
     * Sets city
     *
     * @param string|null $city City or locality.
     *
     * @return self
     */
    public function setCity($city)
    {
        if (is_null($city)) {
            throw new \InvalidArgumentException('non-nullable city cannot be null');
        }
        if ((mb_strlen($city) > 256)) {
            throw new \InvalidArgumentException('invalid length for $city when calling Address., must be smaller than or equal to 256.');
        }

        $this->container['city'] = $city;

        return $this;
    }

    /**
     * Gets state_or_province
     *
     * @return string|null
     */
    public function getStateOrProvince()
    {
        return $this->container['state_or_province'];
    }

    /**
     * Sets state_or_province
     *
     * @param string|null $state_or_province State or province.
     *
     * @return self
     */
    public function setStateOrProvince($state_or_province)
    {
        if (is_null($state_or_province)) {
            throw new \InvalidArgumentException('non-nullable state_or_province cannot be null');
        }
        if ((mb_strlen($state_or_province) > 256)) {
            throw new \InvalidArgumentException('invalid length for $state_or_province when calling Address., must be smaller than or equal to 256.');
        }

        $this->container['state_or_province'] = $state_or_province;

        return $this;
    }

    /**
     * Gets postal_code
     *
     * @return string|null
     */
    public function getPostalCode()
    {
        return $this->container['postal_code'];
    }

    /**
     * Sets postal_code
     *
     * @param string|null $postal_code ZIP code or postal code.
     *
     * @return self
     */
    public function setPostalCode($postal_code)
    {
        if (is_null($postal_code)) {
            throw new \InvalidArgumentException('non-nullable postal_code cannot be null');
        }
        if ((mb_strlen($postal_code) > 10)) {
            throw new \InvalidArgumentException('invalid length for $postal_code when calling Address., must be smaller than or equal to 10.');
        }

        $this->container['postal_code'] = $postal_code;

        return $this;
    }

    /**
     * Gets country
     *
     * @return string|null
     */
    public function getCountry()
    {
        return $this->container['country'];
    }

    /**
     * Sets country
     *
     * @param string|null $country ISO-3166-1 alpha-2, alpha-3, numeric or full country name.
     *
     * @return self
     */
    public function setCountry($country)
    {
        if (is_null($country)) {
            throw new \InvalidArgumentException('non-nullable country cannot be null');
        }
        if ((mb_strlen($country) > 256)) {
            throw new \InvalidArgumentException('invalid length for $country when calling Address., must be smaller than or equal to 256.');
        }

        $this->container['country'] = $country;

        return $this;
    }

    /**
     * Gets county
     *
     * @return string|null
     */
    public function getCounty()
    {
        return $this->container['county'];
    }

    /**
     * Sets county
     *
     * @param string|null $county The 5-digit number or full county name identifying the U.S. county as defined by FIPS, indicating where the transaction occurred. Commonly used with EBT transactions.
     *
     * @return self
     */
    public function setCounty($county)
    {
        if (is_null($county)) {
            throw new \InvalidArgumentException('non-nullable county cannot be null');
        }
        if ((mb_strlen($county) > 256)) {
            throw new \InvalidArgumentException('invalid length for $county when calling Address., must be smaller than or equal to 256.');
        }

        $this->container['county'] = $county;

        return $this;
    }

    /**
     * Gets address_history
     *
     * @return string|null
     */
    public function getAddressHistory()
    {
        return $this->container['address_history'];
    }

    /**
     * Sets address_history
     *
     * @param string|null $address_history Update history of the address on file.  Valid Values: * FIRST * LESS_THAN_30_DAYS * 30_60_DAYS * 60_90_DAYS * OVER_90_DAYS
     *
     * @return self
     */
    public function setAddressHistory($address_history)
    {
        if (is_null($address_history)) {
            throw new \InvalidArgumentException('non-nullable address_history cannot be null');
        }
        if ((mb_strlen($address_history) > 32)) {
            throw new \InvalidArgumentException('invalid length for $address_history when calling Address., must be smaller than or equal to 32.');
        }

        $this->container['address_history'] = $address_history;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


