<?php
/**
 * TransactionProcessingDetails
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Fiserv\Payments\Lib\CommerceHub
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Payments
 *
 * This API Specification is designed to provide technical guidance required to consume and integrate with our APIs for payment processing.
 *
 * The version of the OpenAPI document: v1.3.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.2.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Fiserv\Payments\Lib\CommerceHub\Model;

use \ArrayAccess;
use \Fiserv\Payments\Lib\CommerceHub\ObjectSerializer;

/**
 * TransactionProcessingDetails Class Doc Comment
 *
 * @category Class
 * @description Contains the &lt;a href&#x3D;\&quot;../docs?path&#x3D;docs/Resources/Master-Data/Gateway-Response.md#transaction-processing-details\&quot;&gt;transaction response&lt;/a&gt; details.
 * @package  Fiserv\Payments\Lib\CommerceHub
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class TransactionProcessingDetails implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'TransactionProcessingDetails';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'order_id' => 'string',
        'transaction_timestamp' => '\DateTime',
        'api_trace_id' => 'string',
        'client_request_id' => 'string',
        'transaction_id' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'order_id' => null,
        'transaction_timestamp' => 'date-time',
        'api_trace_id' => null,
        'client_request_id' => null,
        'transaction_id' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'order_id' => false,
		'transaction_timestamp' => false,
		'api_trace_id' => false,
		'client_request_id' => false,
		'transaction_id' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'order_id' => 'orderId',
        'transaction_timestamp' => 'transactionTimestamp',
        'api_trace_id' => 'apiTraceId',
        'client_request_id' => 'clientRequestId',
        'transaction_id' => 'transactionId'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'order_id' => 'setOrderId',
        'transaction_timestamp' => 'setTransactionTimestamp',
        'api_trace_id' => 'setApiTraceId',
        'client_request_id' => 'setClientRequestId',
        'transaction_id' => 'setTransactionId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'order_id' => 'getOrderId',
        'transaction_timestamp' => 'getTransactionTimestamp',
        'api_trace_id' => 'getApiTraceId',
        'client_request_id' => 'getClientRequestId',
        'transaction_id' => 'getTransactionId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('order_id', $data ?? [], null);
        $this->setIfExists('transaction_timestamp', $data ?? [], null);
        $this->setIfExists('api_trace_id', $data ?? [], null);
        $this->setIfExists('client_request_id', $data ?? [], null);
        $this->setIfExists('transaction_id', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['order_id']) && (mb_strlen($this->container['order_id']) > 40)) {
            $invalidProperties[] = "invalid value for 'order_id', the character length must be smaller than or equal to 40.";
        }

        if (!is_null($this->container['api_trace_id']) && (mb_strlen($this->container['api_trace_id']) > 32)) {
            $invalidProperties[] = "invalid value for 'api_trace_id', the character length must be smaller than or equal to 32.";
        }

        if (!is_null($this->container['api_trace_id']) && !preg_match("/^[a-f0-9]{32}$/", $this->container['api_trace_id'])) {
            $invalidProperties[] = "invalid value for 'api_trace_id', must be conform to the pattern /^[a-f0-9]{32}$/.";
        }

        if (!is_null($this->container['client_request_id']) && (mb_strlen($this->container['client_request_id']) > 64)) {
            $invalidProperties[] = "invalid value for 'client_request_id', the character length must be smaller than or equal to 64.";
        }

        if (!is_null($this->container['transaction_id']) && (mb_strlen($this->container['transaction_id']) > 40)) {
            $invalidProperties[] = "invalid value for 'transaction_id', the character length must be smaller than or equal to 40.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets order_id
     *
     * @return string|null
     */
    public function getOrderId()
    {
        return $this->container['order_id'];
    }

    /**
     * Sets order_id
     *
     * @param string|null $order_id Order identifier returned in the parameter orderId from a Charge transaction.
     *
     * @return self
     */
    public function setOrderId($order_id)
    {
        if (!is_null($order_id) && (mb_strlen($order_id) > 40)) {
            throw new \InvalidArgumentException('invalid length for $order_id when calling TransactionProcessingDetails., must be smaller than or equal to 40.');
        }


        if (is_null($order_id)) {
            throw new \InvalidArgumentException('non-nullable order_id cannot be null');
        }

        $this->container['order_id'] = $order_id;

        return $this;
    }

    /**
     * Gets transaction_timestamp
     *
     * @return \DateTime|null
     */
    public function getTransactionTimestamp()
    {
        return $this->container['transaction_timestamp'];
    }

    /**
     * Sets transaction_timestamp
     *
     * @param \DateTime|null $transaction_timestamp Date and time the transaction occurred in YYYY-MM-DDThh:mm:ssZ format.
     *
     * @return self
     */
    public function setTransactionTimestamp($transaction_timestamp)
    {

        if (is_null($transaction_timestamp)) {
            throw new \InvalidArgumentException('non-nullable transaction_timestamp cannot be null');
        }

        $this->container['transaction_timestamp'] = $transaction_timestamp;

        return $this;
    }

    /**
     * Gets api_trace_id
     *
     * @return string|null
     */
    public function getApiTraceId()
    {
        return $this->container['api_trace_id'];
    }

    /**
     * Sets api_trace_id
     *
     * @param string|null $api_trace_id Request identifier in API that can be used to request logs from the support team.
     *
     * @return self
     */
    public function setApiTraceId($api_trace_id)
    {
        if (!is_null($api_trace_id) && (mb_strlen($api_trace_id) > 32)) {
            throw new \InvalidArgumentException('invalid length for $api_trace_id when calling TransactionProcessingDetails., must be smaller than or equal to 32.');
        }
        if (!is_null($api_trace_id) && (!preg_match("/^[a-f0-9]{32}$/", $api_trace_id))) {
            throw new \InvalidArgumentException("invalid value for \$api_trace_id when calling TransactionProcessingDetails., must conform to the pattern /^[a-f0-9]{32}$/.");
        }


        if (is_null($api_trace_id)) {
            throw new \InvalidArgumentException('non-nullable api_trace_id cannot be null');
        }

        $this->container['api_trace_id'] = $api_trace_id;

        return $this;
    }

    /**
     * Gets client_request_id
     *
     * @return string|null
     */
    public function getClientRequestId()
    {
        return $this->container['client_request_id'];
    }

    /**
     * Sets client_request_id
     *
     * @param string|null $client_request_id Echoes back the value in the request header for tracking.
     *
     * @return self
     */
    public function setClientRequestId($client_request_id)
    {
        if (!is_null($client_request_id) && (mb_strlen($client_request_id) > 64)) {
            throw new \InvalidArgumentException('invalid length for $client_request_id when calling TransactionProcessingDetails., must be smaller than or equal to 64.');
        }


        if (is_null($client_request_id)) {
            throw new \InvalidArgumentException('non-nullable client_request_id cannot be null');
        }

        $this->container['client_request_id'] = $client_request_id;

        return $this;
    }

    /**
     * Gets transaction_id
     *
     * @return string|null
     */
    public function getTransactionId()
    {
        return $this->container['transaction_id'];
    }

    /**
     * Sets transaction_id
     *
     * @param string|null $transaction_id Unique identifier for each transaction on the gateway. This value will be populated for the secondary transaction from the path.
     *
     * @return self
     */
    public function setTransactionId($transaction_id)
    {
        if (!is_null($transaction_id) && (mb_strlen($transaction_id) > 40)) {
            throw new \InvalidArgumentException('invalid length for $transaction_id when calling TransactionProcessingDetails., must be smaller than or equal to 40.');
        }


        if (is_null($transaction_id)) {
            throw new \InvalidArgumentException('non-nullable transaction_id cannot be null');
        }

        $this->container['transaction_id'] = $transaction_id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


