<?php
/**
 * Mastercard
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Fiserv\Payments\Lib\CommerceHub
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Payments
 *
 * This API Specification is designed to provide technical guidance required to consume and integrate with our APIs for payment processing.
 *
 * The version of the OpenAPI document: v1.3.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.2.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Fiserv\Payments\Lib\CommerceHub\Model;
use \Fiserv\Payments\Lib\CommerceHub\ObjectSerializer;

/**
 * Mastercard Class Doc Comment
 *
 * @category Class
 * @package  Fiserv\Payments\Lib\CommerceHub
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class Mastercard extends Network
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Mastercard';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'interchange_compliance_indicator' => 'string',
        'bank_net_ref_number' => 'string',
        'bank_net_date' => 'string',
        'cvc_error_indicator' => 'string',
        'transaction_integrity_class' => 'string',
        'x_code_response' => 'string',
        'chip_crypto_value' => 'string',
        'card_data_output_capability' => 'string',
        'terminal_data_output_capability' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'interchange_compliance_indicator' => null,
        'bank_net_ref_number' => null,
        'bank_net_date' => null,
        'cvc_error_indicator' => null,
        'transaction_integrity_class' => null,
        'x_code_response' => null,
        'chip_crypto_value' => null,
        'card_data_output_capability' => null,
        'terminal_data_output_capability' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'interchange_compliance_indicator' => false,
		'bank_net_ref_number' => false,
		'bank_net_date' => false,
		'cvc_error_indicator' => false,
		'transaction_integrity_class' => false,
		'x_code_response' => false,
		'chip_crypto_value' => false,
		'card_data_output_capability' => false,
		'terminal_data_output_capability' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes + parent::openAPITypes();
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats + parent::openAPIFormats();
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables + parent::openAPINullables();
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'interchange_compliance_indicator' => 'interchangeComplianceIndicator',
        'bank_net_ref_number' => 'bankNetRefNumber',
        'bank_net_date' => 'bankNetDate',
        'cvc_error_indicator' => 'cvcErrorIndicator',
        'transaction_integrity_class' => 'transactionIntegrityClass',
        'x_code_response' => 'xCodeResponse',
        'chip_crypto_value' => 'chipCryptoValue',
        'card_data_output_capability' => 'cardDataOutputCapability',
        'terminal_data_output_capability' => 'terminalDataOutputCapability'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'interchange_compliance_indicator' => 'setInterchangeComplianceIndicator',
        'bank_net_ref_number' => 'setBankNetRefNumber',
        'bank_net_date' => 'setBankNetDate',
        'cvc_error_indicator' => 'setCvcErrorIndicator',
        'transaction_integrity_class' => 'setTransactionIntegrityClass',
        'x_code_response' => 'setXCodeResponse',
        'chip_crypto_value' => 'setChipCryptoValue',
        'card_data_output_capability' => 'setCardDataOutputCapability',
        'terminal_data_output_capability' => 'setTerminalDataOutputCapability'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'interchange_compliance_indicator' => 'getInterchangeComplianceIndicator',
        'bank_net_ref_number' => 'getBankNetRefNumber',
        'bank_net_date' => 'getBankNetDate',
        'cvc_error_indicator' => 'getCvcErrorIndicator',
        'transaction_integrity_class' => 'getTransactionIntegrityClass',
        'x_code_response' => 'getXCodeResponse',
        'chip_crypto_value' => 'getChipCryptoValue',
        'card_data_output_capability' => 'getCardDataOutputCapability',
        'terminal_data_output_capability' => 'getTerminalDataOutputCapability'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return parent::attributeMap() + self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return parent::setters() + self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return parent::getters() + self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }



    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        parent::__construct($data);

        $this->setIfExists('interchange_compliance_indicator', $data ?? [], null);
        $this->setIfExists('bank_net_ref_number', $data ?? [], null);
        $this->setIfExists('bank_net_date', $data ?? [], null);
        $this->setIfExists('cvc_error_indicator', $data ?? [], null);
        $this->setIfExists('transaction_integrity_class', $data ?? [], null);
        $this->setIfExists('x_code_response', $data ?? [], null);
        $this->setIfExists('chip_crypto_value', $data ?? [], null);
        $this->setIfExists('card_data_output_capability', $data ?? [], null);
        $this->setIfExists('terminal_data_output_capability', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = parent::listInvalidProperties();

        if (!is_null($this->container['x_code_response']) && (mb_strlen($this->container['x_code_response']) > 6)) {
            $invalidProperties[] = "invalid value for 'x_code_response', the character length must be smaller than or equal to 6.";
        }

        if (!is_null($this->container['chip_crypto_value']) && (mb_strlen($this->container['chip_crypto_value']) > 3)) {
            $invalidProperties[] = "invalid value for 'chip_crypto_value', the character length must be smaller than or equal to 3.";
        }

        if (!is_null($this->container['card_data_output_capability']) && (mb_strlen($this->container['card_data_output_capability']) > 25)) {
            $invalidProperties[] = "invalid value for 'card_data_output_capability', the character length must be smaller than or equal to 25.";
        }

        if (!is_null($this->container['terminal_data_output_capability']) && (mb_strlen($this->container['terminal_data_output_capability']) > 25)) {
            $invalidProperties[] = "invalid value for 'terminal_data_output_capability', the character length must be smaller than or equal to 25.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets interchange_compliance_indicator
     *
     * @return string|null
     */
    public function getInterchangeComplianceIndicator()
    {
        return $this->container['interchange_compliance_indicator'];
    }

    /**
     * Sets interchange_compliance_indicator
     *
     * @param string|null $interchange_compliance_indicator A code to indicate that Mastercard interchange compliance data was provided for this transaction, and if any other special Mastercard authorization requirements were met.
     *
     * @return self
     */
    public function setInterchangeComplianceIndicator($interchange_compliance_indicator)
    {

        if (is_null($interchange_compliance_indicator)) {
            throw new \InvalidArgumentException('non-nullable interchange_compliance_indicator cannot be null');
        }

        $this->container['interchange_compliance_indicator'] = $interchange_compliance_indicator;

        return $this;
    }

    /**
     * Gets bank_net_ref_number
     *
     * @return string|null
     */
    public function getBankNetRefNumber()
    {
        return $this->container['bank_net_ref_number'];
    }

    /**
     * Sets bank_net_ref_number
     *
     * @param string|null $bank_net_ref_number A Mastercard generated identifier for each original authorization request. Reference number assigned by Mastercard to each authorization message.
     *
     * @return self
     */
    public function setBankNetRefNumber($bank_net_ref_number)
    {

        if (is_null($bank_net_ref_number)) {
            throw new \InvalidArgumentException('non-nullable bank_net_ref_number cannot be null');
        }

        $this->container['bank_net_ref_number'] = $bank_net_ref_number;

        return $this;
    }

    /**
     * Gets bank_net_date
     *
     * @return string|null
     */
    public function getBankNetDate()
    {
        return $this->container['bank_net_date'];
    }

    /**
     * Sets bank_net_date
     *
     * @param string|null $bank_net_date A Mastercard generated date for this transaction. MMDD format
     *
     * @return self
     */
    public function setBankNetDate($bank_net_date)
    {

        if (is_null($bank_net_date)) {
            throw new \InvalidArgumentException('non-nullable bank_net_date cannot be null');
        }

        $this->container['bank_net_date'] = $bank_net_date;

        return $this;
    }

    /**
     * Gets cvc_error_indicator
     *
     * @return string|null
     */
    public function getCvcErrorIndicator()
    {
        return $this->container['cvc_error_indicator'];
    }

    /**
     * Sets cvc_error_indicator
     *
     * @param string|null $cvc_error_indicator Indicates the CVC Error response data.
     *
     * @return self
     */
    public function setCvcErrorIndicator($cvc_error_indicator)
    {

        if (is_null($cvc_error_indicator)) {
            throw new \InvalidArgumentException('non-nullable cvc_error_indicator cannot be null');
        }

        $this->container['cvc_error_indicator'] = $cvc_error_indicator;

        return $this;
    }

    /**
     * Gets transaction_integrity_class
     *
     * @return string|null
     */
    public function getTransactionIntegrityClass()
    {
        return $this->container['transaction_integrity_class'];
    }

    /**
     * Sets transaction_integrity_class
     *
     * @param string|null $transaction_integrity_class Contains the MasterCard provided Transaction Integrity Classification for Point of Sale (POS) Purchase and Purchase with Cash Back transactions initiated on the Authorization Platform.
     *
     * @return self
     */
    public function setTransactionIntegrityClass($transaction_integrity_class)
    {

        if (is_null($transaction_integrity_class)) {
            throw new \InvalidArgumentException('non-nullable transaction_integrity_class cannot be null');
        }

        $this->container['transaction_integrity_class'] = $transaction_integrity_class;

        return $this;
    }

    /**
     * Gets x_code_response
     *
     * @return string|null
     */
    public function getXCodeResponse()
    {
        return $this->container['x_code_response'];
    }

    /**
     * Sets x_code_response
     *
     * @param string|null $x_code_response Conditional for Mastercard EMV chip transactions. This value is used to notify the chip that the transaction was unable to go online and is required for batch uploads.
     *
     * @return self
     */
    public function setXCodeResponse($x_code_response)
    {
        if (!is_null($x_code_response) && (mb_strlen($x_code_response) > 6)) {
            throw new \InvalidArgumentException('invalid length for $x_code_response when calling Mastercard., must be smaller than or equal to 6.');
        }


        if (is_null($x_code_response)) {
            throw new \InvalidArgumentException('non-nullable x_code_response cannot be null');
        }

        $this->container['x_code_response'] = $x_code_response;

        return $this;
    }

    /**
     * Gets chip_crypto_value
     *
     * @return string|null
     */
    public function getChipCryptoValue()
    {
        return $this->container['chip_crypto_value'];
    }

    /**
     * Sets chip_crypto_value
     *
     * @param string|null $chip_crypto_value Additional EMV chip info returned by Mastercard.
     *
     * @return self
     */
    public function setChipCryptoValue($chip_crypto_value)
    {
        if (!is_null($chip_crypto_value) && (mb_strlen($chip_crypto_value) > 3)) {
            throw new \InvalidArgumentException('invalid length for $chip_crypto_value when calling Mastercard., must be smaller than or equal to 3.');
        }


        if (is_null($chip_crypto_value)) {
            throw new \InvalidArgumentException('non-nullable chip_crypto_value cannot be null');
        }

        $this->container['chip_crypto_value'] = $chip_crypto_value;

        return $this;
    }

    /**
     * Gets card_data_output_capability
     *
     * @return string|null
     */
    public function getCardDataOutputCapability()
    {
        return $this->container['card_data_output_capability'];
    }

    /**
     * Sets card_data_output_capability
     *
     * @param string|null $card_data_output_capability Identifies the card's capability to output data.  Valid Values: * UNSPECIFIED * NONE * MAG_STRIPE * ICC * OTHER
     *
     * @return self
     */
    public function setCardDataOutputCapability($card_data_output_capability)
    {
        if (!is_null($card_data_output_capability) && (mb_strlen($card_data_output_capability) > 25)) {
            throw new \InvalidArgumentException('invalid length for $card_data_output_capability when calling Mastercard., must be smaller than or equal to 25.');
        }


        if (is_null($card_data_output_capability)) {
            throw new \InvalidArgumentException('non-nullable card_data_output_capability cannot be null');
        }

        $this->container['card_data_output_capability'] = $card_data_output_capability;

        return $this;
    }

    /**
     * Gets terminal_data_output_capability
     *
     * @return string|null
     */
    public function getTerminalDataOutputCapability()
    {
        return $this->container['terminal_data_output_capability'];
    }

    /**
     * Sets terminal_data_output_capability
     *
     * @param string|null $terminal_data_output_capability Identifies the terminal's capability to display response data.  Valid Values: * UNSPECIFIED * NONE * PRINTING_ONLY * DISPLAY_ONLY * PRINTING_AND_DISPLAY
     *
     * @return self
     */
    public function setTerminalDataOutputCapability($terminal_data_output_capability)
    {
        if (!is_null($terminal_data_output_capability) && (mb_strlen($terminal_data_output_capability) > 25)) {
            throw new \InvalidArgumentException('invalid length for $terminal_data_output_capability when calling Mastercard., must be smaller than or equal to 25.');
        }


        if (is_null($terminal_data_output_capability)) {
            throw new \InvalidArgumentException('non-nullable terminal_data_output_capability cannot be null');
        }

        $this->container['terminal_data_output_capability'] = $terminal_data_output_capability;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


