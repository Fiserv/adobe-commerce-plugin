<?php
/**
 * Mastercard
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Fiserv\Payments\Lib\CommerceHub
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Commerce Hub
 *
 * This API Specification is designed to provide technical guidance required to consume and integrate with our APIs for payment processing.
 *
 * The version of the OpenAPI document: v1.24.08
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.3.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Fiserv\Payments\Lib\CommerceHub\Model;
use \Fiserv\Payments\Lib\CommerceHub\ObjectSerializer;

/**
 * Mastercard Class Doc Comment
 *
 * @category Class
 * @description Master Card Object Information.
 * @package  Fiserv\Payments\Lib\CommerceHub
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class Mastercard extends Network
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Mastercard';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'interchange_compliance_indicator' => 'string',
        'bank_net_ref_number' => 'string',
        'bank_net_date' => 'string',
        'cvc_error_indicator' => 'string',
        'transaction_edit_error_code' => 'string',
        'transaction_integrity_class' => 'string',
        'x_code_response' => 'string',
        'chip_crypto_value' => 'string',
        'card_data_output_capability' => 'string',
        'terminal_data_output_capability' => 'string',
        'insights_score' => 'string',
        'insights_decision' => 'string',
        'insights_reason_code1' => 'string',
        'score_request' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'interchange_compliance_indicator' => null,
        'bank_net_ref_number' => null,
        'bank_net_date' => null,
        'cvc_error_indicator' => null,
        'transaction_edit_error_code' => null,
        'transaction_integrity_class' => null,
        'x_code_response' => null,
        'chip_crypto_value' => null,
        'card_data_output_capability' => null,
        'terminal_data_output_capability' => null,
        'insights_score' => null,
        'insights_decision' => null,
        'insights_reason_code1' => null,
        'score_request' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'interchange_compliance_indicator' => false,
        'bank_net_ref_number' => false,
        'bank_net_date' => false,
        'cvc_error_indicator' => false,
        'transaction_edit_error_code' => false,
        'transaction_integrity_class' => false,
        'x_code_response' => false,
        'chip_crypto_value' => false,
        'card_data_output_capability' => false,
        'terminal_data_output_capability' => false,
        'insights_score' => false,
        'insights_decision' => false,
        'insights_reason_code1' => false,
        'score_request' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes + parent::openAPITypes();
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats + parent::openAPIFormats();
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables + parent::openAPINullables();
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'interchange_compliance_indicator' => 'interchangeComplianceIndicator',
        'bank_net_ref_number' => 'bankNetRefNumber',
        'bank_net_date' => 'bankNetDate',
        'cvc_error_indicator' => 'cvcErrorIndicator',
        'transaction_edit_error_code' => 'transactionEditErrorCode',
        'transaction_integrity_class' => 'transactionIntegrityClass',
        'x_code_response' => 'xCodeResponse',
        'chip_crypto_value' => 'chipCryptoValue',
        'card_data_output_capability' => 'cardDataOutputCapability',
        'terminal_data_output_capability' => 'terminalDataOutputCapability',
        'insights_score' => 'insightsScore',
        'insights_decision' => 'insightsDecision',
        'insights_reason_code1' => 'insightsReasonCode1',
        'score_request' => 'scoreRequest'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'interchange_compliance_indicator' => 'setInterchangeComplianceIndicator',
        'bank_net_ref_number' => 'setBankNetRefNumber',
        'bank_net_date' => 'setBankNetDate',
        'cvc_error_indicator' => 'setCvcErrorIndicator',
        'transaction_edit_error_code' => 'setTransactionEditErrorCode',
        'transaction_integrity_class' => 'setTransactionIntegrityClass',
        'x_code_response' => 'setXCodeResponse',
        'chip_crypto_value' => 'setChipCryptoValue',
        'card_data_output_capability' => 'setCardDataOutputCapability',
        'terminal_data_output_capability' => 'setTerminalDataOutputCapability',
        'insights_score' => 'setInsightsScore',
        'insights_decision' => 'setInsightsDecision',
        'insights_reason_code1' => 'setInsightsReasonCode1',
        'score_request' => 'setScoreRequest'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'interchange_compliance_indicator' => 'getInterchangeComplianceIndicator',
        'bank_net_ref_number' => 'getBankNetRefNumber',
        'bank_net_date' => 'getBankNetDate',
        'cvc_error_indicator' => 'getCvcErrorIndicator',
        'transaction_edit_error_code' => 'getTransactionEditErrorCode',
        'transaction_integrity_class' => 'getTransactionIntegrityClass',
        'x_code_response' => 'getXCodeResponse',
        'chip_crypto_value' => 'getChipCryptoValue',
        'card_data_output_capability' => 'getCardDataOutputCapability',
        'terminal_data_output_capability' => 'getTerminalDataOutputCapability',
        'insights_score' => 'getInsightsScore',
        'insights_decision' => 'getInsightsDecision',
        'insights_reason_code1' => 'getInsightsReasonCode1',
        'score_request' => 'getScoreRequest'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return parent::attributeMap() + self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return parent::setters() + self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return parent::getters() + self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }



    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        parent::__construct($data);

        $this->setIfExists('interchange_compliance_indicator', $data ?? [], null);
        $this->setIfExists('bank_net_ref_number', $data ?? [], null);
        $this->setIfExists('bank_net_date', $data ?? [], null);
        $this->setIfExists('cvc_error_indicator', $data ?? [], null);
        $this->setIfExists('transaction_edit_error_code', $data ?? [], null);
        $this->setIfExists('transaction_integrity_class', $data ?? [], null);
        $this->setIfExists('x_code_response', $data ?? [], null);
        $this->setIfExists('chip_crypto_value', $data ?? [], null);
        $this->setIfExists('card_data_output_capability', $data ?? [], null);
        $this->setIfExists('terminal_data_output_capability', $data ?? [], null);
        $this->setIfExists('insights_score', $data ?? [], null);
        $this->setIfExists('insights_decision', $data ?? [], null);
        $this->setIfExists('insights_reason_code1', $data ?? [], null);
        $this->setIfExists('score_request', $data ?? [], false);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = parent::listInvalidProperties();

        if (!is_null($this->container['x_code_response']) && (mb_strlen($this->container['x_code_response']) > 6)) {
            $invalidProperties[] = "invalid value for 'x_code_response', the character length must be smaller than or equal to 6.";
        }

        if (!is_null($this->container['chip_crypto_value']) && (mb_strlen($this->container['chip_crypto_value']) > 3)) {
            $invalidProperties[] = "invalid value for 'chip_crypto_value', the character length must be smaller than or equal to 3.";
        }

        if (!is_null($this->container['card_data_output_capability']) && (mb_strlen($this->container['card_data_output_capability']) > 25)) {
            $invalidProperties[] = "invalid value for 'card_data_output_capability', the character length must be smaller than or equal to 25.";
        }

        if (!is_null($this->container['terminal_data_output_capability']) && (mb_strlen($this->container['terminal_data_output_capability']) > 25)) {
            $invalidProperties[] = "invalid value for 'terminal_data_output_capability', the character length must be smaller than or equal to 25.";
        }

        if (!is_null($this->container['insights_score']) && (mb_strlen($this->container['insights_score']) > 1)) {
            $invalidProperties[] = "invalid value for 'insights_score', the character length must be smaller than or equal to 1.";
        }

        if (!is_null($this->container['insights_decision']) && (mb_strlen($this->container['insights_decision']) > 256)) {
            $invalidProperties[] = "invalid value for 'insights_decision', the character length must be smaller than or equal to 256.";
        }

        if (!is_null($this->container['insights_reason_code1']) && (mb_strlen($this->container['insights_reason_code1']) > 1)) {
            $invalidProperties[] = "invalid value for 'insights_reason_code1', the character length must be smaller than or equal to 1.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets interchange_compliance_indicator
     *
     * @return string|null
     */
    public function getInterchangeComplianceIndicator()
    {
        return $this->container['interchange_compliance_indicator'];
    }

    /**
     * Sets interchange_compliance_indicator
     *
     * @param string|null $interchange_compliance_indicator A code to indicate that Mastercard interchange compliance data was provided for this transaction, and if any other special Mastercard authorization requirements were met.
     *
     * @return self
     */
    public function setInterchangeComplianceIndicator($interchange_compliance_indicator)
    {
        if (is_null($interchange_compliance_indicator)) {
            throw new \InvalidArgumentException('non-nullable interchange_compliance_indicator cannot be null');
        }
        $this->container['interchange_compliance_indicator'] = $interchange_compliance_indicator;

        return $this;
    }

    /**
     * Gets bank_net_ref_number
     *
     * @return string|null
     */
    public function getBankNetRefNumber()
    {
        return $this->container['bank_net_ref_number'];
    }

    /**
     * Sets bank_net_ref_number
     *
     * @param string|null $bank_net_ref_number A Mastercard generated identifier for each original authorization request. Reference number assigned by Mastercard to each authorization message.
     *
     * @return self
     */
    public function setBankNetRefNumber($bank_net_ref_number)
    {
        if (is_null($bank_net_ref_number)) {
            throw new \InvalidArgumentException('non-nullable bank_net_ref_number cannot be null');
        }
        $this->container['bank_net_ref_number'] = $bank_net_ref_number;

        return $this;
    }

    /**
     * Gets bank_net_date
     *
     * @return string|null
     */
    public function getBankNetDate()
    {
        return $this->container['bank_net_date'];
    }

    /**
     * Sets bank_net_date
     *
     * @param string|null $bank_net_date A Mastercard generated date for this transaction. MMDD format
     *
     * @return self
     */
    public function setBankNetDate($bank_net_date)
    {
        if (is_null($bank_net_date)) {
            throw new \InvalidArgumentException('non-nullable bank_net_date cannot be null');
        }
        $this->container['bank_net_date'] = $bank_net_date;

        return $this;
    }

    /**
     * Gets cvc_error_indicator
     *
     * @return string|null
     */
    public function getCvcErrorIndicator()
    {
        return $this->container['cvc_error_indicator'];
    }

    /**
     * Sets cvc_error_indicator
     *
     * @param string|null $cvc_error_indicator Indicates the CVC Error response data.
     *
     * @return self
     */
    public function setCvcErrorIndicator($cvc_error_indicator)
    {
        if (is_null($cvc_error_indicator)) {
            throw new \InvalidArgumentException('non-nullable cvc_error_indicator cannot be null');
        }
        $this->container['cvc_error_indicator'] = $cvc_error_indicator;

        return $this;
    }

    /**
     * Gets transaction_edit_error_code
     *
     * @return string|null
     */
    public function getTransactionEditErrorCode()
    {
        return $this->container['transaction_edit_error_code'];
    }

    /**
     * Sets transaction_edit_error_code
     *
     * @param string|null $transaction_edit_error_code Indicates the <a href=\"..docs/?path=docs/Resources/Master-Data/Network-Details.md#tab-mastercard\">track data & POS validation Error</a> in response data
     *
     * @return self
     */
    public function setTransactionEditErrorCode($transaction_edit_error_code)
    {
        if (is_null($transaction_edit_error_code)) {
            throw new \InvalidArgumentException('non-nullable transaction_edit_error_code cannot be null');
        }
        $this->container['transaction_edit_error_code'] = $transaction_edit_error_code;

        return $this;
    }

    /**
     * Gets transaction_integrity_class
     *
     * @return string|null
     */
    public function getTransactionIntegrityClass()
    {
        return $this->container['transaction_integrity_class'];
    }

    /**
     * Sets transaction_integrity_class
     *
     * @param string|null $transaction_integrity_class Contains the MasterCard provided Transaction Integrity Classification for Point of Sale (POS) Purchase and Purchase with Cash Back transactions initiated on the Authorization Platform.
     *
     * @return self
     */
    public function setTransactionIntegrityClass($transaction_integrity_class)
    {
        if (is_null($transaction_integrity_class)) {
            throw new \InvalidArgumentException('non-nullable transaction_integrity_class cannot be null');
        }
        $this->container['transaction_integrity_class'] = $transaction_integrity_class;

        return $this;
    }

    /**
     * Gets x_code_response
     *
     * @return string|null
     */
    public function getXCodeResponse()
    {
        return $this->container['x_code_response'];
    }

    /**
     * Sets x_code_response
     *
     * @param string|null $x_code_response Conditional for Mastercard EMV chip transactions. This value is used to notify the chip that the transaction was unable to go online and is required for batch uploads.
     *
     * @return self
     */
    public function setXCodeResponse($x_code_response)
    {
        if (is_null($x_code_response)) {
            throw new \InvalidArgumentException('non-nullable x_code_response cannot be null');
        }
        if ((mb_strlen($x_code_response) > 6)) {
            throw new \InvalidArgumentException('invalid length for $x_code_response when calling Mastercard., must be smaller than or equal to 6.');
        }

        $this->container['x_code_response'] = $x_code_response;

        return $this;
    }

    /**
     * Gets chip_crypto_value
     *
     * @return string|null
     */
    public function getChipCryptoValue()
    {
        return $this->container['chip_crypto_value'];
    }

    /**
     * Sets chip_crypto_value
     *
     * @param string|null $chip_crypto_value Additional EMV chip info returned by Mastercard.
     *
     * @return self
     */
    public function setChipCryptoValue($chip_crypto_value)
    {
        if (is_null($chip_crypto_value)) {
            throw new \InvalidArgumentException('non-nullable chip_crypto_value cannot be null');
        }
        if ((mb_strlen($chip_crypto_value) > 3)) {
            throw new \InvalidArgumentException('invalid length for $chip_crypto_value when calling Mastercard., must be smaller than or equal to 3.');
        }

        $this->container['chip_crypto_value'] = $chip_crypto_value;

        return $this;
    }

    /**
     * Gets card_data_output_capability
     *
     * @return string|null
     */
    public function getCardDataOutputCapability()
    {
        return $this->container['card_data_output_capability'];
    }

    /**
     * Sets card_data_output_capability
     *
     * @param string|null $card_data_output_capability Identifies the <a href=\"..docs/?path=docs/Resources/Master-Data/Network-Details.md#tab-mastercard\">cards capability</a> to output data.
     *
     * @return self
     */
    public function setCardDataOutputCapability($card_data_output_capability)
    {
        if (is_null($card_data_output_capability)) {
            throw new \InvalidArgumentException('non-nullable card_data_output_capability cannot be null');
        }
        if ((mb_strlen($card_data_output_capability) > 25)) {
            throw new \InvalidArgumentException('invalid length for $card_data_output_capability when calling Mastercard., must be smaller than or equal to 25.');
        }

        $this->container['card_data_output_capability'] = $card_data_output_capability;

        return $this;
    }

    /**
     * Gets terminal_data_output_capability
     *
     * @return string|null
     */
    public function getTerminalDataOutputCapability()
    {
        return $this->container['terminal_data_output_capability'];
    }

    /**
     * Sets terminal_data_output_capability
     *
     * @param string|null $terminal_data_output_capability Identifies the <a href=\"..docs/?path=docs/Resources/Master-Data/Network-Details.md#tab-mastercard\">terminal capability</a> to display response data.
     *
     * @return self
     */
    public function setTerminalDataOutputCapability($terminal_data_output_capability)
    {
        if (is_null($terminal_data_output_capability)) {
            throw new \InvalidArgumentException('non-nullable terminal_data_output_capability cannot be null');
        }
        if ((mb_strlen($terminal_data_output_capability) > 25)) {
            throw new \InvalidArgumentException('invalid length for $terminal_data_output_capability when calling Mastercard., must be smaller than or equal to 25.');
        }

        $this->container['terminal_data_output_capability'] = $terminal_data_output_capability;

        return $this;
    }

    /**
     * Gets insights_score
     *
     * @return string|null
     */
    public function getInsightsScore()
    {
        return $this->container['insights_score'];
    }

    /**
     * Sets insights_score
     *
     * @param string|null $insights_score Identity Check Insights (IDCI) score (risk assessment) from Mastercard. An authentication assessment between 0-9, with the threshold increasing with the increased authentication risk.
     *
     * @return self
     */
    public function setInsightsScore($insights_score)
    {
        if (is_null($insights_score)) {
            throw new \InvalidArgumentException('non-nullable insights_score cannot be null');
        }
        if ((mb_strlen($insights_score) > 1)) {
            throw new \InvalidArgumentException('invalid length for $insights_score when calling Mastercard., must be smaller than or equal to 1.');
        }

        $this->container['insights_score'] = $insights_score;

        return $this;
    }

    /**
     * Gets insights_decision
     *
     * @return string|null
     */
    public function getInsightsDecision()
    {
        return $this->container['insights_decision'];
    }

    /**
     * Sets insights_decision
     *
     * @param string|null $insights_decision Identity Check Insights (IDCI) decision on the risk assessment from Mastercard. Indicates the authentication risk analysis (Low Risk or Not Low Risk), and whether Mastercard would have fully authenticated the transaction in a Stand-in situation.
     *
     * @return self
     */
    public function setInsightsDecision($insights_decision)
    {
        if (is_null($insights_decision)) {
            throw new \InvalidArgumentException('non-nullable insights_decision cannot be null');
        }
        if ((mb_strlen($insights_decision) > 256)) {
            throw new \InvalidArgumentException('invalid length for $insights_decision when calling Mastercard., must be smaller than or equal to 256.');
        }

        $this->container['insights_decision'] = $insights_decision;

        return $this;
    }

    /**
     * Gets insights_reason_code1
     *
     * @return string|null
     */
    public function getInsightsReasonCode1()
    {
        return $this->container['insights_reason_code1'];
    }

    /**
     * Sets insights_reason_code1
     *
     * @param string|null $insights_reason_code1 Identity Check Insights (IDCI) reason code from Mastercard. Value range: A-Z, one character value reflecting key anchor variables related to the transaction, with A as a highest risk to Z as a most trusted reason.
     *
     * @return self
     */
    public function setInsightsReasonCode1($insights_reason_code1)
    {
        if (is_null($insights_reason_code1)) {
            throw new \InvalidArgumentException('non-nullable insights_reason_code1 cannot be null');
        }
        if ((mb_strlen($insights_reason_code1) > 1)) {
            throw new \InvalidArgumentException('invalid length for $insights_reason_code1 when calling Mastercard., must be smaller than or equal to 1.');
        }

        $this->container['insights_reason_code1'] = $insights_reason_code1;

        return $this;
    }

    /**
     * Gets score_request
     *
     * @return bool|null
     */
    public function getScoreRequest()
    {
        return $this->container['score_request'];
    }

    /**
     * Sets score_request
     *
     * @param bool|null $score_request Indicates whether the merchant requests that the 3DS Provider return risk scoring information on the response
     *
     * @return self
     */
    public function setScoreRequest($score_request)
    {
        if (is_null($score_request)) {
            throw new \InvalidArgumentException('non-nullable score_request cannot be null');
        }
        $this->container['score_request'] = $score_request;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


