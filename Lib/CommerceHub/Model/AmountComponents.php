<?php
/**
 * AmountComponents
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Fiserv\Payments\Lib\CommerceHub
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Payments
 *
 * This API Specification is designed to provide technical guidance required to consume and integrate with our APIs for payment processing.
 *
 * The version of the OpenAPI document: v1.3.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.2.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Fiserv\Payments\Lib\CommerceHub\Model;

use \ArrayAccess;
use \Fiserv\Payments\Lib\CommerceHub\ObjectSerializer;

/**
 * AmountComponents Class Doc Comment
 *
 * @category Class
 * @description Used in transactions where additional &lt;a href&#x3D;\&quot;../docs?path&#x3D;docs/Resources/Master-Data/Amount-Components.md\&quot;&gt;amount&lt;/a&gt; fields such as tax, surcharge, or fees are required as part of the request.
 * @package  Fiserv\Payments\Lib\CommerceHub
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class AmountComponents implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'AmountComponents';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'sub_total' => 'float',
        'vat_amount' => 'float',
        'local_tax' => 'float',
        'shipping_amount' => 'float',
        'cashback' => 'float',
        'tip' => 'float',
        'surcharge' => 'float',
        'itbis_tax_amount' => 'float',
        'convenience_fee' => 'float'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'sub_total' => null,
        'vat_amount' => null,
        'local_tax' => null,
        'shipping_amount' => null,
        'cashback' => null,
        'tip' => null,
        'surcharge' => null,
        'itbis_tax_amount' => null,
        'convenience_fee' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'sub_total' => false,
		'vat_amount' => false,
		'local_tax' => false,
		'shipping_amount' => false,
		'cashback' => false,
		'tip' => false,
		'surcharge' => false,
		'itbis_tax_amount' => false,
		'convenience_fee' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'sub_total' => 'subTotal',
        'vat_amount' => 'vatAmount',
        'local_tax' => 'localTax',
        'shipping_amount' => 'shippingAmount',
        'cashback' => 'cashback',
        'tip' => 'tip',
        'surcharge' => 'surcharge',
        'itbis_tax_amount' => 'ITBISTaxAmount',
        'convenience_fee' => 'convenienceFee'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'sub_total' => 'setSubTotal',
        'vat_amount' => 'setVatAmount',
        'local_tax' => 'setLocalTax',
        'shipping_amount' => 'setShippingAmount',
        'cashback' => 'setCashback',
        'tip' => 'setTip',
        'surcharge' => 'setSurcharge',
        'itbis_tax_amount' => 'setItbisTaxAmount',
        'convenience_fee' => 'setConvenienceFee'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'sub_total' => 'getSubTotal',
        'vat_amount' => 'getVatAmount',
        'local_tax' => 'getLocalTax',
        'shipping_amount' => 'getShippingAmount',
        'cashback' => 'getCashback',
        'tip' => 'getTip',
        'surcharge' => 'getSurcharge',
        'itbis_tax_amount' => 'getItbisTaxAmount',
        'convenience_fee' => 'getConvenienceFee'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('sub_total', $data ?? [], null);
        $this->setIfExists('vat_amount', $data ?? [], null);
        $this->setIfExists('local_tax', $data ?? [], null);
        $this->setIfExists('shipping_amount', $data ?? [], null);
        $this->setIfExists('cashback', $data ?? [], null);
        $this->setIfExists('tip', $data ?? [], null);
        $this->setIfExists('surcharge', $data ?? [], null);
        $this->setIfExists('itbis_tax_amount', $data ?? [], null);
        $this->setIfExists('convenience_fee', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['sub_total']) && ($this->container['sub_total'] > 1.0E+18)) {
            $invalidProperties[] = "invalid value for 'sub_total', must be smaller than or equal to 1.0E+18.";
        }

        if (!is_null($this->container['vat_amount']) && ($this->container['vat_amount'] > 1.0E+18)) {
            $invalidProperties[] = "invalid value for 'vat_amount', must be smaller than or equal to 1.0E+18.";
        }

        if (!is_null($this->container['local_tax']) && ($this->container['local_tax'] > 1.0E+18)) {
            $invalidProperties[] = "invalid value for 'local_tax', must be smaller than or equal to 1.0E+18.";
        }

        if (!is_null($this->container['shipping_amount']) && ($this->container['shipping_amount'] > 1.0E+18)) {
            $invalidProperties[] = "invalid value for 'shipping_amount', must be smaller than or equal to 1.0E+18.";
        }

        if (!is_null($this->container['cashback']) && ($this->container['cashback'] > 1.0E+18)) {
            $invalidProperties[] = "invalid value for 'cashback', must be smaller than or equal to 1.0E+18.";
        }

        if (!is_null($this->container['tip']) && ($this->container['tip'] > 1.0E+18)) {
            $invalidProperties[] = "invalid value for 'tip', must be smaller than or equal to 1.0E+18.";
        }

        if (!is_null($this->container['surcharge']) && ($this->container['surcharge'] > 1.0E+18)) {
            $invalidProperties[] = "invalid value for 'surcharge', must be smaller than or equal to 1.0E+18.";
        }

        if (!is_null($this->container['itbis_tax_amount']) && ($this->container['itbis_tax_amount'] > 1.0E+18)) {
            $invalidProperties[] = "invalid value for 'itbis_tax_amount', must be smaller than or equal to 1.0E+18.";
        }

        if (!is_null($this->container['convenience_fee']) && ($this->container['convenience_fee'] > 1.0E+18)) {
            $invalidProperties[] = "invalid value for 'convenience_fee', must be smaller than or equal to 1.0E+18.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets sub_total
     *
     * @return float|null
     */
    public function getSubTotal()
    {
        return $this->container['sub_total'];
    }

    /**
     * Sets sub_total
     *
     * @param float|null $sub_total Subtotal amount.
     *
     * @return self
     */
    public function setSubTotal($sub_total)
    {

        if (!is_null($sub_total) && ($sub_total > 1.0E+18)) {
            throw new \InvalidArgumentException('invalid value for $sub_total when calling AmountComponents., must be smaller than or equal to 1.0E+18.');
        }


        if (is_null($sub_total)) {
            throw new \InvalidArgumentException('non-nullable sub_total cannot be null');
        }

        $this->container['sub_total'] = $sub_total;

        return $this;
    }

    /**
     * Gets vat_amount
     *
     * @return float|null
     */
    public function getVatAmount()
    {
        return $this->container['vat_amount'];
    }

    /**
     * Sets vat_amount
     *
     * @param float|null $vat_amount Level 2 VAT (Value Added Tax) or alternate tax amount applied at the order level.
     *
     * @return self
     */
    public function setVatAmount($vat_amount)
    {

        if (!is_null($vat_amount) && ($vat_amount > 1.0E+18)) {
            throw new \InvalidArgumentException('invalid value for $vat_amount when calling AmountComponents., must be smaller than or equal to 1.0E+18.');
        }


        if (is_null($vat_amount)) {
            throw new \InvalidArgumentException('non-nullable vat_amount cannot be null');
        }

        $this->container['vat_amount'] = $vat_amount;

        return $this;
    }

    /**
     * Gets local_tax
     *
     * @return float|null
     */
    public function getLocalTax()
    {
        return $this->container['local_tax'];
    }

    /**
     * Sets local_tax
     *
     * @param float|null $local_tax Local sales tax amount included in a transaction.
     *
     * @return self
     */
    public function setLocalTax($local_tax)
    {

        if (!is_null($local_tax) && ($local_tax > 1.0E+18)) {
            throw new \InvalidArgumentException('invalid value for $local_tax when calling AmountComponents., must be smaller than or equal to 1.0E+18.');
        }


        if (is_null($local_tax)) {
            throw new \InvalidArgumentException('non-nullable local_tax cannot be null');
        }

        $this->container['local_tax'] = $local_tax;

        return $this;
    }

    /**
     * Gets shipping_amount
     *
     * @return float|null
     */
    public function getShippingAmount()
    {
        return $this->container['shipping_amount'];
    }

    /**
     * Sets shipping_amount
     *
     * @param float|null $shipping_amount Shipping amount included in a transaction.
     *
     * @return self
     */
    public function setShippingAmount($shipping_amount)
    {

        if (!is_null($shipping_amount) && ($shipping_amount > 1.0E+18)) {
            throw new \InvalidArgumentException('invalid value for $shipping_amount when calling AmountComponents., must be smaller than or equal to 1.0E+18.');
        }


        if (is_null($shipping_amount)) {
            throw new \InvalidArgumentException('non-nullable shipping_amount cannot be null');
        }

        $this->container['shipping_amount'] = $shipping_amount;

        return $this;
    }

    /**
     * Gets cashback
     *
     * @return float|null
     */
    public function getCashback()
    {
        return $this->container['cashback'];
    }

    /**
     * Sets cashback
     *
     * @param float|null $cashback For Debit, EBTCash, or Credit: The amount of cash requested by the cardholder at the time of purchase.
     *
     * @return self
     */
    public function setCashback($cashback)
    {

        if (!is_null($cashback) && ($cashback > 1.0E+18)) {
            throw new \InvalidArgumentException('invalid value for $cashback when calling AmountComponents., must be smaller than or equal to 1.0E+18.');
        }


        if (is_null($cashback)) {
            throw new \InvalidArgumentException('non-nullable cashback cannot be null');
        }

        $this->container['cashback'] = $cashback;

        return $this;
    }

    /**
     * Gets tip
     *
     * @return float|null
     */
    public function getTip()
    {
        return $this->container['tip'];
    }

    /**
     * Sets tip
     *
     * @param float|null $tip The portion of the transaction amount that represents the tip.
     *
     * @return self
     */
    public function setTip($tip)
    {

        if (!is_null($tip) && ($tip > 1.0E+18)) {
            throw new \InvalidArgumentException('invalid value for $tip when calling AmountComponents., must be smaller than or equal to 1.0E+18.');
        }


        if (is_null($tip)) {
            throw new \InvalidArgumentException('non-nullable tip cannot be null');
        }

        $this->container['tip'] = $tip;

        return $this;
    }

    /**
     * Gets surcharge
     *
     * @return float|null
     */
    public function getSurcharge()
    {
        return $this->container['surcharge'];
    }

    /**
     * Sets surcharge
     *
     * @param float|null $surcharge Identifies the transaction surcharge amount as an extra fee, tax, or cost added to the already existent cost of a good or service. Note: Not all processors and acquirers allow surcharge fees. For more information, please contact your account representative.
     *
     * @return self
     */
    public function setSurcharge($surcharge)
    {

        if (!is_null($surcharge) && ($surcharge > 1.0E+18)) {
            throw new \InvalidArgumentException('invalid value for $surcharge when calling AmountComponents., must be smaller than or equal to 1.0E+18.');
        }


        if (is_null($surcharge)) {
            throw new \InvalidArgumentException('non-nullable surcharge cannot be null');
        }

        $this->container['surcharge'] = $surcharge;

        return $this;
    }

    /**
     * Gets itbis_tax_amount
     *
     * @return float|null
     */
    public function getItbisTaxAmount()
    {
        return $this->container['itbis_tax_amount'];
    }

    /**
     * Sets itbis_tax_amount
     *
     * @param float|null $itbis_tax_amount Tax amount on the transfer of Industrialised Goods and Services (ITBIS).
     *
     * @return self
     */
    public function setItbisTaxAmount($itbis_tax_amount)
    {

        if (!is_null($itbis_tax_amount) && ($itbis_tax_amount > 1.0E+18)) {
            throw new \InvalidArgumentException('invalid value for $itbis_tax_amount when calling AmountComponents., must be smaller than or equal to 1.0E+18.');
        }


        if (is_null($itbis_tax_amount)) {
            throw new \InvalidArgumentException('non-nullable itbis_tax_amount cannot be null');
        }

        $this->container['itbis_tax_amount'] = $itbis_tax_amount;

        return $this;
    }

    /**
     * Gets convenience_fee
     *
     * @return float|null
     */
    public function getConvenienceFee()
    {
        return $this->container['convenience_fee'];
    }

    /**
     * Sets convenience_fee
     *
     * @param float|null $convenience_fee Optional convenience fee for payments made through an alternative channel. rather than by cash, check, or ACH. Note: Not all processors and acquirers allow convenience fees. For more information, please contact your account representative.
     *
     * @return self
     */
    public function setConvenienceFee($convenience_fee)
    {

        if (!is_null($convenience_fee) && ($convenience_fee > 1.0E+18)) {
            throw new \InvalidArgumentException('invalid value for $convenience_fee when calling AmountComponents., must be smaller than or equal to 1.0E+18.');
        }


        if (is_null($convenience_fee)) {
            throw new \InvalidArgumentException('non-nullable convenience_fee cannot be null');
        }

        $this->container['convenience_fee'] = $convenience_fee;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


