<?php
/**
 * AmountComponents
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Fiserv\Payments\Lib\CommerceHub
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Commerce Hub
 *
 * This API Specification is designed to provide technical guidance required to consume and integrate with our APIs for payment processing.
 *
 * The version of the OpenAPI document: v1.24.08
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.3.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Fiserv\Payments\Lib\CommerceHub\Model;

use \ArrayAccess;
use \Fiserv\Payments\Lib\CommerceHub\ObjectSerializer;

/**
 * AmountComponents Class Doc Comment
 *
 * @category Class
 * @description Used in transactions where additional &lt;a href&#x3D;\&quot;../docs?path&#x3D;docs/Resources/Master-Data/Amount-Components.md\&quot;&gt;amount&lt;/a&gt; fields such as tax, surcharge, or fees are required as part of the request.
 * @package  Fiserv\Payments\Lib\CommerceHub
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class AmountComponents implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'AmountComponents';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'unit_price' => 'float',
        'sub_total' => 'float',
        'cashback' => 'float',
        'tip' => 'float',
        'surcharge' => 'float',
        'convenience_fee' => 'float',
        'shipping_rate' => 'float',
        'shipping_amount' => 'float',
        'freight_amount' => 'float',
        'freight_rate' => 'float',
        'price_adjustments' => '\Fiserv\Payments\Lib\CommerceHub\Model\PriceAdjustmentDetails[]',
        'net_amount' => 'float',
        'tax_amounts' => '\Fiserv\Payments\Lib\CommerceHub\Model\TaxDetails[]',
        'gross_amount' => 'float'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'unit_price' => null,
        'sub_total' => null,
        'cashback' => null,
        'tip' => null,
        'surcharge' => null,
        'convenience_fee' => null,
        'shipping_rate' => null,
        'shipping_amount' => null,
        'freight_amount' => null,
        'freight_rate' => null,
        'price_adjustments' => null,
        'net_amount' => null,
        'tax_amounts' => null,
        'gross_amount' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'unit_price' => false,
        'sub_total' => false,
        'cashback' => false,
        'tip' => false,
        'surcharge' => false,
        'convenience_fee' => false,
        'shipping_rate' => false,
        'shipping_amount' => false,
        'freight_amount' => false,
        'freight_rate' => false,
        'price_adjustments' => false,
        'net_amount' => false,
        'tax_amounts' => false,
        'gross_amount' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'unit_price' => 'unitPrice',
        'sub_total' => 'subTotal',
        'cashback' => 'cashback',
        'tip' => 'tip',
        'surcharge' => 'surcharge',
        'convenience_fee' => 'convenienceFee',
        'shipping_rate' => 'shippingRate',
        'shipping_amount' => 'shippingAmount',
        'freight_amount' => 'freightAmount',
        'freight_rate' => 'freightRate',
        'price_adjustments' => 'priceAdjustments',
        'net_amount' => 'netAmount',
        'tax_amounts' => 'taxAmounts',
        'gross_amount' => 'grossAmount'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'unit_price' => 'setUnitPrice',
        'sub_total' => 'setSubTotal',
        'cashback' => 'setCashback',
        'tip' => 'setTip',
        'surcharge' => 'setSurcharge',
        'convenience_fee' => 'setConvenienceFee',
        'shipping_rate' => 'setShippingRate',
        'shipping_amount' => 'setShippingAmount',
        'freight_amount' => 'setFreightAmount',
        'freight_rate' => 'setFreightRate',
        'price_adjustments' => 'setPriceAdjustments',
        'net_amount' => 'setNetAmount',
        'tax_amounts' => 'setTaxAmounts',
        'gross_amount' => 'setGrossAmount'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'unit_price' => 'getUnitPrice',
        'sub_total' => 'getSubTotal',
        'cashback' => 'getCashback',
        'tip' => 'getTip',
        'surcharge' => 'getSurcharge',
        'convenience_fee' => 'getConvenienceFee',
        'shipping_rate' => 'getShippingRate',
        'shipping_amount' => 'getShippingAmount',
        'freight_amount' => 'getFreightAmount',
        'freight_rate' => 'getFreightRate',
        'price_adjustments' => 'getPriceAdjustments',
        'net_amount' => 'getNetAmount',
        'tax_amounts' => 'getTaxAmounts',
        'gross_amount' => 'getGrossAmount'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('unit_price', $data ?? [], null);
        $this->setIfExists('sub_total', $data ?? [], null);
        $this->setIfExists('cashback', $data ?? [], null);
        $this->setIfExists('tip', $data ?? [], null);
        $this->setIfExists('surcharge', $data ?? [], null);
        $this->setIfExists('convenience_fee', $data ?? [], null);
        $this->setIfExists('shipping_rate', $data ?? [], null);
        $this->setIfExists('shipping_amount', $data ?? [], null);
        $this->setIfExists('freight_amount', $data ?? [], null);
        $this->setIfExists('freight_rate', $data ?? [], null);
        $this->setIfExists('price_adjustments', $data ?? [], null);
        $this->setIfExists('net_amount', $data ?? [], null);
        $this->setIfExists('tax_amounts', $data ?? [], null);
        $this->setIfExists('gross_amount', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['unit_price']) && ($this->container['unit_price'] > 1.0E+18)) {
            $invalidProperties[] = "invalid value for 'unit_price', must be smaller than or equal to 1.0E+18.";
        }

        if (!is_null($this->container['sub_total']) && ($this->container['sub_total'] > 1.0E+18)) {
            $invalidProperties[] = "invalid value for 'sub_total', must be smaller than or equal to 1.0E+18.";
        }

        if (!is_null($this->container['cashback']) && ($this->container['cashback'] > 1.0E+18)) {
            $invalidProperties[] = "invalid value for 'cashback', must be smaller than or equal to 1.0E+18.";
        }

        if (!is_null($this->container['tip']) && ($this->container['tip'] > 1.0E+18)) {
            $invalidProperties[] = "invalid value for 'tip', must be smaller than or equal to 1.0E+18.";
        }

        if (!is_null($this->container['surcharge']) && ($this->container['surcharge'] > 1.0E+18)) {
            $invalidProperties[] = "invalid value for 'surcharge', must be smaller than or equal to 1.0E+18.";
        }

        if (!is_null($this->container['convenience_fee']) && ($this->container['convenience_fee'] > 1.0E+18)) {
            $invalidProperties[] = "invalid value for 'convenience_fee', must be smaller than or equal to 1.0E+18.";
        }

        if (!is_null($this->container['shipping_rate']) && ($this->container['shipping_rate'] > 100)) {
            $invalidProperties[] = "invalid value for 'shipping_rate', must be smaller than or equal to 100.";
        }

        if (!is_null($this->container['shipping_amount']) && ($this->container['shipping_amount'] > 1.0E+18)) {
            $invalidProperties[] = "invalid value for 'shipping_amount', must be smaller than or equal to 1.0E+18.";
        }

        if (!is_null($this->container['freight_amount']) && ($this->container['freight_amount'] > 1.0E+18)) {
            $invalidProperties[] = "invalid value for 'freight_amount', must be smaller than or equal to 1.0E+18.";
        }

        if (!is_null($this->container['freight_rate']) && ($this->container['freight_rate'] > 100)) {
            $invalidProperties[] = "invalid value for 'freight_rate', must be smaller than or equal to 100.";
        }

        if (!is_null($this->container['net_amount']) && ($this->container['net_amount'] > 1.0E+18)) {
            $invalidProperties[] = "invalid value for 'net_amount', must be smaller than or equal to 1.0E+18.";
        }

        if (!is_null($this->container['gross_amount']) && ($this->container['gross_amount'] > 1.0E+18)) {
            $invalidProperties[] = "invalid value for 'gross_amount', must be smaller than or equal to 1.0E+18.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets unit_price
     *
     * @return float|null
     */
    public function getUnitPrice()
    {
        return $this->container['unit_price'];
    }

    /**
     * Sets unit_price
     *
     * @param float|null $unit_price Identifies the price per unit of measure for the product sold. This should exclude any taxes or charges.
     *
     * @return self
     */
    public function setUnitPrice($unit_price)
    {
        if (is_null($unit_price)) {
            throw new \InvalidArgumentException('non-nullable unit_price cannot be null');
        }

        if (($unit_price > 1.0E+18)) {
            throw new \InvalidArgumentException('invalid value for $unit_price when calling AmountComponents., must be smaller than or equal to 1.0E+18.');
        }

        $this->container['unit_price'] = $unit_price;

        return $this;
    }

    /**
     * Gets sub_total
     *
     * @return float|null
     */
    public function getSubTotal()
    {
        return $this->container['sub_total'];
    }

    /**
     * Sets sub_total
     *
     * @param float|null $sub_total The total amount before any other costs, discounts, fees, or taxes.
     *
     * @return self
     */
    public function setSubTotal($sub_total)
    {
        if (is_null($sub_total)) {
            throw new \InvalidArgumentException('non-nullable sub_total cannot be null');
        }

        if (($sub_total > 1.0E+18)) {
            throw new \InvalidArgumentException('invalid value for $sub_total when calling AmountComponents., must be smaller than or equal to 1.0E+18.');
        }

        $this->container['sub_total'] = $sub_total;

        return $this;
    }

    /**
     * Gets cashback
     *
     * @return float|null
     */
    public function getCashback()
    {
        return $this->container['cashback'];
    }

    /**
     * Sets cashback
     *
     * @param float|null $cashback For Debit, EBTCash, or Credit: The amount of cash requested by the cardholder at the time of purchase.
     *
     * @return self
     */
    public function setCashback($cashback)
    {
        if (is_null($cashback)) {
            throw new \InvalidArgumentException('non-nullable cashback cannot be null');
        }

        if (($cashback > 1.0E+18)) {
            throw new \InvalidArgumentException('invalid value for $cashback when calling AmountComponents., must be smaller than or equal to 1.0E+18.');
        }

        $this->container['cashback'] = $cashback;

        return $this;
    }

    /**
     * Gets tip
     *
     * @return float|null
     */
    public function getTip()
    {
        return $this->container['tip'];
    }

    /**
     * Sets tip
     *
     * @param float|null $tip The portion of the transaction amount that represents the tip.
     *
     * @return self
     */
    public function setTip($tip)
    {
        if (is_null($tip)) {
            throw new \InvalidArgumentException('non-nullable tip cannot be null');
        }

        if (($tip > 1.0E+18)) {
            throw new \InvalidArgumentException('invalid value for $tip when calling AmountComponents., must be smaller than or equal to 1.0E+18.');
        }

        $this->container['tip'] = $tip;

        return $this;
    }

    /**
     * Gets surcharge
     *
     * @return float|null
     */
    public function getSurcharge()
    {
        return $this->container['surcharge'];
    }

    /**
     * Sets surcharge
     *
     * @param float|null $surcharge Identifies the transaction surcharge amount as an extra fee, tax, or cost added to the already existent cost of a good or service. Note: Not all processors and acquirers allow surcharge fees. For more information, please contact your account representative.
     *
     * @return self
     */
    public function setSurcharge($surcharge)
    {
        if (is_null($surcharge)) {
            throw new \InvalidArgumentException('non-nullable surcharge cannot be null');
        }

        if (($surcharge > 1.0E+18)) {
            throw new \InvalidArgumentException('invalid value for $surcharge when calling AmountComponents., must be smaller than or equal to 1.0E+18.');
        }

        $this->container['surcharge'] = $surcharge;

        return $this;
    }

    /**
     * Gets convenience_fee
     *
     * @return float|null
     */
    public function getConvenienceFee()
    {
        return $this->container['convenience_fee'];
    }

    /**
     * Sets convenience_fee
     *
     * @param float|null $convenience_fee Optional convenience fee for payments made through an alternative channel. rather than by cash, check, or ACH. Note: Not all processors and acquirers allow convenience fees. For more information, please contact your account representative.
     *
     * @return self
     */
    public function setConvenienceFee($convenience_fee)
    {
        if (is_null($convenience_fee)) {
            throw new \InvalidArgumentException('non-nullable convenience_fee cannot be null');
        }

        if (($convenience_fee > 1.0E+18)) {
            throw new \InvalidArgumentException('invalid value for $convenience_fee when calling AmountComponents., must be smaller than or equal to 1.0E+18.');
        }

        $this->container['convenience_fee'] = $convenience_fee;

        return $this;
    }

    /**
     * Gets shipping_rate
     *
     * @return float|null
     */
    public function getShippingRate()
    {
        return $this->container['shipping_rate'];
    }

    /**
     * Sets shipping_rate
     *
     * @param float|null $shipping_rate Shipping, delivery or freight rate percent.
     *
     * @return self
     */
    public function setShippingRate($shipping_rate)
    {
        if (is_null($shipping_rate)) {
            throw new \InvalidArgumentException('non-nullable shipping_rate cannot be null');
        }

        if (($shipping_rate > 100)) {
            throw new \InvalidArgumentException('invalid value for $shipping_rate when calling AmountComponents., must be smaller than or equal to 100.');
        }

        $this->container['shipping_rate'] = $shipping_rate;

        return $this;
    }

    /**
     * Gets shipping_amount
     *
     * @return float|null
     */
    public function getShippingAmount()
    {
        return $this->container['shipping_amount'];
    }

    /**
     * Sets shipping_amount
     *
     * @param float|null $shipping_amount Total amount of shipping, delivery or freight charges applied.
     *
     * @return self
     */
    public function setShippingAmount($shipping_amount)
    {
        if (is_null($shipping_amount)) {
            throw new \InvalidArgumentException('non-nullable shipping_amount cannot be null');
        }

        if (($shipping_amount > 1.0E+18)) {
            throw new \InvalidArgumentException('invalid value for $shipping_amount when calling AmountComponents., must be smaller than or equal to 1.0E+18.');
        }

        $this->container['shipping_amount'] = $shipping_amount;

        return $this;
    }

    /**
     * Gets freight_amount
     *
     * @return float|null
     */
    public function getFreightAmount()
    {
        return $this->container['freight_amount'];
    }

    /**
     * Sets freight_amount
     *
     * @param float|null $freight_amount Freight amount applied
     *
     * @return self
     */
    public function setFreightAmount($freight_amount)
    {
        if (is_null($freight_amount)) {
            throw new \InvalidArgumentException('non-nullable freight_amount cannot be null');
        }

        if (($freight_amount > 1.0E+18)) {
            throw new \InvalidArgumentException('invalid value for $freight_amount when calling AmountComponents., must be smaller than or equal to 1.0E+18.');
        }

        $this->container['freight_amount'] = $freight_amount;

        return $this;
    }

    /**
     * Gets freight_rate
     *
     * @return float|null
     */
    public function getFreightRate()
    {
        return $this->container['freight_rate'];
    }

    /**
     * Sets freight_rate
     *
     * @param float|null $freight_rate Freight rate percent.
     *
     * @return self
     */
    public function setFreightRate($freight_rate)
    {
        if (is_null($freight_rate)) {
            throw new \InvalidArgumentException('non-nullable freight_rate cannot be null');
        }

        if (($freight_rate > 100)) {
            throw new \InvalidArgumentException('invalid value for $freight_rate when calling AmountComponents., must be smaller than or equal to 100.');
        }

        $this->container['freight_rate'] = $freight_rate;

        return $this;
    }

    /**
     * Gets price_adjustments
     *
     * @return \Fiserv\Payments\Lib\CommerceHub\Model\PriceAdjustmentDetails[]|null
     */
    public function getPriceAdjustments()
    {
        return $this->container['price_adjustments'];
    }

    /**
     * Sets price_adjustments
     *
     * @param \Fiserv\Payments\Lib\CommerceHub\Model\PriceAdjustmentDetails[]|null $price_adjustments Identifies the type of price adjustment being applied.
     *
     * @return self
     */
    public function setPriceAdjustments($price_adjustments)
    {
        if (is_null($price_adjustments)) {
            throw new \InvalidArgumentException('non-nullable price_adjustments cannot be null');
        }
        $this->container['price_adjustments'] = $price_adjustments;

        return $this;
    }

    /**
     * Gets net_amount
     *
     * @return float|null
     */
    public function getNetAmount()
    {
        return $this->container['net_amount'];
    }

    /**
     * Sets net_amount
     *
     * @param float|null $net_amount The pre-tax cost of an item, minus any discounts or promotions.
     *
     * @return self
     */
    public function setNetAmount($net_amount)
    {
        if (is_null($net_amount)) {
            throw new \InvalidArgumentException('non-nullable net_amount cannot be null');
        }

        if (($net_amount > 1.0E+18)) {
            throw new \InvalidArgumentException('invalid value for $net_amount when calling AmountComponents., must be smaller than or equal to 1.0E+18.');
        }

        $this->container['net_amount'] = $net_amount;

        return $this;
    }

    /**
     * Gets tax_amounts
     *
     * @return \Fiserv\Payments\Lib\CommerceHub\Model\TaxDetails[]|null
     */
    public function getTaxAmounts()
    {
        return $this->container['tax_amounts'];
    }

    /**
     * Sets tax_amounts
     *
     * @param \Fiserv\Payments\Lib\CommerceHub\Model\TaxDetails[]|null $tax_amounts Total amounts for taxes applied to the purchase
     *
     * @return self
     */
    public function setTaxAmounts($tax_amounts)
    {
        if (is_null($tax_amounts)) {
            throw new \InvalidArgumentException('non-nullable tax_amounts cannot be null');
        }
        $this->container['tax_amounts'] = $tax_amounts;

        return $this;
    }

    /**
     * Gets gross_amount
     *
     * @return float|null
     */
    public function getGrossAmount()
    {
        return $this->container['gross_amount'];
    }

    /**
     * Sets gross_amount
     *
     * @param float|null $gross_amount The total cost of an item, including the unit price and any other costs, discounts, fees, or taxes.
     *
     * @return self
     */
    public function setGrossAmount($gross_amount)
    {
        if (is_null($gross_amount)) {
            throw new \InvalidArgumentException('non-nullable gross_amount cannot be null');
        }

        if (($gross_amount > 1.0E+18)) {
            throw new \InvalidArgumentException('invalid value for $gross_amount when calling AmountComponents., must be smaller than or equal to 1.0E+18.');
        }

        $this->container['gross_amount'] = $gross_amount;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


