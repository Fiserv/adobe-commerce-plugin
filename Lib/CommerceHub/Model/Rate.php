<?php
/**
 * Rate
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Fiserv\Payments\Lib\CommerceHub
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Commerce Hub
 *
 * This API Specification is designed to provide technical guidance required to consume and integrate with our APIs for payment processing.
 *
 * The version of the OpenAPI document: v1.24.08
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.3.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Fiserv\Payments\Lib\CommerceHub\Model;

use \ArrayAccess;
use \Fiserv\Payments\Lib\CommerceHub\ObjectSerializer;

/**
 * Rate Class Doc Comment
 *
 * @category Class
 * @description Rate object
 * @package  Fiserv\Payments\Lib\CommerceHub
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class Rate implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Rate';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'eligibility' => 'string',
        'exchange_rate' => 'float',
        'margin' => 'float',
        'provider' => 'string',
        'reference_id' => 'string',
        'timestamp' => '\DateTime',
        'valid_from' => '\DateTime',
        'valid_to' => '\DateTime',
        'source_amount' => '\Fiserv\Payments\Lib\CommerceHub\Model\Amount',
        'target_amount' => '\Fiserv\Payments\Lib\CommerceHub\Model\Amount'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'eligibility' => null,
        'exchange_rate' => null,
        'margin' => null,
        'provider' => null,
        'reference_id' => null,
        'timestamp' => 'date-time',
        'valid_from' => 'date-time',
        'valid_to' => 'date-time',
        'source_amount' => null,
        'target_amount' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'eligibility' => false,
        'exchange_rate' => false,
        'margin' => false,
        'provider' => false,
        'reference_id' => false,
        'timestamp' => false,
        'valid_from' => false,
        'valid_to' => false,
        'source_amount' => false,
        'target_amount' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'eligibility' => 'eligibility',
        'exchange_rate' => 'exchangeRate',
        'margin' => 'margin',
        'provider' => 'provider',
        'reference_id' => 'referenceId',
        'timestamp' => 'timestamp',
        'valid_from' => 'validFrom',
        'valid_to' => 'validTo',
        'source_amount' => 'sourceAmount',
        'target_amount' => 'targetAmount'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'eligibility' => 'setEligibility',
        'exchange_rate' => 'setExchangeRate',
        'margin' => 'setMargin',
        'provider' => 'setProvider',
        'reference_id' => 'setReferenceId',
        'timestamp' => 'setTimestamp',
        'valid_from' => 'setValidFrom',
        'valid_to' => 'setValidTo',
        'source_amount' => 'setSourceAmount',
        'target_amount' => 'setTargetAmount'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'eligibility' => 'getEligibility',
        'exchange_rate' => 'getExchangeRate',
        'margin' => 'getMargin',
        'provider' => 'getProvider',
        'reference_id' => 'getReferenceId',
        'timestamp' => 'getTimestamp',
        'valid_from' => 'getValidFrom',
        'valid_to' => 'getValidTo',
        'source_amount' => 'getSourceAmount',
        'target_amount' => 'getTargetAmount'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('eligibility', $data ?? [], null);
        $this->setIfExists('exchange_rate', $data ?? [], null);
        $this->setIfExists('margin', $data ?? [], null);
        $this->setIfExists('provider', $data ?? [], null);
        $this->setIfExists('reference_id', $data ?? [], null);
        $this->setIfExists('timestamp', $data ?? [], null);
        $this->setIfExists('valid_from', $data ?? [], null);
        $this->setIfExists('valid_to', $data ?? [], null);
        $this->setIfExists('source_amount', $data ?? [], null);
        $this->setIfExists('target_amount', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['eligibility']) && (mb_strlen($this->container['eligibility']) > 25)) {
            $invalidProperties[] = "invalid value for 'eligibility', the character length must be smaller than or equal to 25.";
        }

        if (!is_null($this->container['exchange_rate']) && ($this->container['exchange_rate'] > 1.0E+18)) {
            $invalidProperties[] = "invalid value for 'exchange_rate', must be smaller than or equal to 1.0E+18.";
        }

        if (!is_null($this->container['margin']) && ($this->container['margin'] > 1.0E+18)) {
            $invalidProperties[] = "invalid value for 'margin', must be smaller than or equal to 1.0E+18.";
        }

        if (!is_null($this->container['provider']) && (mb_strlen($this->container['provider']) > 30)) {
            $invalidProperties[] = "invalid value for 'provider', the character length must be smaller than or equal to 30.";
        }

        if (!is_null($this->container['reference_id']) && (mb_strlen($this->container['reference_id']) > 64)) {
            $invalidProperties[] = "invalid value for 'reference_id', the character length must be smaller than or equal to 64.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets eligibility
     *
     * @return string|null
     */
    public function getEligibility()
    {
        return $this->container['eligibility'];
    }

    /**
     * Sets eligibility
     *
     * @param string|null $eligibility Indicates the DCC eligibility.  Valid Values: * DCC_ELIGIBLE * DCC_NOT_ELIGIBLE
     *
     * @return self
     */
    public function setEligibility($eligibility)
    {
        if (is_null($eligibility)) {
            throw new \InvalidArgumentException('non-nullable eligibility cannot be null');
        }
        if ((mb_strlen($eligibility) > 25)) {
            throw new \InvalidArgumentException('invalid length for $eligibility when calling Rate., must be smaller than or equal to 25.');
        }

        $this->container['eligibility'] = $eligibility;

        return $this;
    }

    /**
     * Gets exchange_rate
     *
     * @return float|null
     */
    public function getExchangeRate()
    {
        return $this->container['exchange_rate'];
    }

    /**
     * Sets exchange_rate
     *
     * @param float|null $exchange_rate Derived exchange rate for the source and target currencies
     *
     * @return self
     */
    public function setExchangeRate($exchange_rate)
    {
        if (is_null($exchange_rate)) {
            throw new \InvalidArgumentException('non-nullable exchange_rate cannot be null');
        }

        if (($exchange_rate > 1.0E+18)) {
            throw new \InvalidArgumentException('invalid value for $exchange_rate when calling Rate., must be smaller than or equal to 1.0E+18.');
        }

        $this->container['exchange_rate'] = $exchange_rate;

        return $this;
    }

    /**
     * Gets margin
     *
     * @return float|null
     */
    public function getMargin()
    {
        return $this->container['margin'];
    }

    /**
     * Sets margin
     *
     * @param float|null $margin International margin when making the DCC offer to the cardholder
     *
     * @return self
     */
    public function setMargin($margin)
    {
        if (is_null($margin)) {
            throw new \InvalidArgumentException('non-nullable margin cannot be null');
        }

        if (($margin > 1.0E+18)) {
            throw new \InvalidArgumentException('invalid value for $margin when calling Rate., must be smaller than or equal to 1.0E+18.');
        }

        $this->container['margin'] = $margin;

        return $this;
    }

    /**
     * Gets provider
     *
     * @return string|null
     */
    public function getProvider()
    {
        return $this->container['provider'];
    }

    /**
     * Sets provider
     *
     * @param string|null $provider Indicates the name for the rate provider.
     *
     * @return self
     */
    public function setProvider($provider)
    {
        if (is_null($provider)) {
            throw new \InvalidArgumentException('non-nullable provider cannot be null');
        }
        if ((mb_strlen($provider) > 30)) {
            throw new \InvalidArgumentException('invalid length for $provider when calling Rate., must be smaller than or equal to 30.');
        }

        $this->container['provider'] = $provider;

        return $this;
    }

    /**
     * Gets reference_id
     *
     * @return string|null
     */
    public function getReferenceId()
    {
        return $this->container['reference_id'];
    }

    /**
     * Sets reference_id
     *
     * @param string|null $reference_id A unique identifier for a currencies transaction that can map to the API TraceId. This can be passed for primary and secondary transactions
     *
     * @return self
     */
    public function setReferenceId($reference_id)
    {
        if (is_null($reference_id)) {
            throw new \InvalidArgumentException('non-nullable reference_id cannot be null');
        }
        if ((mb_strlen($reference_id) > 64)) {
            throw new \InvalidArgumentException('invalid length for $reference_id when calling Rate., must be smaller than or equal to 64.');
        }

        $this->container['reference_id'] = $reference_id;

        return $this;
    }

    /**
     * Gets timestamp
     *
     * @return \DateTime|null
     */
    public function getTimestamp()
    {
        return $this->container['timestamp'];
    }

    /**
     * Sets timestamp
     *
     * @param \DateTime|null $timestamp Date and time the currency rate transaction occurred in YYYY-MM-DDThh:mm:ssZ format.
     *
     * @return self
     */
    public function setTimestamp($timestamp)
    {
        if (is_null($timestamp)) {
            throw new \InvalidArgumentException('non-nullable timestamp cannot be null');
        }
        $this->container['timestamp'] = $timestamp;

        return $this;
    }

    /**
     * Gets valid_from
     *
     * @return \DateTime|null
     */
    public function getValidFrom()
    {
        return $this->container['valid_from'];
    }

    /**
     * Sets valid_from
     *
     * @param \DateTime|null $valid_from Start date and time the currency rate transaction in YYYY-MM-DDThh:mm:ssZ format.
     *
     * @return self
     */
    public function setValidFrom($valid_from)
    {
        if (is_null($valid_from)) {
            throw new \InvalidArgumentException('non-nullable valid_from cannot be null');
        }
        $this->container['valid_from'] = $valid_from;

        return $this;
    }

    /**
     * Gets valid_to
     *
     * @return \DateTime|null
     */
    public function getValidTo()
    {
        return $this->container['valid_to'];
    }

    /**
     * Sets valid_to
     *
     * @param \DateTime|null $valid_to End date and time the currency rate transaction in YYYY-MM-DDThh:mm:ssZ format.
     *
     * @return self
     */
    public function setValidTo($valid_to)
    {
        if (is_null($valid_to)) {
            throw new \InvalidArgumentException('non-nullable valid_to cannot be null');
        }
        $this->container['valid_to'] = $valid_to;

        return $this;
    }

    /**
     * Gets source_amount
     *
     * @return \Fiserv\Payments\Lib\CommerceHub\Model\Amount|null
     */
    public function getSourceAmount()
    {
        return $this->container['source_amount'];
    }

    /**
     * Sets source_amount
     *
     * @param \Fiserv\Payments\Lib\CommerceHub\Model\Amount|null $source_amount source_amount
     *
     * @return self
     */
    public function setSourceAmount($source_amount)
    {
        if (is_null($source_amount)) {
            throw new \InvalidArgumentException('non-nullable source_amount cannot be null');
        }
        $this->container['source_amount'] = $source_amount;

        return $this;
    }

    /**
     * Gets target_amount
     *
     * @return \Fiserv\Payments\Lib\CommerceHub\Model\Amount|null
     */
    public function getTargetAmount()
    {
        return $this->container['target_amount'];
    }

    /**
     * Sets target_amount
     *
     * @param \Fiserv\Payments\Lib\CommerceHub\Model\Amount|null $target_amount target_amount
     *
     * @return self
     */
    public function setTargetAmount($target_amount)
    {
        if (is_null($target_amount)) {
            throw new \InvalidArgumentException('non-nullable target_amount cannot be null');
        }
        $this->container['target_amount'] = $target_amount;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


