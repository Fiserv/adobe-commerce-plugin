<?php
/**
 * MethodData3DS
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Fiserv\Payments\Lib\CommerceHub
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Commerce Hub
 *
 * This API Specification is designed to provide technical guidance required to consume and integrate with our APIs for payment processing.
 *
 * The version of the OpenAPI document: v1.24.08
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.3.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Fiserv\Payments\Lib\CommerceHub\Model;

use \ArrayAccess;
use \Fiserv\Payments\Lib\CommerceHub\ObjectSerializer;

/**
 * MethodData3DS Class Doc Comment
 *
 * @category Class
 * @description Additional device data collection details passed during 3-D Secure (3DS) flows.
 * @package  Fiserv\Payments\Lib\CommerceHub
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class MethodData3DS implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'MethodData3DS';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'data_collection_url' => 'string',
        'encoded_token' => 'string',
        'encoded_data' => 'string',
        'notification_url' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'data_collection_url' => null,
        'encoded_token' => null,
        'encoded_data' => null,
        'notification_url' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'data_collection_url' => false,
        'encoded_token' => false,
        'encoded_data' => false,
        'notification_url' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'data_collection_url' => 'dataCollectionUrl',
        'encoded_token' => 'encodedToken',
        'encoded_data' => 'encodedData',
        'notification_url' => 'notificationUrl'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'data_collection_url' => 'setDataCollectionUrl',
        'encoded_token' => 'setEncodedToken',
        'encoded_data' => 'setEncodedData',
        'notification_url' => 'setNotificationUrl'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'data_collection_url' => 'getDataCollectionUrl',
        'encoded_token' => 'getEncodedToken',
        'encoded_data' => 'getEncodedData',
        'notification_url' => 'getNotificationUrl'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('data_collection_url', $data ?? [], null);
        $this->setIfExists('encoded_token', $data ?? [], null);
        $this->setIfExists('encoded_data', $data ?? [], null);
        $this->setIfExists('notification_url', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['data_collection_url']) && (mb_strlen($this->container['data_collection_url']) > 256)) {
            $invalidProperties[] = "invalid value for 'data_collection_url', the character length must be smaller than or equal to 256.";
        }

        if (!is_null($this->container['encoded_token']) && (mb_strlen($this->container['encoded_token']) > 4000)) {
            $invalidProperties[] = "invalid value for 'encoded_token', the character length must be smaller than or equal to 4000.";
        }

        if (!is_null($this->container['encoded_data']) && (mb_strlen($this->container['encoded_data']) > 4000)) {
            $invalidProperties[] = "invalid value for 'encoded_data', the character length must be smaller than or equal to 4000.";
        }

        if (!is_null($this->container['notification_url']) && (mb_strlen($this->container['notification_url']) > 256)) {
            $invalidProperties[] = "invalid value for 'notification_url', the character length must be smaller than or equal to 256.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets data_collection_url
     *
     * @return string|null
     */
    public function getDataCollectionUrl()
    {
        return $this->container['data_collection_url'];
    }

    /**
     * Sets data_collection_url
     *
     * @param string|null $data_collection_url The URL that will be used by the 3DS Method to collect card holder browser information
     *
     * @return self
     */
    public function setDataCollectionUrl($data_collection_url)
    {
        if (is_null($data_collection_url)) {
            throw new \InvalidArgumentException('non-nullable data_collection_url cannot be null');
        }
        if ((mb_strlen($data_collection_url) > 256)) {
            throw new \InvalidArgumentException('invalid length for $data_collection_url when calling MethodData3DS., must be smaller than or equal to 256.');
        }

        $this->container['data_collection_url'] = $data_collection_url;

        return $this;
    }

    /**
     * Gets encoded_token
     *
     * @return string|null
     */
    public function getEncodedToken()
    {
        return $this->container['encoded_token'];
    }

    /**
     * Sets encoded_token
     *
     * @param string|null $encoded_token Base64 encoded transactional JWT token for external data collection with service provider.
     *
     * @return self
     */
    public function setEncodedToken($encoded_token)
    {
        if (is_null($encoded_token)) {
            throw new \InvalidArgumentException('non-nullable encoded_token cannot be null');
        }
        if ((mb_strlen($encoded_token) > 4000)) {
            throw new \InvalidArgumentException('invalid length for $encoded_token when calling MethodData3DS., must be smaller than or equal to 4000.');
        }

        $this->container['encoded_token'] = $encoded_token;

        return $this;
    }

    /**
     * Gets encoded_data
     *
     * @return string|null
     */
    public function getEncodedData()
    {
        return $this->container['encoded_data'];
    }

    /**
     * Sets encoded_data
     *
     * @param string|null $encoded_data Base64 encoded data for external data collection with service provider.
     *
     * @return self
     */
    public function setEncodedData($encoded_data)
    {
        if (is_null($encoded_data)) {
            throw new \InvalidArgumentException('non-nullable encoded_data cannot be null');
        }
        if ((mb_strlen($encoded_data) > 4000)) {
            throw new \InvalidArgumentException('invalid length for $encoded_data when calling MethodData3DS., must be smaller than or equal to 4000.');
        }

        $this->container['encoded_data'] = $encoded_data;

        return $this;
    }

    /**
     * Gets notification_url
     *
     * @return string|null
     */
    public function getNotificationUrl()
    {
        return $this->container['notification_url'];
    }

    /**
     * Sets notification_url
     *
     * @param string|null $notification_url The notification URL to which the 3-D Secure (3DS) provider will send the result of the device data collection
     *
     * @return self
     */
    public function setNotificationUrl($notification_url)
    {
        if (is_null($notification_url)) {
            throw new \InvalidArgumentException('non-nullable notification_url cannot be null');
        }
        if ((mb_strlen($notification_url) > 256)) {
            throw new \InvalidArgumentException('invalid length for $notification_url when calling MethodData3DS., must be smaller than or equal to 256.');
        }

        $this->container['notification_url'] = $notification_url;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


