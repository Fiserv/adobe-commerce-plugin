<?php
/**
 * ItemDetails
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Fiserv\Payments\Lib\CommerceHub
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Commerce Hub
 *
 * This API Specification is designed to provide technical guidance required to consume and integrate with our APIs for payment processing.
 *
 * The version of the OpenAPI document: v1.24.08
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.3.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Fiserv\Payments\Lib\CommerceHub\Model;

use \ArrayAccess;
use \Fiserv\Payments\Lib\CommerceHub\ObjectSerializer;

/**
 * ItemDetails Class Doc Comment
 *
 * @category Class
 * @description &lt;a href&#x3D;\&quot;../docs?path&#x3D;docs/Resources/Master-Data/Order-Data.md#item-details\&quot;&gt;Item details&lt;/a&gt;
 * @package  Fiserv\Payments\Lib\CommerceHub
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ItemDetails implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'ItemDetails';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'item_number' => 'float',
        'commodity_code' => 'string',
        'payment_system_product_code' => 'string',
        'product_upc' => 'string',
        'item_url' => 'string',
        'item_image_url' => 'string',
        'item_description' => 'string',
        'product_sku' => 'string',
        'quantity' => 'float',
        'unit_of_measurement' => 'string',
        'amount_components' => '\Fiserv\Payments\Lib\CommerceHub\Model\AmountComponents',
        'insurance_claim_number' => 'string',
        'department' => 'string',
        'sub_department' => 'string',
        'department_class' => 'string',
        'department_sub_class' => 'string',
        'item_type' => 'string',
        'item_sub_type' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'item_number' => null,
        'commodity_code' => null,
        'payment_system_product_code' => null,
        'product_upc' => null,
        'item_url' => null,
        'item_image_url' => null,
        'item_description' => null,
        'product_sku' => null,
        'quantity' => null,
        'unit_of_measurement' => null,
        'amount_components' => null,
        'insurance_claim_number' => null,
        'department' => null,
        'sub_department' => null,
        'department_class' => null,
        'department_sub_class' => null,
        'item_type' => null,
        'item_sub_type' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'item_number' => false,
        'commodity_code' => false,
        'payment_system_product_code' => false,
        'product_upc' => false,
        'item_url' => false,
        'item_image_url' => false,
        'item_description' => false,
        'product_sku' => false,
        'quantity' => false,
        'unit_of_measurement' => false,
        'amount_components' => false,
        'insurance_claim_number' => false,
        'department' => false,
        'sub_department' => false,
        'department_class' => false,
        'department_sub_class' => false,
        'item_type' => false,
        'item_sub_type' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'item_number' => 'itemNumber',
        'commodity_code' => 'commodityCode',
        'payment_system_product_code' => 'paymentSystemProductCode',
        'product_upc' => 'productUPC',
        'item_url' => 'itemUrl',
        'item_image_url' => 'itemImageUrl',
        'item_description' => 'itemDescription',
        'product_sku' => 'productSKU',
        'quantity' => 'quantity',
        'unit_of_measurement' => 'unitOfMeasurement',
        'amount_components' => 'amountComponents',
        'insurance_claim_number' => 'insuranceClaimNumber',
        'department' => 'department',
        'sub_department' => 'subDepartment',
        'department_class' => 'departmentClass',
        'department_sub_class' => 'departmentSubClass',
        'item_type' => 'itemType',
        'item_sub_type' => 'itemSubType'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'item_number' => 'setItemNumber',
        'commodity_code' => 'setCommodityCode',
        'payment_system_product_code' => 'setPaymentSystemProductCode',
        'product_upc' => 'setProductUpc',
        'item_url' => 'setItemUrl',
        'item_image_url' => 'setItemImageUrl',
        'item_description' => 'setItemDescription',
        'product_sku' => 'setProductSku',
        'quantity' => 'setQuantity',
        'unit_of_measurement' => 'setUnitOfMeasurement',
        'amount_components' => 'setAmountComponents',
        'insurance_claim_number' => 'setInsuranceClaimNumber',
        'department' => 'setDepartment',
        'sub_department' => 'setSubDepartment',
        'department_class' => 'setDepartmentClass',
        'department_sub_class' => 'setDepartmentSubClass',
        'item_type' => 'setItemType',
        'item_sub_type' => 'setItemSubType'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'item_number' => 'getItemNumber',
        'commodity_code' => 'getCommodityCode',
        'payment_system_product_code' => 'getPaymentSystemProductCode',
        'product_upc' => 'getProductUpc',
        'item_url' => 'getItemUrl',
        'item_image_url' => 'getItemImageUrl',
        'item_description' => 'getItemDescription',
        'product_sku' => 'getProductSku',
        'quantity' => 'getQuantity',
        'unit_of_measurement' => 'getUnitOfMeasurement',
        'amount_components' => 'getAmountComponents',
        'insurance_claim_number' => 'getInsuranceClaimNumber',
        'department' => 'getDepartment',
        'sub_department' => 'getSubDepartment',
        'department_class' => 'getDepartmentClass',
        'department_sub_class' => 'getDepartmentSubClass',
        'item_type' => 'getItemType',
        'item_sub_type' => 'getItemSubType'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('item_number', $data ?? [], null);
        $this->setIfExists('commodity_code', $data ?? [], null);
        $this->setIfExists('payment_system_product_code', $data ?? [], null);
        $this->setIfExists('product_upc', $data ?? [], null);
        $this->setIfExists('item_url', $data ?? [], null);
        $this->setIfExists('item_image_url', $data ?? [], null);
        $this->setIfExists('item_description', $data ?? [], null);
        $this->setIfExists('product_sku', $data ?? [], null);
        $this->setIfExists('quantity', $data ?? [], null);
        $this->setIfExists('unit_of_measurement', $data ?? [], null);
        $this->setIfExists('amount_components', $data ?? [], null);
        $this->setIfExists('insurance_claim_number', $data ?? [], null);
        $this->setIfExists('department', $data ?? [], null);
        $this->setIfExists('sub_department', $data ?? [], null);
        $this->setIfExists('department_class', $data ?? [], null);
        $this->setIfExists('department_sub_class', $data ?? [], null);
        $this->setIfExists('item_type', $data ?? [], null);
        $this->setIfExists('item_sub_type', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['item_number']) && ($this->container['item_number'] > 998)) {
            $invalidProperties[] = "invalid value for 'item_number', must be smaller than or equal to 998.";
        }

        if (!is_null($this->container['commodity_code']) && (mb_strlen($this->container['commodity_code']) > 256)) {
            $invalidProperties[] = "invalid value for 'commodity_code', the character length must be smaller than or equal to 256.";
        }

        if (!is_null($this->container['payment_system_product_code']) && (mb_strlen($this->container['payment_system_product_code']) > 4)) {
            $invalidProperties[] = "invalid value for 'payment_system_product_code', the character length must be smaller than or equal to 4.";
        }

        if (!is_null($this->container['product_upc']) && (mb_strlen($this->container['product_upc']) > 12)) {
            $invalidProperties[] = "invalid value for 'product_upc', the character length must be smaller than or equal to 12.";
        }

        if (!is_null($this->container['item_url']) && (mb_strlen($this->container['item_url']) > 512)) {
            $invalidProperties[] = "invalid value for 'item_url', the character length must be smaller than or equal to 512.";
        }

        if (!is_null($this->container['item_image_url']) && (mb_strlen($this->container['item_image_url']) > 512)) {
            $invalidProperties[] = "invalid value for 'item_image_url', the character length must be smaller than or equal to 512.";
        }

        if (!is_null($this->container['item_description']) && (mb_strlen($this->container['item_description']) > 1024)) {
            $invalidProperties[] = "invalid value for 'item_description', the character length must be smaller than or equal to 1024.";
        }

        if (!is_null($this->container['product_sku']) && (mb_strlen($this->container['product_sku']) > 64)) {
            $invalidProperties[] = "invalid value for 'product_sku', the character length must be smaller than or equal to 64.";
        }

        if (!is_null($this->container['quantity']) && ($this->container['quantity'] > 99999999)) {
            $invalidProperties[] = "invalid value for 'quantity', must be smaller than or equal to 99999999.";
        }

        if (!is_null($this->container['insurance_claim_number']) && (mb_strlen($this->container['insurance_claim_number']) > 64)) {
            $invalidProperties[] = "invalid value for 'insurance_claim_number', the character length must be smaller than or equal to 64.";
        }

        if (!is_null($this->container['department']) && (mb_strlen($this->container['department']) > 256)) {
            $invalidProperties[] = "invalid value for 'department', the character length must be smaller than or equal to 256.";
        }

        if (!is_null($this->container['sub_department']) && (mb_strlen($this->container['sub_department']) > 256)) {
            $invalidProperties[] = "invalid value for 'sub_department', the character length must be smaller than or equal to 256.";
        }

        if (!is_null($this->container['department_class']) && (mb_strlen($this->container['department_class']) > 256)) {
            $invalidProperties[] = "invalid value for 'department_class', the character length must be smaller than or equal to 256.";
        }

        if (!is_null($this->container['department_sub_class']) && (mb_strlen($this->container['department_sub_class']) > 256)) {
            $invalidProperties[] = "invalid value for 'department_sub_class', the character length must be smaller than or equal to 256.";
        }

        if (!is_null($this->container['item_type']) && (mb_strlen($this->container['item_type']) > 256)) {
            $invalidProperties[] = "invalid value for 'item_type', the character length must be smaller than or equal to 256.";
        }

        if (!is_null($this->container['item_sub_type']) && (mb_strlen($this->container['item_sub_type']) > 256)) {
            $invalidProperties[] = "invalid value for 'item_sub_type', the character length must be smaller than or equal to 256.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets item_number
     *
     * @return float|null
     */
    public function getItemNumber()
    {
        return $this->container['item_number'];
    }

    /**
     * Sets item_number
     *
     * @param float|null $item_number Line item number.
     *
     * @return self
     */
    public function setItemNumber($item_number)
    {
        if (is_null($item_number)) {
            throw new \InvalidArgumentException('non-nullable item_number cannot be null');
        }

        if (($item_number > 998)) {
            throw new \InvalidArgumentException('invalid value for $item_number when calling ItemDetails., must be smaller than or equal to 998.');
        }

        $this->container['item_number'] = $item_number;

        return $this;
    }

    /**
     * Gets commodity_code
     *
     * @return string|null
     */
    public function getCommodityCode()
    {
        return $this->container['commodity_code'];
    }

    /**
     * Sets commodity_code
     *
     * @param string|null $commodity_code <a href=\"../docs?path=docs/Resources/Master-Data/Commodity-Codes.md#commodity-codes\">Commodity Code</a>
     *
     * @return self
     */
    public function setCommodityCode($commodity_code)
    {
        if (is_null($commodity_code)) {
            throw new \InvalidArgumentException('non-nullable commodity_code cannot be null');
        }
        if ((mb_strlen($commodity_code) > 256)) {
            throw new \InvalidArgumentException('invalid length for $commodity_code when calling ItemDetails., must be smaller than or equal to 256.');
        }

        $this->container['commodity_code'] = $commodity_code;

        return $this;
    }

    /**
     * Gets payment_system_product_code
     *
     * @return string|null
     */
    public function getPaymentSystemProductCode()
    {
        return $this->container['payment_system_product_code'];
    }

    /**
     * Sets payment_system_product_code
     *
     * @param string|null $payment_system_product_code <a href=\"../docs?path=docs/Resources/Master-Data/Payment-System-Product-Codes.md\">Payment System Product Code</a> based on the Conexxus Public Standards
     *
     * @return self
     */
    public function setPaymentSystemProductCode($payment_system_product_code)
    {
        if (is_null($payment_system_product_code)) {
            throw new \InvalidArgumentException('non-nullable payment_system_product_code cannot be null');
        }
        if ((mb_strlen($payment_system_product_code) > 4)) {
            throw new \InvalidArgumentException('invalid length for $payment_system_product_code when calling ItemDetails., must be smaller than or equal to 4.');
        }

        $this->container['payment_system_product_code'] = $payment_system_product_code;

        return $this;
    }

    /**
     * Gets product_upc
     *
     * @return string|null
     */
    public function getProductUpc()
    {
        return $this->container['product_upc'];
    }

    /**
     * Sets product_upc
     *
     * @param string|null $product_upc Universal Product Code identifier used for retail products worldwide
     *
     * @return self
     */
    public function setProductUpc($product_upc)
    {
        if (is_null($product_upc)) {
            throw new \InvalidArgumentException('non-nullable product_upc cannot be null');
        }
        if ((mb_strlen($product_upc) > 12)) {
            throw new \InvalidArgumentException('invalid length for $product_upc when calling ItemDetails., must be smaller than or equal to 12.');
        }

        $this->container['product_upc'] = $product_upc;

        return $this;
    }

    /**
     * Gets item_url
     *
     * @return string|null
     */
    public function getItemUrl()
    {
        return $this->container['item_url'];
    }

    /**
     * Sets item_url
     *
     * @param string|null $item_url Item url
     *
     * @return self
     */
    public function setItemUrl($item_url)
    {
        if (is_null($item_url)) {
            throw new \InvalidArgumentException('non-nullable item_url cannot be null');
        }
        if ((mb_strlen($item_url) > 512)) {
            throw new \InvalidArgumentException('invalid length for $item_url when calling ItemDetails., must be smaller than or equal to 512.');
        }

        $this->container['item_url'] = $item_url;

        return $this;
    }

    /**
     * Gets item_image_url
     *
     * @return string|null
     */
    public function getItemImageUrl()
    {
        return $this->container['item_image_url'];
    }

    /**
     * Sets item_image_url
     *
     * @param string|null $item_image_url Item image url
     *
     * @return self
     */
    public function setItemImageUrl($item_image_url)
    {
        if (is_null($item_image_url)) {
            throw new \InvalidArgumentException('non-nullable item_image_url cannot be null');
        }
        if ((mb_strlen($item_image_url) > 512)) {
            throw new \InvalidArgumentException('invalid length for $item_image_url when calling ItemDetails., must be smaller than or equal to 512.');
        }

        $this->container['item_image_url'] = $item_image_url;

        return $this;
    }

    /**
     * Gets item_description
     *
     * @return string|null
     */
    public function getItemDescription()
    {
        return $this->container['item_description'];
    }

    /**
     * Sets item_description
     *
     * @param string|null $item_description Name or description of item
     *
     * @return self
     */
    public function setItemDescription($item_description)
    {
        if (is_null($item_description)) {
            throw new \InvalidArgumentException('non-nullable item_description cannot be null');
        }
        if ((mb_strlen($item_description) > 1024)) {
            throw new \InvalidArgumentException('invalid length for $item_description when calling ItemDetails., must be smaller than or equal to 1024.');
        }

        $this->container['item_description'] = $item_description;

        return $this;
    }

    /**
     * Gets product_sku
     *
     * @return string|null
     */
    public function getProductSku()
    {
        return $this->container['product_sku'];
    }

    /**
     * Sets product_sku
     *
     * @param string|null $product_sku Stock keeping unit identifier consisting of letters and numbers that identify characteristics about each product.
     *
     * @return self
     */
    public function setProductSku($product_sku)
    {
        if (is_null($product_sku)) {
            throw new \InvalidArgumentException('non-nullable product_sku cannot be null');
        }
        if ((mb_strlen($product_sku) > 64)) {
            throw new \InvalidArgumentException('invalid length for $product_sku when calling ItemDetails., must be smaller than or equal to 64.');
        }

        $this->container['product_sku'] = $product_sku;

        return $this;
    }

    /**
     * Gets quantity
     *
     * @return float|null
     */
    public function getQuantity()
    {
        return $this->container['quantity'];
    }

    /**
     * Sets quantity
     *
     * @param float|null $quantity Identifies the number of units of the product sold.
     *
     * @return self
     */
    public function setQuantity($quantity)
    {
        if (is_null($quantity)) {
            throw new \InvalidArgumentException('non-nullable quantity cannot be null');
        }

        if (($quantity > 99999999)) {
            throw new \InvalidArgumentException('invalid value for $quantity when calling ItemDetails., must be smaller than or equal to 99999999.');
        }

        $this->container['quantity'] = $quantity;

        return $this;
    }

    /**
     * Gets unit_of_measurement
     *
     * @return string|null
     */
    public function getUnitOfMeasurement()
    {
        return $this->container['unit_of_measurement'];
    }

    /**
     * Sets unit_of_measurement
     *
     * @param string|null $unit_of_measurement <a href=\"../docs?path=docs/Resources/Master-Data/Unit-Measurement.md#unit-of-measurement\">Unit Of Measurement</a>
     *
     * @return self
     */
    public function setUnitOfMeasurement($unit_of_measurement)
    {
        if (is_null($unit_of_measurement)) {
            throw new \InvalidArgumentException('non-nullable unit_of_measurement cannot be null');
        }
        $this->container['unit_of_measurement'] = $unit_of_measurement;

        return $this;
    }

    /**
     * Gets amount_components
     *
     * @return \Fiserv\Payments\Lib\CommerceHub\Model\AmountComponents|null
     */
    public function getAmountComponents()
    {
        return $this->container['amount_components'];
    }

    /**
     * Sets amount_components
     *
     * @param \Fiserv\Payments\Lib\CommerceHub\Model\AmountComponents|null $amount_components amount_components
     *
     * @return self
     */
    public function setAmountComponents($amount_components)
    {
        if (is_null($amount_components)) {
            throw new \InvalidArgumentException('non-nullable amount_components cannot be null');
        }
        $this->container['amount_components'] = $amount_components;

        return $this;
    }

    /**
     * Gets insurance_claim_number
     *
     * @return string|null
     */
    public function getInsuranceClaimNumber()
    {
        return $this->container['insurance_claim_number'];
    }

    /**
     * Sets insurance_claim_number
     *
     * @param string|null $insurance_claim_number The Insurance Claim Number of the Customer.
     *
     * @return self
     */
    public function setInsuranceClaimNumber($insurance_claim_number)
    {
        if (is_null($insurance_claim_number)) {
            throw new \InvalidArgumentException('non-nullable insurance_claim_number cannot be null');
        }
        if ((mb_strlen($insurance_claim_number) > 64)) {
            throw new \InvalidArgumentException('invalid length for $insurance_claim_number when calling ItemDetails., must be smaller than or equal to 64.');
        }

        $this->container['insurance_claim_number'] = $insurance_claim_number;

        return $this;
    }

    /**
     * Gets department
     *
     * @return string|null
     */
    public function getDepartment()
    {
        return $this->container['department'];
    }

    /**
     * Sets department
     *
     * @param string|null $department Merchant defined code identifying the department the item was purchased.
     *
     * @return self
     */
    public function setDepartment($department)
    {
        if (is_null($department)) {
            throw new \InvalidArgumentException('non-nullable department cannot be null');
        }
        if ((mb_strlen($department) > 256)) {
            throw new \InvalidArgumentException('invalid length for $department when calling ItemDetails., must be smaller than or equal to 256.');
        }

        $this->container['department'] = $department;

        return $this;
    }

    /**
     * Gets sub_department
     *
     * @return string|null
     */
    public function getSubDepartment()
    {
        return $this->container['sub_department'];
    }

    /**
     * Sets sub_department
     *
     * @param string|null $sub_department Merchant defined sub code identifying the sub department the item was purchased.
     *
     * @return self
     */
    public function setSubDepartment($sub_department)
    {
        if (is_null($sub_department)) {
            throw new \InvalidArgumentException('non-nullable sub_department cannot be null');
        }
        if ((mb_strlen($sub_department) > 256)) {
            throw new \InvalidArgumentException('invalid length for $sub_department when calling ItemDetails., must be smaller than or equal to 256.');
        }

        $this->container['sub_department'] = $sub_department;

        return $this;
    }

    /**
     * Gets department_class
     *
     * @return string|null
     */
    public function getDepartmentClass()
    {
        return $this->container['department_class'];
    }

    /**
     * Sets department_class
     *
     * @param string|null $department_class Merchant defined code identifying the department class the item was purchased.
     *
     * @return self
     */
    public function setDepartmentClass($department_class)
    {
        if (is_null($department_class)) {
            throw new \InvalidArgumentException('non-nullable department_class cannot be null');
        }
        if ((mb_strlen($department_class) > 256)) {
            throw new \InvalidArgumentException('invalid length for $department_class when calling ItemDetails., must be smaller than or equal to 256.');
        }

        $this->container['department_class'] = $department_class;

        return $this;
    }

    /**
     * Gets department_sub_class
     *
     * @return string|null
     */
    public function getDepartmentSubClass()
    {
        return $this->container['department_sub_class'];
    }

    /**
     * Sets department_sub_class
     *
     * @param string|null $department_sub_class Merchant defined sub code identifying the department sub class the item was purchased.
     *
     * @return self
     */
    public function setDepartmentSubClass($department_sub_class)
    {
        if (is_null($department_sub_class)) {
            throw new \InvalidArgumentException('non-nullable department_sub_class cannot be null');
        }
        if ((mb_strlen($department_sub_class) > 256)) {
            throw new \InvalidArgumentException('invalid length for $department_sub_class when calling ItemDetails., must be smaller than or equal to 256.');
        }

        $this->container['department_sub_class'] = $department_sub_class;

        return $this;
    }

    /**
     * Gets item_type
     *
     * @return string|null
     */
    public function getItemType()
    {
        return $this->container['item_type'];
    }

    /**
     * Sets item_type
     *
     * @param string|null $item_type Identifies the <a href=\"../docs?path=docs/Resources/Master-Data/Order-Data.md#item-type-and-subtype\">type</a> of the item.
     *
     * @return self
     */
    public function setItemType($item_type)
    {
        if (is_null($item_type)) {
            throw new \InvalidArgumentException('non-nullable item_type cannot be null');
        }
        if ((mb_strlen($item_type) > 256)) {
            throw new \InvalidArgumentException('invalid length for $item_type when calling ItemDetails., must be smaller than or equal to 256.');
        }

        $this->container['item_type'] = $item_type;

        return $this;
    }

    /**
     * Gets item_sub_type
     *
     * @return string|null
     */
    public function getItemSubType()
    {
        return $this->container['item_sub_type'];
    }

    /**
     * Sets item_sub_type
     *
     * @param string|null $item_sub_type Identifies the <a href=\"../docs?path=docs/Resources/Master-Data/Order-Data.md#item-type-and-subtype\">subtype</a> of item.
     *
     * @return self
     */
    public function setItemSubType($item_sub_type)
    {
        if (is_null($item_sub_type)) {
            throw new \InvalidArgumentException('non-nullable item_sub_type cannot be null');
        }
        if ((mb_strlen($item_sub_type) > 256)) {
            throw new \InvalidArgumentException('invalid length for $item_sub_type when calling ItemDetails., must be smaller than or equal to 256.');
        }

        $this->container['item_sub_type'] = $item_sub_type;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


