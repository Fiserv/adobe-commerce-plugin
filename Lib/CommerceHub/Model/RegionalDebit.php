<?php
/**
 * RegionalDebit
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Fiserv\Payments\Lib\CommerceHub
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Payments
 *
 * This API Specification is designed to provide technical guidance required to consume and integrate with our APIs for payment processing.
 *
 * The version of the OpenAPI document: v1.3.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.2.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Fiserv\Payments\Lib\CommerceHub\Model;

use \ArrayAccess;
use \Fiserv\Payments\Lib\CommerceHub\ObjectSerializer;

/**
 * RegionalDebit Class Doc Comment
 *
 * @category Class
 * @description Data that applies to &lt;a href&#x3D;\&quot;../docs?path&#x3D;docs/Resources/Guides/Debit/Regional-Debit.md\&quot;&gt;regional debit&lt;/a&gt; transactions.
 * @package  Fiserv\Payments\Lib\CommerceHub
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class RegionalDebit implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'RegionalDebit';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'pin_block' => '\Fiserv\Payments\Lib\CommerceHub\Model\PinBlock',
        'region' => 'string',
        'debit_transaction_code' => 'string',
        'debit_mac_value' => 'string',
        'encrypted_key_index' => 'float',
        'message_authentication_working_key' => 'string',
        'message_authentication_working_key_check_digits' => 'string',
        'message_encryption_working_key' => 'string',
        'debit_pin_pad_serial_number' => 'string',
        'account_type' => 'string',
        'transaction_sequence_counter' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'pin_block' => null,
        'region' => null,
        'debit_transaction_code' => null,
        'debit_mac_value' => null,
        'encrypted_key_index' => null,
        'message_authentication_working_key' => null,
        'message_authentication_working_key_check_digits' => null,
        'message_encryption_working_key' => null,
        'debit_pin_pad_serial_number' => null,
        'account_type' => null,
        'transaction_sequence_counter' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'pin_block' => false,
		'region' => false,
		'debit_transaction_code' => false,
		'debit_mac_value' => false,
		'encrypted_key_index' => false,
		'message_authentication_working_key' => false,
		'message_authentication_working_key_check_digits' => false,
		'message_encryption_working_key' => false,
		'debit_pin_pad_serial_number' => false,
		'account_type' => false,
		'transaction_sequence_counter' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'pin_block' => 'pinBlock',
        'region' => 'region',
        'debit_transaction_code' => 'debitTransactionCode',
        'debit_mac_value' => 'debitMACValue',
        'encrypted_key_index' => 'encryptedKeyIndex',
        'message_authentication_working_key' => 'messageAuthenticationWorkingKey',
        'message_authentication_working_key_check_digits' => 'messageAuthenticationWorkingKeyCheckDigits',
        'message_encryption_working_key' => 'messageEncryptionWorkingKey',
        'debit_pin_pad_serial_number' => 'debitPinPadSerialNumber',
        'account_type' => 'accountType',
        'transaction_sequence_counter' => 'transactionSequenceCounter'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'pin_block' => 'setPinBlock',
        'region' => 'setRegion',
        'debit_transaction_code' => 'setDebitTransactionCode',
        'debit_mac_value' => 'setDebitMacValue',
        'encrypted_key_index' => 'setEncryptedKeyIndex',
        'message_authentication_working_key' => 'setMessageAuthenticationWorkingKey',
        'message_authentication_working_key_check_digits' => 'setMessageAuthenticationWorkingKeyCheckDigits',
        'message_encryption_working_key' => 'setMessageEncryptionWorkingKey',
        'debit_pin_pad_serial_number' => 'setDebitPinPadSerialNumber',
        'account_type' => 'setAccountType',
        'transaction_sequence_counter' => 'setTransactionSequenceCounter'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'pin_block' => 'getPinBlock',
        'region' => 'getRegion',
        'debit_transaction_code' => 'getDebitTransactionCode',
        'debit_mac_value' => 'getDebitMacValue',
        'encrypted_key_index' => 'getEncryptedKeyIndex',
        'message_authentication_working_key' => 'getMessageAuthenticationWorkingKey',
        'message_authentication_working_key_check_digits' => 'getMessageAuthenticationWorkingKeyCheckDigits',
        'message_encryption_working_key' => 'getMessageEncryptionWorkingKey',
        'debit_pin_pad_serial_number' => 'getDebitPinPadSerialNumber',
        'account_type' => 'getAccountType',
        'transaction_sequence_counter' => 'getTransactionSequenceCounter'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('pin_block', $data ?? [], null);
        $this->setIfExists('region', $data ?? [], null);
        $this->setIfExists('debit_transaction_code', $data ?? [], null);
        $this->setIfExists('debit_mac_value', $data ?? [], null);
        $this->setIfExists('encrypted_key_index', $data ?? [], null);
        $this->setIfExists('message_authentication_working_key', $data ?? [], null);
        $this->setIfExists('message_authentication_working_key_check_digits', $data ?? [], null);
        $this->setIfExists('message_encryption_working_key', $data ?? [], null);
        $this->setIfExists('debit_pin_pad_serial_number', $data ?? [], null);
        $this->setIfExists('account_type', $data ?? [], null);
        $this->setIfExists('transaction_sequence_counter', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets pin_block
     *
     * @return \Fiserv\Payments\Lib\CommerceHub\Model\PinBlock|null
     */
    public function getPinBlock()
    {
        return $this->container['pin_block'];
    }

    /**
     * Sets pin_block
     *
     * @param \Fiserv\Payments\Lib\CommerceHub\Model\PinBlock|null $pin_block pin_block
     *
     * @return self
     */
    public function setPinBlock($pin_block)
    {

        if (is_null($pin_block)) {
            throw new \InvalidArgumentException('non-nullable pin_block cannot be null');
        }

        $this->container['pin_block'] = $pin_block;

        return $this;
    }

    /**
     * Gets region
     *
     * @return string|null
     */
    public function getRegion()
    {
        return $this->container['region'];
    }

    /**
     * Sets region
     *
     * @param string|null $region Region of debit origin.
     *
     * @return self
     */
    public function setRegion($region)
    {

        if (is_null($region)) {
            throw new \InvalidArgumentException('non-nullable region cannot be null');
        }

        $this->container['region'] = $region;

        return $this;
    }

    /**
     * Gets debit_transaction_code
     *
     * @return string|null
     */
    public function getDebitTransactionCode()
    {
        return $this->container['debit_transaction_code'];
    }

    /**
     * Sets debit_transaction_code
     *
     * @param string|null $debit_transaction_code Identifies the debit transaction.
     *
     * @return self
     */
    public function setDebitTransactionCode($debit_transaction_code)
    {

        if (is_null($debit_transaction_code)) {
            throw new \InvalidArgumentException('non-nullable debit_transaction_code cannot be null');
        }

        $this->container['debit_transaction_code'] = $debit_transaction_code;

        return $this;
    }

    /**
     * Gets debit_mac_value
     *
     * @return string|null
     */
    public function getDebitMacValue()
    {
        return $this->container['debit_mac_value'];
    }

    /**
     * Sets debit_mac_value
     *
     * @param string|null $debit_mac_value Used to confirm that the key data elements of the transaction have not been tampered.
     *
     * @return self
     */
    public function setDebitMacValue($debit_mac_value)
    {

        if (is_null($debit_mac_value)) {
            throw new \InvalidArgumentException('non-nullable debit_mac_value cannot be null');
        }

        $this->container['debit_mac_value'] = $debit_mac_value;

        return $this;
    }

    /**
     * Gets encrypted_key_index
     *
     * @return float|null
     */
    public function getEncryptedKeyIndex()
    {
        return $this->container['encrypted_key_index'];
    }

    /**
     * Sets encrypted_key_index
     *
     * @param float|null $encrypted_key_index Indicates the key index in use by PIN Pad, valid values are 1 through 9.
     *
     * @return self
     */
    public function setEncryptedKeyIndex($encrypted_key_index)
    {

        if (is_null($encrypted_key_index)) {
            throw new \InvalidArgumentException('non-nullable encrypted_key_index cannot be null');
        }

        $this->container['encrypted_key_index'] = $encrypted_key_index;

        return $this;
    }

    /**
     * Gets message_authentication_working_key
     *
     * @return string|null
     */
    public function getMessageAuthenticationWorkingKey()
    {
        return $this->container['message_authentication_working_key'];
    }

    /**
     * Sets message_authentication_working_key
     *
     * @param string|null $message_authentication_working_key A message authentication code for a working key that uses a session key to detect both accidental and intentional modifications of the data.
     *
     * @return self
     */
    public function setMessageAuthenticationWorkingKey($message_authentication_working_key)
    {

        if (is_null($message_authentication_working_key)) {
            throw new \InvalidArgumentException('non-nullable message_authentication_working_key cannot be null');
        }

        $this->container['message_authentication_working_key'] = $message_authentication_working_key;

        return $this;
    }

    /**
     * Gets message_authentication_working_key_check_digits
     *
     * @return string|null
     */
    public function getMessageAuthenticationWorkingKeyCheckDigits()
    {
        return $this->container['message_authentication_working_key_check_digits'];
    }

    /**
     * Sets message_authentication_working_key_check_digits
     *
     * @param string|null $message_authentication_working_key_check_digits A message authentication code for a working key that uses a session key to check digits.
     *
     * @return self
     */
    public function setMessageAuthenticationWorkingKeyCheckDigits($message_authentication_working_key_check_digits)
    {

        if (is_null($message_authentication_working_key_check_digits)) {
            throw new \InvalidArgumentException('non-nullable message_authentication_working_key_check_digits cannot be null');
        }

        $this->container['message_authentication_working_key_check_digits'] = $message_authentication_working_key_check_digits;

        return $this;
    }

    /**
     * Gets message_encryption_working_key
     *
     * @return string|null
     */
    public function getMessageEncryptionWorkingKey()
    {
        return $this->container['message_encryption_working_key'];
    }

    /**
     * Sets message_encryption_working_key
     *
     * @param string|null $message_encryption_working_key A message encryption working key is typically a random string of bits generated specifically to scramble and unscramble data.
     *
     * @return self
     */
    public function setMessageEncryptionWorkingKey($message_encryption_working_key)
    {

        if (is_null($message_encryption_working_key)) {
            throw new \InvalidArgumentException('non-nullable message_encryption_working_key cannot be null');
        }

        $this->container['message_encryption_working_key'] = $message_encryption_working_key;

        return $this;
    }

    /**
     * Gets debit_pin_pad_serial_number
     *
     * @return string|null
     */
    public function getDebitPinPadSerialNumber()
    {
        return $this->container['debit_pin_pad_serial_number'];
    }

    /**
     * Sets debit_pin_pad_serial_number
     *
     * @param string|null $debit_pin_pad_serial_number Serial Number of the PIN device in use at the POS.
     *
     * @return self
     */
    public function setDebitPinPadSerialNumber($debit_pin_pad_serial_number)
    {

        if (is_null($debit_pin_pad_serial_number)) {
            throw new \InvalidArgumentException('non-nullable debit_pin_pad_serial_number cannot be null');
        }

        $this->container['debit_pin_pad_serial_number'] = $debit_pin_pad_serial_number;

        return $this;
    }

    /**
     * Gets account_type
     *
     * @return string|null
     */
    public function getAccountType()
    {
        return $this->container['account_type'];
    }

    /**
     * Sets account_type
     *
     * @param string|null $account_type CHECKING or SAVINGS
     *
     * @return self
     */
    public function setAccountType($account_type)
    {

        if (is_null($account_type)) {
            throw new \InvalidArgumentException('non-nullable account_type cannot be null');
        }

        $this->container['account_type'] = $account_type;

        return $this;
    }

    /**
     * Gets transaction_sequence_counter
     *
     * @return int|null
     */
    public function getTransactionSequenceCounter()
    {
        return $this->container['transaction_sequence_counter'];
    }

    /**
     * Sets transaction_sequence_counter
     *
     * @param int|null $transaction_sequence_counter Contains a unique sequence counter for this transaction from this point of sale.
     *
     * @return self
     */
    public function setTransactionSequenceCounter($transaction_sequence_counter)
    {

        if (is_null($transaction_sequence_counter)) {
            throw new \InvalidArgumentException('non-nullable transaction_sequence_counter cannot be null');
        }

        $this->container['transaction_sequence_counter'] = $transaction_sequence_counter;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


