<?php
/**
 * EmvDetails
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Fiserv\Payments\Lib\CommerceHub
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Commerce Hub
 *
 * This API Specification is designed to provide technical guidance required to consume and integrate with our APIs for payment processing.
 *
 * The version of the OpenAPI document: v1.24.08
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.3.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Fiserv\Payments\Lib\CommerceHub\Model;

use \ArrayAccess;
use \Fiserv\Payments\Lib\CommerceHub\ObjectSerializer;

/**
 * EmvDetails Class Doc Comment
 *
 * @category Class
 * @package  Fiserv\Payments\Lib\CommerceHub
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class EmvDetails implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'EmvDetails';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'header_info' => '\Fiserv\Payments\Lib\CommerceHub\Model\EmvDataHeaderInfo',
        'transaction_type' => 'string',
        'keys' => '\Fiserv\Payments\Lib\CommerceHub\Model\EmvDataKey[]',
        'current_file_creation_date' => 'string',
        'file_size' => 'int',
        'file_check_sum' => 'string',
        'status' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'header_info' => null,
        'transaction_type' => null,
        'keys' => null,
        'current_file_creation_date' => null,
        'file_size' => null,
        'file_check_sum' => null,
        'status' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'header_info' => false,
        'transaction_type' => false,
        'keys' => false,
        'current_file_creation_date' => false,
        'file_size' => false,
        'file_check_sum' => false,
        'status' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'header_info' => 'headerInfo',
        'transaction_type' => 'transactionType',
        'keys' => 'keys',
        'current_file_creation_date' => 'currentFileCreationDate',
        'file_size' => 'fileSize',
        'file_check_sum' => 'fileCheckSum',
        'status' => 'status'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'header_info' => 'setHeaderInfo',
        'transaction_type' => 'setTransactionType',
        'keys' => 'setKeys',
        'current_file_creation_date' => 'setCurrentFileCreationDate',
        'file_size' => 'setFileSize',
        'file_check_sum' => 'setFileCheckSum',
        'status' => 'setStatus'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'header_info' => 'getHeaderInfo',
        'transaction_type' => 'getTransactionType',
        'keys' => 'getKeys',
        'current_file_creation_date' => 'getCurrentFileCreationDate',
        'file_size' => 'getFileSize',
        'file_check_sum' => 'getFileCheckSum',
        'status' => 'getStatus'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('header_info', $data ?? [], null);
        $this->setIfExists('transaction_type', $data ?? [], null);
        $this->setIfExists('keys', $data ?? [], null);
        $this->setIfExists('current_file_creation_date', $data ?? [], null);
        $this->setIfExists('file_size', $data ?? [], null);
        $this->setIfExists('file_check_sum', $data ?? [], null);
        $this->setIfExists('status', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['transaction_type']) && (mb_strlen($this->container['transaction_type']) > 64)) {
            $invalidProperties[] = "invalid value for 'transaction_type', the character length must be smaller than or equal to 64.";
        }

        if (!is_null($this->container['current_file_creation_date']) && (mb_strlen($this->container['current_file_creation_date']) > 40)) {
            $invalidProperties[] = "invalid value for 'current_file_creation_date', the character length must be smaller than or equal to 40.";
        }

        if (!is_null($this->container['file_check_sum']) && (mb_strlen($this->container['file_check_sum']) > 40)) {
            $invalidProperties[] = "invalid value for 'file_check_sum', the character length must be smaller than or equal to 40.";
        }

        if (!is_null($this->container['status']) && (mb_strlen($this->container['status']) > 32)) {
            $invalidProperties[] = "invalid value for 'status', the character length must be smaller than or equal to 32.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets header_info
     *
     * @return \Fiserv\Payments\Lib\CommerceHub\Model\EmvDataHeaderInfo|null
     */
    public function getHeaderInfo()
    {
        return $this->container['header_info'];
    }

    /**
     * Sets header_info
     *
     * @param \Fiserv\Payments\Lib\CommerceHub\Model\EmvDataHeaderInfo|null $header_info header_info
     *
     * @return self
     */
    public function setHeaderInfo($header_info)
    {
        if (is_null($header_info)) {
            throw new \InvalidArgumentException('non-nullable header_info cannot be null');
        }
        $this->container['header_info'] = $header_info;

        return $this;
    }

    /**
     * Gets transaction_type
     *
     * @return string|null
     */
    public function getTransactionType()
    {
        return $this->container['transaction_type'];
    }

    /**
     * Sets transaction_type
     *
     * @param string|null $transaction_type Specifies the type of the CAPK transaction.
     *
     * @return self
     */
    public function setTransactionType($transaction_type)
    {
        if (is_null($transaction_type)) {
            throw new \InvalidArgumentException('non-nullable transaction_type cannot be null');
        }
        if ((mb_strlen($transaction_type) > 64)) {
            throw new \InvalidArgumentException('invalid length for $transaction_type when calling EmvDetails., must be smaller than or equal to 64.');
        }

        $this->container['transaction_type'] = $transaction_type;

        return $this;
    }

    /**
     * Gets keys
     *
     * @return \Fiserv\Payments\Lib\CommerceHub\Model\EmvDataKey[]|null
     */
    public function getKeys()
    {
        return $this->container['keys'];
    }

    /**
     * Sets keys
     *
     * @param \Fiserv\Payments\Lib\CommerceHub\Model\EmvDataKey[]|null $keys List of EMV CAPK data
     *
     * @return self
     */
    public function setKeys($keys)
    {
        if (is_null($keys)) {
            throw new \InvalidArgumentException('non-nullable keys cannot be null');
        }
        $this->container['keys'] = $keys;

        return $this;
    }

    /**
     * Gets current_file_creation_date
     *
     * @return string|null
     */
    public function getCurrentFileCreationDate()
    {
        return $this->container['current_file_creation_date'];
    }

    /**
     * Sets current_file_creation_date
     *
     * @param string|null $current_file_creation_date This parameter is sent as part of the last record in the format MMDDYYYYhhmmss
     *
     * @return self
     */
    public function setCurrentFileCreationDate($current_file_creation_date)
    {
        if (is_null($current_file_creation_date)) {
            throw new \InvalidArgumentException('non-nullable current_file_creation_date cannot be null');
        }
        if ((mb_strlen($current_file_creation_date) > 40)) {
            throw new \InvalidArgumentException('invalid length for $current_file_creation_date when calling EmvDetails., must be smaller than or equal to 40.');
        }

        $this->container['current_file_creation_date'] = $current_file_creation_date;

        return $this;
    }

    /**
     * Gets file_size
     *
     * @return int|null
     */
    public function getFileSize()
    {
        return $this->container['file_size'];
    }

    /**
     * Sets file_size
     *
     * @param int|null $file_size This field contains the total size of the file, in bytes
     *
     * @return self
     */
    public function setFileSize($file_size)
    {
        if (is_null($file_size)) {
            throw new \InvalidArgumentException('non-nullable file_size cannot be null');
        }
        $this->container['file_size'] = $file_size;

        return $this;
    }

    /**
     * Gets file_check_sum
     *
     * @return string|null
     */
    public function getFileCheckSum()
    {
        return $this->container['file_check_sum'];
    }

    /**
     * Sets file_check_sum
     *
     * @param string|null $file_check_sum This field contains the CRC-16 checksum of the file. Hexadecimal representation of 2 bytes or 16 bits
     *
     * @return self
     */
    public function setFileCheckSum($file_check_sum)
    {
        if (is_null($file_check_sum)) {
            throw new \InvalidArgumentException('non-nullable file_check_sum cannot be null');
        }
        if ((mb_strlen($file_check_sum) > 40)) {
            throw new \InvalidArgumentException('invalid length for $file_check_sum when calling EmvDetails., must be smaller than or equal to 40.');
        }

        $this->container['file_check_sum'] = $file_check_sum;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string|null
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string|null $status Specifies an updated version of emv capk data is available or not.
     *
     * @return self
     */
    public function setStatus($status)
    {
        if (is_null($status)) {
            throw new \InvalidArgumentException('non-nullable status cannot be null');
        }
        if ((mb_strlen($status) > 32)) {
            throw new \InvalidArgumentException('invalid length for $status when calling EmvDetails., must be smaller than or equal to 32.');
        }

        $this->container['status'] = $status;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


