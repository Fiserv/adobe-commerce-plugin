<?php
/**
 * TransactionInteraction
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Fiserv\Payments\Lib\CommerceHub
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Commerce Hub
 *
 * This API Specification is designed to provide technical guidance required to consume and integrate with our APIs for payment processing.
 *
 * The version of the OpenAPI document: v1.24.08
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.3.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Fiserv\Payments\Lib\CommerceHub\Model;

use \ArrayAccess;
use \Fiserv\Payments\Lib\CommerceHub\ObjectSerializer;

/**
 * TransactionInteraction Class Doc Comment
 *
 * @category Class
 * @description &lt;a href&#x3D;\&quot;../docs?path&#x3D;docs/Resources/Master-Data/Transaction-Interaction.md\&quot;&gt;Transaction interaction&lt;/a&gt; information based on where the transaction is acquired and the capabilities of the terminal or software.
 * @package  Fiserv\Payments\Lib\CommerceHub
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class TransactionInteraction implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'TransactionInteraction';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'origin' => 'string',
        'eci_indicator' => 'string',
        'pos_entry_mode' => 'string',
        'pos_condition_code' => 'string',
        'response_code' => 'string',
        'pos_data' => 'string',
        'mobile_interaction' => 'string',
        'cardholder_authentication_method' => 'string',
        'authorization_characteristics_indicator' => 'string',
        'cardholder_authentication_entity' => 'string',
        'card_holder_authentication_risk' => 'string',
        'terminal_timestamp' => '\DateTime',
        'service_code' => 'string',
        'application_expiry_date' => '\DateTime',
        'host_pos_entry_mode' => 'string',
        'host_pos_condition_code' => 'string',
        'origin_type' => 'string',
        'additional_pos_information' => '\Fiserv\Payments\Lib\CommerceHub\Model\AdditionalPosInformation',
        'network' => '\Fiserv\Payments\Lib\CommerceHub\Model\Network',
        'terminal_entry_capability' => 'string',
        'dcc_applied' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'origin' => null,
        'eci_indicator' => null,
        'pos_entry_mode' => null,
        'pos_condition_code' => null,
        'response_code' => null,
        'pos_data' => null,
        'mobile_interaction' => null,
        'cardholder_authentication_method' => null,
        'authorization_characteristics_indicator' => null,
        'cardholder_authentication_entity' => null,
        'card_holder_authentication_risk' => null,
        'terminal_timestamp' => 'date-time',
        'service_code' => null,
        'application_expiry_date' => 'date',
        'host_pos_entry_mode' => null,
        'host_pos_condition_code' => null,
        'origin_type' => null,
        'additional_pos_information' => null,
        'network' => null,
        'terminal_entry_capability' => null,
        'dcc_applied' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'origin' => false,
        'eci_indicator' => false,
        'pos_entry_mode' => false,
        'pos_condition_code' => false,
        'response_code' => false,
        'pos_data' => false,
        'mobile_interaction' => false,
        'cardholder_authentication_method' => false,
        'authorization_characteristics_indicator' => false,
        'cardholder_authentication_entity' => false,
        'card_holder_authentication_risk' => false,
        'terminal_timestamp' => false,
        'service_code' => false,
        'application_expiry_date' => false,
        'host_pos_entry_mode' => false,
        'host_pos_condition_code' => false,
        'origin_type' => false,
        'additional_pos_information' => false,
        'network' => false,
        'terminal_entry_capability' => false,
        'dcc_applied' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'origin' => 'origin',
        'eci_indicator' => 'eciIndicator',
        'pos_entry_mode' => 'posEntryMode',
        'pos_condition_code' => 'posConditionCode',
        'response_code' => 'responseCode',
        'pos_data' => 'posData',
        'mobile_interaction' => 'mobileInteraction',
        'cardholder_authentication_method' => 'cardholderAuthenticationMethod',
        'authorization_characteristics_indicator' => 'authorizationCharacteristicsIndicator',
        'cardholder_authentication_entity' => 'cardholderAuthenticationEntity',
        'card_holder_authentication_risk' => 'cardHolderAuthenticationRisk',
        'terminal_timestamp' => 'terminalTimestamp',
        'service_code' => 'serviceCode',
        'application_expiry_date' => 'applicationExpiryDate',
        'host_pos_entry_mode' => 'hostPosEntryMode',
        'host_pos_condition_code' => 'hostPosConditionCode',
        'origin_type' => 'originType',
        'additional_pos_information' => 'additionalPosInformation',
        'network' => 'network',
        'terminal_entry_capability' => 'terminalEntryCapability',
        'dcc_applied' => 'dccApplied'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'origin' => 'setOrigin',
        'eci_indicator' => 'setEciIndicator',
        'pos_entry_mode' => 'setPosEntryMode',
        'pos_condition_code' => 'setPosConditionCode',
        'response_code' => 'setResponseCode',
        'pos_data' => 'setPosData',
        'mobile_interaction' => 'setMobileInteraction',
        'cardholder_authentication_method' => 'setCardholderAuthenticationMethod',
        'authorization_characteristics_indicator' => 'setAuthorizationCharacteristicsIndicator',
        'cardholder_authentication_entity' => 'setCardholderAuthenticationEntity',
        'card_holder_authentication_risk' => 'setCardHolderAuthenticationRisk',
        'terminal_timestamp' => 'setTerminalTimestamp',
        'service_code' => 'setServiceCode',
        'application_expiry_date' => 'setApplicationExpiryDate',
        'host_pos_entry_mode' => 'setHostPosEntryMode',
        'host_pos_condition_code' => 'setHostPosConditionCode',
        'origin_type' => 'setOriginType',
        'additional_pos_information' => 'setAdditionalPosInformation',
        'network' => 'setNetwork',
        'terminal_entry_capability' => 'setTerminalEntryCapability',
        'dcc_applied' => 'setDccApplied'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'origin' => 'getOrigin',
        'eci_indicator' => 'getEciIndicator',
        'pos_entry_mode' => 'getPosEntryMode',
        'pos_condition_code' => 'getPosConditionCode',
        'response_code' => 'getResponseCode',
        'pos_data' => 'getPosData',
        'mobile_interaction' => 'getMobileInteraction',
        'cardholder_authentication_method' => 'getCardholderAuthenticationMethod',
        'authorization_characteristics_indicator' => 'getAuthorizationCharacteristicsIndicator',
        'cardholder_authentication_entity' => 'getCardholderAuthenticationEntity',
        'card_holder_authentication_risk' => 'getCardHolderAuthenticationRisk',
        'terminal_timestamp' => 'getTerminalTimestamp',
        'service_code' => 'getServiceCode',
        'application_expiry_date' => 'getApplicationExpiryDate',
        'host_pos_entry_mode' => 'getHostPosEntryMode',
        'host_pos_condition_code' => 'getHostPosConditionCode',
        'origin_type' => 'getOriginType',
        'additional_pos_information' => 'getAdditionalPosInformation',
        'network' => 'getNetwork',
        'terminal_entry_capability' => 'getTerminalEntryCapability',
        'dcc_applied' => 'getDccApplied'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('origin', $data ?? [], null);
        $this->setIfExists('eci_indicator', $data ?? [], null);
        $this->setIfExists('pos_entry_mode', $data ?? [], null);
        $this->setIfExists('pos_condition_code', $data ?? [], null);
        $this->setIfExists('response_code', $data ?? [], null);
        $this->setIfExists('pos_data', $data ?? [], null);
        $this->setIfExists('mobile_interaction', $data ?? [], null);
        $this->setIfExists('cardholder_authentication_method', $data ?? [], null);
        $this->setIfExists('authorization_characteristics_indicator', $data ?? [], null);
        $this->setIfExists('cardholder_authentication_entity', $data ?? [], null);
        $this->setIfExists('card_holder_authentication_risk', $data ?? [], null);
        $this->setIfExists('terminal_timestamp', $data ?? [], null);
        $this->setIfExists('service_code', $data ?? [], null);
        $this->setIfExists('application_expiry_date', $data ?? [], null);
        $this->setIfExists('host_pos_entry_mode', $data ?? [], null);
        $this->setIfExists('host_pos_condition_code', $data ?? [], null);
        $this->setIfExists('origin_type', $data ?? [], null);
        $this->setIfExists('additional_pos_information', $data ?? [], null);
        $this->setIfExists('network', $data ?? [], null);
        $this->setIfExists('terminal_entry_capability', $data ?? [], null);
        $this->setIfExists('dcc_applied', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['origin']) && (mb_strlen($this->container['origin']) > 4)) {
            $invalidProperties[] = "invalid value for 'origin', the character length must be smaller than or equal to 4.";
        }

        if (!is_null($this->container['eci_indicator']) && (mb_strlen($this->container['eci_indicator']) > 36)) {
            $invalidProperties[] = "invalid value for 'eci_indicator', the character length must be smaller than or equal to 36.";
        }

        if (!is_null($this->container['pos_entry_mode']) && (mb_strlen($this->container['pos_entry_mode']) > 22)) {
            $invalidProperties[] = "invalid value for 'pos_entry_mode', the character length must be smaller than or equal to 22.";
        }

        if (!is_null($this->container['pos_condition_code']) && (mb_strlen($this->container['pos_condition_code']) > 26)) {
            $invalidProperties[] = "invalid value for 'pos_condition_code', the character length must be smaller than or equal to 26.";
        }

        if (!is_null($this->container['mobile_interaction']) && (mb_strlen($this->container['mobile_interaction']) > 12)) {
            $invalidProperties[] = "invalid value for 'mobile_interaction', the character length must be smaller than or equal to 12.";
        }

        if (!is_null($this->container['cardholder_authentication_method']) && (mb_strlen($this->container['cardholder_authentication_method']) > 32)) {
            $invalidProperties[] = "invalid value for 'cardholder_authentication_method', the character length must be smaller than or equal to 32.";
        }

        if (!is_null($this->container['authorization_characteristics_indicator']) && (mb_strlen($this->container['authorization_characteristics_indicator']) > 23)) {
            $invalidProperties[] = "invalid value for 'authorization_characteristics_indicator', the character length must be smaller than or equal to 23.";
        }

        if (!is_null($this->container['cardholder_authentication_entity']) && (mb_strlen($this->container['cardholder_authentication_entity']) > 32)) {
            $invalidProperties[] = "invalid value for 'cardholder_authentication_entity', the character length must be smaller than or equal to 32.";
        }

        if (!is_null($this->container['card_holder_authentication_risk']) && (mb_strlen($this->container['card_holder_authentication_risk']) > 25)) {
            $invalidProperties[] = "invalid value for 'card_holder_authentication_risk', the character length must be smaller than or equal to 25.";
        }

        if (!is_null($this->container['service_code']) && (mb_strlen($this->container['service_code']) > 3)) {
            $invalidProperties[] = "invalid value for 'service_code', the character length must be smaller than or equal to 3.";
        }

        if (!is_null($this->container['host_pos_entry_mode']) && (mb_strlen($this->container['host_pos_entry_mode']) > 50)) {
            $invalidProperties[] = "invalid value for 'host_pos_entry_mode', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['host_pos_condition_code']) && (mb_strlen($this->container['host_pos_condition_code']) > 50)) {
            $invalidProperties[] = "invalid value for 'host_pos_condition_code', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['dcc_applied']) && (mb_strlen($this->container['dcc_applied']) > 26)) {
            $invalidProperties[] = "invalid value for 'dcc_applied', the character length must be smaller than or equal to 26.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets origin
     *
     * @return string|null
     */
    public function getOrigin()
    {
        return $this->container['origin'];
    }

    /**
     * Sets origin
     *
     * @param string|null $origin The <a href=\"../docs?path=docs/Resources/Master-Data/Transaction-Interaction.md#transaction-origin\">source</a>of the transaction.
     *
     * @return self
     */
    public function setOrigin($origin)
    {
        if (is_null($origin)) {
            throw new \InvalidArgumentException('non-nullable origin cannot be null');
        }
        if ((mb_strlen($origin) > 4)) {
            throw new \InvalidArgumentException('invalid length for $origin when calling TransactionInteraction., must be smaller than or equal to 4.');
        }

        $this->container['origin'] = $origin;

        return $this;
    }

    /**
     * Gets eci_indicator
     *
     * @return string|null
     */
    public function getEciIndicator()
    {
        return $this->container['eci_indicator'];
    }

    /**
     * Sets eci_indicator
     *
     * @param string|null $eci_indicator <a href=\"../docs?path=docs/Resources/Master-Data/Transaction-Interaction.md#electronic-commerce-indicator\">Electronic Commerce Indicator (ECI)</a> is mandatory for all E-commerce transactions.
     *
     * @return self
     */
    public function setEciIndicator($eci_indicator)
    {
        if (is_null($eci_indicator)) {
            throw new \InvalidArgumentException('non-nullable eci_indicator cannot be null');
        }
        if ((mb_strlen($eci_indicator) > 36)) {
            throw new \InvalidArgumentException('invalid length for $eci_indicator when calling TransactionInteraction., must be smaller than or equal to 36.');
        }

        $this->container['eci_indicator'] = $eci_indicator;

        return $this;
    }

    /**
     * Gets pos_entry_mode
     *
     * @return string|null
     */
    public function getPosEntryMode()
    {
        return $this->container['pos_entry_mode'];
    }

    /**
     * Sets pos_entry_mode
     *
     * @param string|null $pos_entry_mode An identifier used to indicate how the account number was <a href=\"../docs?path=docs/Resources/Master-Data/Transaction-Interaction.md#pos-entry-mode\">entered</a>on the transaction.
     *
     * @return self
     */
    public function setPosEntryMode($pos_entry_mode)
    {
        if (is_null($pos_entry_mode)) {
            throw new \InvalidArgumentException('non-nullable pos_entry_mode cannot be null');
        }
        if ((mb_strlen($pos_entry_mode) > 22)) {
            throw new \InvalidArgumentException('invalid length for $pos_entry_mode when calling TransactionInteraction., must be smaller than or equal to 22.');
        }

        $this->container['pos_entry_mode'] = $pos_entry_mode;

        return $this;
    }

    /**
     * Gets pos_condition_code
     *
     * @return string|null
     */
    public function getPosConditionCode()
    {
        return $this->container['pos_condition_code'];
    }

    /**
     * Sets pos_condition_code
     *
     * @param string|null $pos_condition_code An identifier used to indicate the transaction <a href=\"../docs?path=docs/Resources/Master-Data/Transaction-Interaction.md#pos-condition-code\">condition</a> at the Point-of-Sale (POS).
     *
     * @return self
     */
    public function setPosConditionCode($pos_condition_code)
    {
        if (is_null($pos_condition_code)) {
            throw new \InvalidArgumentException('non-nullable pos_condition_code cannot be null');
        }
        if ((mb_strlen($pos_condition_code) > 26)) {
            throw new \InvalidArgumentException('invalid length for $pos_condition_code when calling TransactionInteraction., must be smaller than or equal to 26.');
        }

        $this->container['pos_condition_code'] = $pos_condition_code;

        return $this;
    }

    /**
     * Gets response_code
     *
     * @return string|null
     */
    public function getResponseCode()
    {
        return $this->container['response_code'];
    }

    /**
     * Sets response_code
     *
     * @param string|null $response_code Response code returned by network/issuer used in subsequent transactions.
     *
     * @return self
     */
    public function setResponseCode($response_code)
    {
        if (is_null($response_code)) {
            throw new \InvalidArgumentException('non-nullable response_code cannot be null');
        }
        $this->container['response_code'] = $response_code;

        return $this;
    }

    /**
     * Gets pos_data
     *
     * @return string|null
     */
    public function getPosData()
    {
        return $this->container['pos_data'];
    }

    /**
     * Sets pos_data
     *
     * @param string|null $pos_data POS data returned by network/issuer used in subsequent transactions.
     *
     * @return self
     */
    public function setPosData($pos_data)
    {
        if (is_null($pos_data)) {
            throw new \InvalidArgumentException('non-nullable pos_data cannot be null');
        }
        $this->container['pos_data'] = $pos_data;

        return $this;
    }

    /**
     * Gets mobile_interaction
     *
     * @return string|null
     */
    public function getMobileInteraction()
    {
        return $this->container['mobile_interaction'];
    }

    /**
     * Sets mobile_interaction
     *
     * @param string|null $mobile_interaction Mobile method of interaction.
     *
     * @return self
     */
    public function setMobileInteraction($mobile_interaction)
    {
        if (is_null($mobile_interaction)) {
            throw new \InvalidArgumentException('non-nullable mobile_interaction cannot be null');
        }
        if ((mb_strlen($mobile_interaction) > 12)) {
            throw new \InvalidArgumentException('invalid length for $mobile_interaction when calling TransactionInteraction., must be smaller than or equal to 12.');
        }

        $this->container['mobile_interaction'] = $mobile_interaction;

        return $this;
    }

    /**
     * Gets cardholder_authentication_method
     *
     * @return string|null
     */
    public function getCardholderAuthenticationMethod()
    {
        return $this->container['cardholder_authentication_method'];
    }

    /**
     * Sets cardholder_authentication_method
     *
     * @param string|null $cardholder_authentication_method Identifies how the cardholder was authenticated/verified.
     *
     * @return self
     */
    public function setCardholderAuthenticationMethod($cardholder_authentication_method)
    {
        if (is_null($cardholder_authentication_method)) {
            throw new \InvalidArgumentException('non-nullable cardholder_authentication_method cannot be null');
        }
        if ((mb_strlen($cardholder_authentication_method) > 32)) {
            throw new \InvalidArgumentException('invalid length for $cardholder_authentication_method when calling TransactionInteraction., must be smaller than or equal to 32.');
        }

        $this->container['cardholder_authentication_method'] = $cardholder_authentication_method;

        return $this;
    }

    /**
     * Gets authorization_characteristics_indicator
     *
     * @return string|null
     */
    public function getAuthorizationCharacteristicsIndicator()
    {
        return $this->container['authorization_characteristics_indicator'];
    }

    /**
     * Sets authorization_characteristics_indicator
     *
     * @param string|null $authorization_characteristics_indicator Response code used for qualification used in subsequent transactions.
     *
     * @return self
     */
    public function setAuthorizationCharacteristicsIndicator($authorization_characteristics_indicator)
    {
        if (is_null($authorization_characteristics_indicator)) {
            throw new \InvalidArgumentException('non-nullable authorization_characteristics_indicator cannot be null');
        }
        if ((mb_strlen($authorization_characteristics_indicator) > 23)) {
            throw new \InvalidArgumentException('invalid length for $authorization_characteristics_indicator when calling TransactionInteraction., must be smaller than or equal to 23.');
        }

        $this->container['authorization_characteristics_indicator'] = $authorization_characteristics_indicator;

        return $this;
    }

    /**
     * Gets cardholder_authentication_entity
     *
     * @return string|null
     */
    public function getCardholderAuthenticationEntity()
    {
        return $this->container['cardholder_authentication_entity'];
    }

    /**
     * Sets cardholder_authentication_entity
     *
     * @param string|null $cardholder_authentication_entity Identifies what entity authenticated the cardholder.
     *
     * @return self
     */
    public function setCardholderAuthenticationEntity($cardholder_authentication_entity)
    {
        if (is_null($cardholder_authentication_entity)) {
            throw new \InvalidArgumentException('non-nullable cardholder_authentication_entity cannot be null');
        }
        if ((mb_strlen($cardholder_authentication_entity) > 32)) {
            throw new \InvalidArgumentException('invalid length for $cardholder_authentication_entity when calling TransactionInteraction., must be smaller than or equal to 32.');
        }

        $this->container['cardholder_authentication_entity'] = $cardholder_authentication_entity;

        return $this;
    }

    /**
     * Gets card_holder_authentication_risk
     *
     * @return string|null
     */
    public function getCardHolderAuthenticationRisk()
    {
        return $this->container['card_holder_authentication_risk'];
    }

    /**
     * Sets card_holder_authentication_risk
     *
     * @param string|null $card_holder_authentication_risk Identifies the Security Risk from the Card Holder Authentication.
     *
     * @return self
     */
    public function setCardHolderAuthenticationRisk($card_holder_authentication_risk)
    {
        if (is_null($card_holder_authentication_risk)) {
            throw new \InvalidArgumentException('non-nullable card_holder_authentication_risk cannot be null');
        }
        if ((mb_strlen($card_holder_authentication_risk) > 25)) {
            throw new \InvalidArgumentException('invalid length for $card_holder_authentication_risk when calling TransactionInteraction., must be smaller than or equal to 25.');
        }

        $this->container['card_holder_authentication_risk'] = $card_holder_authentication_risk;

        return $this;
    }

    /**
     * Gets terminal_timestamp
     *
     * @return \DateTime|null
     */
    public function getTerminalTimestamp()
    {
        return $this->container['terminal_timestamp'];
    }

    /**
     * Sets terminal_timestamp
     *
     * @param \DateTime|null $terminal_timestamp Terminal timestamp in ISO 8601 format YYYY-MM-DDThh:mm:ssZ
     *
     * @return self
     */
    public function setTerminalTimestamp($terminal_timestamp)
    {
        if (is_null($terminal_timestamp)) {
            throw new \InvalidArgumentException('non-nullable terminal_timestamp cannot be null');
        }
        $this->container['terminal_timestamp'] = $terminal_timestamp;

        return $this;
    }

    /**
     * Gets service_code
     *
     * @return string|null
     */
    public function getServiceCode()
    {
        return $this->container['service_code'];
    }

    /**
     * Sets service_code
     *
     * @param string|null $service_code If this field is returned in an authorization response, and if returned must be provided in subsequent Capture transactions.
     *
     * @return self
     */
    public function setServiceCode($service_code)
    {
        if (is_null($service_code)) {
            throw new \InvalidArgumentException('non-nullable service_code cannot be null');
        }
        if ((mb_strlen($service_code) > 3)) {
            throw new \InvalidArgumentException('invalid length for $service_code when calling TransactionInteraction., must be smaller than or equal to 3.');
        }

        $this->container['service_code'] = $service_code;

        return $this;
    }

    /**
     * Gets application_expiry_date
     *
     * @return \DateTime|null
     */
    public function getApplicationExpiryDate()
    {
        return $this->container['application_expiry_date'];
    }

    /**
     * Sets application_expiry_date
     *
     * @param \DateTime|null $application_expiry_date Captured from the EMV chip data. YYYY-MM-DD format.
     *
     * @return self
     */
    public function setApplicationExpiryDate($application_expiry_date)
    {
        if (is_null($application_expiry_date)) {
            throw new \InvalidArgumentException('non-nullable application_expiry_date cannot be null');
        }
        $this->container['application_expiry_date'] = $application_expiry_date;

        return $this;
    }

    /**
     * Gets host_pos_entry_mode
     *
     * @return string|null
     */
    public function getHostPosEntryMode()
    {
        return $this->container['host_pos_entry_mode'];
    }

    /**
     * Sets host_pos_entry_mode
     *
     * @param string|null $host_pos_entry_mode Pos Entry Mode from the response.
     *
     * @return self
     */
    public function setHostPosEntryMode($host_pos_entry_mode)
    {
        if (is_null($host_pos_entry_mode)) {
            throw new \InvalidArgumentException('non-nullable host_pos_entry_mode cannot be null');
        }
        if ((mb_strlen($host_pos_entry_mode) > 50)) {
            throw new \InvalidArgumentException('invalid length for $host_pos_entry_mode when calling TransactionInteraction., must be smaller than or equal to 50.');
        }

        $this->container['host_pos_entry_mode'] = $host_pos_entry_mode;

        return $this;
    }

    /**
     * Gets host_pos_condition_code
     *
     * @return string|null
     */
    public function getHostPosConditionCode()
    {
        return $this->container['host_pos_condition_code'];
    }

    /**
     * Sets host_pos_condition_code
     *
     * @param string|null $host_pos_condition_code Pos Condition Code from the response.
     *
     * @return self
     */
    public function setHostPosConditionCode($host_pos_condition_code)
    {
        if (is_null($host_pos_condition_code)) {
            throw new \InvalidArgumentException('non-nullable host_pos_condition_code cannot be null');
        }
        if ((mb_strlen($host_pos_condition_code) > 50)) {
            throw new \InvalidArgumentException('invalid length for $host_pos_condition_code when calling TransactionInteraction., must be smaller than or equal to 50.');
        }

        $this->container['host_pos_condition_code'] = $host_pos_condition_code;

        return $this;
    }

    /**
     * Gets origin_type
     *
     * @return string|null
     */
    public function getOriginType()
    {
        return $this->container['origin_type'];
    }

    /**
     * Sets origin_type
     *
     * @param string|null $origin_type Defines the type of transaction Origin.
     *
     * @return self
     */
    public function setOriginType($origin_type)
    {
        if (is_null($origin_type)) {
            throw new \InvalidArgumentException('non-nullable origin_type cannot be null');
        }
        $this->container['origin_type'] = $origin_type;

        return $this;
    }

    /**
     * Gets additional_pos_information
     *
     * @return \Fiserv\Payments\Lib\CommerceHub\Model\AdditionalPosInformation|null
     */
    public function getAdditionalPosInformation()
    {
        return $this->container['additional_pos_information'];
    }

    /**
     * Sets additional_pos_information
     *
     * @param \Fiserv\Payments\Lib\CommerceHub\Model\AdditionalPosInformation|null $additional_pos_information additional_pos_information
     *
     * @return self
     */
    public function setAdditionalPosInformation($additional_pos_information)
    {
        if (is_null($additional_pos_information)) {
            throw new \InvalidArgumentException('non-nullable additional_pos_information cannot be null');
        }
        $this->container['additional_pos_information'] = $additional_pos_information;

        return $this;
    }

    /**
     * Gets network
     *
     * @return \Fiserv\Payments\Lib\CommerceHub\Model\Network|null
     */
    public function getNetwork()
    {
        return $this->container['network'];
    }

    /**
     * Sets network
     *
     * @param \Fiserv\Payments\Lib\CommerceHub\Model\Network|null $network network
     *
     * @return self
     */
    public function setNetwork($network)
    {
        if (is_null($network)) {
            throw new \InvalidArgumentException('non-nullable network cannot be null');
        }
        $this->container['network'] = $network;

        return $this;
    }

    /**
     * Gets terminal_entry_capability
     *
     * @return string|null
     */
    public function getTerminalEntryCapability()
    {
        return $this->container['terminal_entry_capability'];
    }

    /**
     * Sets terminal_entry_capability
     *
     * @param string|null $terminal_entry_capability Identifies how data can be entered in the terminal or software.
     *
     * @return self
     */
    public function setTerminalEntryCapability($terminal_entry_capability)
    {
        if (is_null($terminal_entry_capability)) {
            throw new \InvalidArgumentException('non-nullable terminal_entry_capability cannot be null');
        }
        $this->container['terminal_entry_capability'] = $terminal_entry_capability;

        return $this;
    }

    /**
     * Gets dcc_applied
     *
     * @return string|null
     */
    public function getDccApplied()
    {
        return $this->container['dcc_applied'];
    }

    /**
     * Sets dcc_applied
     *
     * @param string|null $dcc_applied Indicates the choice made by the customer for a Dynamic Currency Conversion (DCC) transaction.
     *
     * @return self
     */
    public function setDccApplied($dcc_applied)
    {
        if (is_null($dcc_applied)) {
            throw new \InvalidArgumentException('non-nullable dcc_applied cannot be null');
        }
        if ((mb_strlen($dcc_applied) > 26)) {
            throw new \InvalidArgumentException('invalid length for $dcc_applied when calling TransactionInteraction., must be smaller than or equal to 26.');
        }

        $this->container['dcc_applied'] = $dcc_applied;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


