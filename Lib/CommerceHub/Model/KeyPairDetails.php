<?php
/**
 * KeyPairDetails
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Fiserv\Payments\Lib\CommerceHub
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Commerce Hub
 *
 * This API Specification is designed to provide technical guidance required to consume and integrate with our APIs for payment processing.
 *
 * The version of the OpenAPI document: v1.24.08
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.3.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Fiserv\Payments\Lib\CommerceHub\Model;

use \ArrayAccess;
use \Fiserv\Payments\Lib\CommerceHub\ObjectSerializer;

/**
 * KeyPairDetails Class Doc Comment
 *
 * @category Class
 * @description Key Pair Details
 * @package  Fiserv\Payments\Lib\CommerceHub
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class KeyPairDetails implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'KeyPairDetails';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'key_id' => 'string',
        'encryption_type' => 'string',
        'modulus' => 'int',
        'encoded_public_key' => 'string',
        'valid_from' => '\DateTime',
        'valid_to' => '\DateTime',
        'status' => 'string',
        'source' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'key_id' => null,
        'encryption_type' => null,
        'modulus' => null,
        'encoded_public_key' => null,
        'valid_from' => 'date-time',
        'valid_to' => 'date-time',
        'status' => null,
        'source' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'key_id' => false,
        'encryption_type' => false,
        'modulus' => false,
        'encoded_public_key' => false,
        'valid_from' => false,
        'valid_to' => false,
        'status' => false,
        'source' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'key_id' => 'keyId',
        'encryption_type' => 'encryptionType',
        'modulus' => 'modulus',
        'encoded_public_key' => 'encodedPublicKey',
        'valid_from' => 'validFrom',
        'valid_to' => 'validTo',
        'status' => 'status',
        'source' => 'source'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'key_id' => 'setKeyId',
        'encryption_type' => 'setEncryptionType',
        'modulus' => 'setModulus',
        'encoded_public_key' => 'setEncodedPublicKey',
        'valid_from' => 'setValidFrom',
        'valid_to' => 'setValidTo',
        'status' => 'setStatus',
        'source' => 'setSource'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'key_id' => 'getKeyId',
        'encryption_type' => 'getEncryptionType',
        'modulus' => 'getModulus',
        'encoded_public_key' => 'getEncodedPublicKey',
        'valid_from' => 'getValidFrom',
        'valid_to' => 'getValidTo',
        'status' => 'getStatus',
        'source' => 'getSource'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('key_id', $data ?? [], null);
        $this->setIfExists('encryption_type', $data ?? [], null);
        $this->setIfExists('modulus', $data ?? [], null);
        $this->setIfExists('encoded_public_key', $data ?? [], null);
        $this->setIfExists('valid_from', $data ?? [], null);
        $this->setIfExists('valid_to', $data ?? [], null);
        $this->setIfExists('status', $data ?? [], null);
        $this->setIfExists('source', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['key_id']) && (mb_strlen($this->container['key_id']) > 64)) {
            $invalidProperties[] = "invalid value for 'key_id', the character length must be smaller than or equal to 64.";
        }

        if (!is_null($this->container['encryption_type']) && (mb_strlen($this->container['encryption_type']) > 32)) {
            $invalidProperties[] = "invalid value for 'encryption_type', the character length must be smaller than or equal to 32.";
        }

        if (!is_null($this->container['status']) && (mb_strlen($this->container['status']) > 10)) {
            $invalidProperties[] = "invalid value for 'status', the character length must be smaller than or equal to 10.";
        }

        if (!is_null($this->container['source']) && (mb_strlen($this->container['source']) > 64)) {
            $invalidProperties[] = "invalid value for 'source', the character length must be smaller than or equal to 64.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets key_id
     *
     * @return string|null
     */
    public function getKeyId()
    {
        return $this->container['key_id'];
    }

    /**
     * Sets key_id
     *
     * @param string|null $key_id Unique identifier of the key pair.
     *
     * @return self
     */
    public function setKeyId($key_id)
    {
        if (is_null($key_id)) {
            throw new \InvalidArgumentException('non-nullable key_id cannot be null');
        }
        if ((mb_strlen($key_id) > 64)) {
            throw new \InvalidArgumentException('invalid length for $key_id when calling KeyPairDetails., must be smaller than or equal to 64.');
        }

        $this->container['key_id'] = $key_id;

        return $this;
    }

    /**
     * Gets encryption_type
     *
     * @return string|null
     */
    public function getEncryptionType()
    {
        return $this->container['encryption_type'];
    }

    /**
     * Sets encryption_type
     *
     * @param string|null $encryption_type Encryption type of the key pair. Defaults to RSA
     *
     * @return self
     */
    public function setEncryptionType($encryption_type)
    {
        if (is_null($encryption_type)) {
            throw new \InvalidArgumentException('non-nullable encryption_type cannot be null');
        }
        if ((mb_strlen($encryption_type) > 32)) {
            throw new \InvalidArgumentException('invalid length for $encryption_type when calling KeyPairDetails., must be smaller than or equal to 32.');
        }

        $this->container['encryption_type'] = $encryption_type;

        return $this;
    }

    /**
     * Gets modulus
     *
     * @return int|null
     */
    public function getModulus()
    {
        return $this->container['modulus'];
    }

    /**
     * Sets modulus
     *
     * @param int|null $modulus Modulus size of the key pair
     *
     * @return self
     */
    public function setModulus($modulus)
    {
        if (is_null($modulus)) {
            throw new \InvalidArgumentException('non-nullable modulus cannot be null');
        }
        $this->container['modulus'] = $modulus;

        return $this;
    }

    /**
     * Gets encoded_public_key
     *
     * @return string|null
     */
    public function getEncodedPublicKey()
    {
        return $this->container['encoded_public_key'];
    }

    /**
     * Sets encoded_public_key
     *
     * @param string|null $encoded_public_key Encoded public key. Possible encodings: Base64, Hex
     *
     * @return self
     */
    public function setEncodedPublicKey($encoded_public_key)
    {
        if (is_null($encoded_public_key)) {
            throw new \InvalidArgumentException('non-nullable encoded_public_key cannot be null');
        }
        $this->container['encoded_public_key'] = $encoded_public_key;

        return $this;
    }

    /**
     * Gets valid_from
     *
     * @return \DateTime|null
     */
    public function getValidFrom()
    {
        return $this->container['valid_from'];
    }

    /**
     * Sets valid_from
     *
     * @param \DateTime|null $valid_from Date and time the key pair is valid from in YYYY-MM-DDThh:mm:ssZ format.
     *
     * @return self
     */
    public function setValidFrom($valid_from)
    {
        if (is_null($valid_from)) {
            throw new \InvalidArgumentException('non-nullable valid_from cannot be null');
        }
        $this->container['valid_from'] = $valid_from;

        return $this;
    }

    /**
     * Gets valid_to
     *
     * @return \DateTime|null
     */
    public function getValidTo()
    {
        return $this->container['valid_to'];
    }

    /**
     * Sets valid_to
     *
     * @param \DateTime|null $valid_to Date and time the key pair is valid to in YYYY-MM-DDThh:mm:ssZ format.
     *
     * @return self
     */
    public function setValidTo($valid_to)
    {
        if (is_null($valid_to)) {
            throw new \InvalidArgumentException('non-nullable valid_to cannot be null');
        }
        $this->container['valid_to'] = $valid_to;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string|null
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string|null $status Status of the key pair. Valid values are ACTIVE, INACTIVE, REVOKED or LEGACY
     *
     * @return self
     */
    public function setStatus($status)
    {
        if (is_null($status)) {
            throw new \InvalidArgumentException('non-nullable status cannot be null');
        }
        if ((mb_strlen($status) > 10)) {
            throw new \InvalidArgumentException('invalid length for $status when calling KeyPairDetails., must be smaller than or equal to 10.');
        }

        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets source
     *
     * @return string|null
     */
    public function getSource()
    {
        return $this->container['source'];
    }

    /**
     * Sets source
     *
     * @param string|null $source Source of the key pair. Defaults to FutureX
     *
     * @return self
     */
    public function setSource($source)
    {
        if (is_null($source)) {
            throw new \InvalidArgumentException('non-nullable source cannot be null');
        }
        if ((mb_strlen($source) > 64)) {
            throw new \InvalidArgumentException('invalid length for $source when calling KeyPairDetails., must be smaller than or equal to 64.');
        }

        $this->container['source'] = $source;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


