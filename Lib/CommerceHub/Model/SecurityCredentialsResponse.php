<?php
/**
 * SecurityCredentialsResponse
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Fiserv\Payments\Lib\CommerceHub
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Payments
 *
 * This API Specification is designed to provide technical guidance required to consume and integrate with our APIs for payment processing.
 *
 * The version of the OpenAPI document: v1.3.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.2.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Fiserv\Payments\Lib\CommerceHub\Model;

use \ArrayAccess;
use \Fiserv\Payments\Lib\CommerceHub\ObjectSerializer;

/**
 * SecurityCredentialsResponse Class Doc Comment
 *
 * @category Class
 * @package  Fiserv\Payments\Lib\CommerceHub
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class SecurityCredentialsResponse implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'SecurityCredentialsResponse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'gateway_response' => '\Fiserv\Payments\Lib\CommerceHub\Model\GatewayResponse',
        'key_id' => 'string',
        'public_key' => 'string',
        'key_length' => 'int',
        'access_token' => 'string',
        'session_id' => 'string',
        'domains' => '\Fiserv\Payments\Lib\CommerceHub\Model\Domain[]',
        'access_token_issued_time' => '\DateTime',
        'access_token_time_to_live' => 'int',
        'asymmetric_encryption_algorithm' => 'string',
        'access_token_type' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'gateway_response' => null,
        'key_id' => null,
        'public_key' => null,
        'key_length' => null,
        'access_token' => null,
        'session_id' => null,
        'domains' => null,
        'access_token_issued_time' => 'date-time',
        'access_token_time_to_live' => null,
        'asymmetric_encryption_algorithm' => null,
        'access_token_type' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'gateway_response' => false,
		'key_id' => false,
		'public_key' => false,
		'key_length' => false,
		'access_token' => false,
		'session_id' => false,
		'domains' => false,
		'access_token_issued_time' => false,
		'access_token_time_to_live' => false,
		'asymmetric_encryption_algorithm' => false,
		'access_token_type' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'gateway_response' => 'gatewayResponse',
        'key_id' => 'keyId',
        'public_key' => 'publicKey',
        'key_length' => 'keyLength',
        'access_token' => 'accessToken',
        'session_id' => 'sessionId',
        'domains' => 'domains',
        'access_token_issued_time' => 'accessTokenIssuedTime',
        'access_token_time_to_live' => 'accessTokenTimeToLive',
        'asymmetric_encryption_algorithm' => 'asymmetricEncryptionAlgorithm',
        'access_token_type' => 'accessTokenType'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'gateway_response' => 'setGatewayResponse',
        'key_id' => 'setKeyId',
        'public_key' => 'setPublicKey',
        'key_length' => 'setKeyLength',
        'access_token' => 'setAccessToken',
        'session_id' => 'setSessionId',
        'domains' => 'setDomains',
        'access_token_issued_time' => 'setAccessTokenIssuedTime',
        'access_token_time_to_live' => 'setAccessTokenTimeToLive',
        'asymmetric_encryption_algorithm' => 'setAsymmetricEncryptionAlgorithm',
        'access_token_type' => 'setAccessTokenType'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'gateway_response' => 'getGatewayResponse',
        'key_id' => 'getKeyId',
        'public_key' => 'getPublicKey',
        'key_length' => 'getKeyLength',
        'access_token' => 'getAccessToken',
        'session_id' => 'getSessionId',
        'domains' => 'getDomains',
        'access_token_issued_time' => 'getAccessTokenIssuedTime',
        'access_token_time_to_live' => 'getAccessTokenTimeToLive',
        'asymmetric_encryption_algorithm' => 'getAsymmetricEncryptionAlgorithm',
        'access_token_type' => 'getAccessTokenType'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('gateway_response', $data ?? [], null);
        $this->setIfExists('key_id', $data ?? [], null);
        $this->setIfExists('public_key', $data ?? [], null);
        $this->setIfExists('key_length', $data ?? [], null);
        $this->setIfExists('access_token', $data ?? [], null);
        $this->setIfExists('session_id', $data ?? [], null);
        $this->setIfExists('domains', $data ?? [], null);
        $this->setIfExists('access_token_issued_time', $data ?? [], null);
        $this->setIfExists('access_token_time_to_live', $data ?? [], null);
        $this->setIfExists('asymmetric_encryption_algorithm', $data ?? [], null);
        $this->setIfExists('access_token_type', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['key_id']) && (mb_strlen($this->container['key_id']) > 64)) {
            $invalidProperties[] = "invalid value for 'key_id', the character length must be smaller than or equal to 64.";
        }

        if (!is_null($this->container['public_key']) && (mb_strlen($this->container['public_key']) > 4000)) {
            $invalidProperties[] = "invalid value for 'public_key', the character length must be smaller than or equal to 4000.";
        }

        if (!is_null($this->container['access_token']) && (mb_strlen($this->container['access_token']) > 2048)) {
            $invalidProperties[] = "invalid value for 'access_token', the character length must be smaller than or equal to 2048.";
        }

        if (!is_null($this->container['session_id']) && (mb_strlen($this->container['session_id']) > 64)) {
            $invalidProperties[] = "invalid value for 'session_id', the character length must be smaller than or equal to 64.";
        }

        if (!is_null($this->container['asymmetric_encryption_algorithm']) && (mb_strlen($this->container['asymmetric_encryption_algorithm']) > 32)) {
            $invalidProperties[] = "invalid value for 'asymmetric_encryption_algorithm', the character length must be smaller than or equal to 32.";
        }

        if (!is_null($this->container['access_token_type']) && (mb_strlen($this->container['access_token_type']) > 50)) {
            $invalidProperties[] = "invalid value for 'access_token_type', the character length must be smaller than or equal to 50.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets gateway_response
     *
     * @return \Fiserv\Payments\Lib\CommerceHub\Model\GatewayResponse|null
     */
    public function getGatewayResponse()
    {
        return $this->container['gateway_response'];
    }

    /**
     * Sets gateway_response
     *
     * @param \Fiserv\Payments\Lib\CommerceHub\Model\GatewayResponse|null $gateway_response gateway_response
     *
     * @return self
     */
    public function setGatewayResponse($gateway_response)
    {

        if (is_null($gateway_response)) {
            throw new \InvalidArgumentException('non-nullable gateway_response cannot be null');
        }

        $this->container['gateway_response'] = $gateway_response;

        return $this;
    }

    /**
     * Gets key_id
     *
     * @return string|null
     */
    public function getKeyId()
    {
        return $this->container['key_id'];
    }

    /**
     * Sets key_id
     *
     * @param string|null $key_id Unique identifier of the public encryption key.
     *
     * @return self
     */
    public function setKeyId($key_id)
    {
        if (!is_null($key_id) && (mb_strlen($key_id) > 64)) {
            throw new \InvalidArgumentException('invalid length for $key_id when calling SecurityCredentialsResponse., must be smaller than or equal to 64.');
        }


        if (is_null($key_id)) {
            throw new \InvalidArgumentException('non-nullable key_id cannot be null');
        }

        $this->container['key_id'] = $key_id;

        return $this;
    }

    /**
     * Gets public_key
     *
     * @return string|null
     */
    public function getPublicKey()
    {
        return $this->container['public_key'];
    }

    /**
     * Sets public_key
     *
     * @param string|null $public_key Base64 encoded public encryption key.
     *
     * @return self
     */
    public function setPublicKey($public_key)
    {
        if (!is_null($public_key) && (mb_strlen($public_key) > 4000)) {
            throw new \InvalidArgumentException('invalid length for $public_key when calling SecurityCredentialsResponse., must be smaller than or equal to 4000.');
        }


        if (is_null($public_key)) {
            throw new \InvalidArgumentException('non-nullable public_key cannot be null');
        }

        $this->container['public_key'] = $public_key;

        return $this;
    }

    /**
     * Gets key_length
     *
     * @return int|null
     */
    public function getKeyLength()
    {
        return $this->container['key_length'];
    }

    /**
     * Sets key_length
     *
     * @param int|null $key_length Length of the Base64 encoded public encryption key.
     *
     * @return self
     */
    public function setKeyLength($key_length)
    {



        if (is_null($key_length)) {
            throw new \InvalidArgumentException('non-nullable key_length cannot be null');
        }

        $this->container['key_length'] = $key_length;

        return $this;
    }

    /**
     * Gets access_token
     *
     * @return string|null
     */
    public function getAccessToken()
    {
        return $this->container['access_token'];
    }

    /**
     * Sets access_token
     *
     * @param string|null $access_token Access token credential to be used in subsequent API calls.
     *
     * @return self
     */
    public function setAccessToken($access_token)
    {
        if (!is_null($access_token) && (mb_strlen($access_token) > 2048)) {
            throw new \InvalidArgumentException('invalid length for $access_token when calling SecurityCredentialsResponse., must be smaller than or equal to 2048.');
        }


        if (is_null($access_token)) {
            throw new \InvalidArgumentException('non-nullable access_token cannot be null');
        }

        $this->container['access_token'] = $access_token;

        return $this;
    }

    /**
     * Gets session_id
     *
     * @return string|null
     */
    public function getSessionId()
    {
        return $this->container['session_id'];
    }

    /**
     * Sets session_id
     *
     * @param string|null $session_id Unique identifier for this session
     *
     * @return self
     */
    public function setSessionId($session_id)
    {
        if (!is_null($session_id) && (mb_strlen($session_id) > 64)) {
            throw new \InvalidArgumentException('invalid length for $session_id when calling SecurityCredentialsResponse., must be smaller than or equal to 64.');
        }


        if (is_null($session_id)) {
            throw new \InvalidArgumentException('non-nullable session_id cannot be null');
        }

        $this->container['session_id'] = $session_id;

        return $this;
    }

    /**
     * Gets domains
     *
     * @return \Fiserv\Payments\Lib\CommerceHub\Model\Domain[]|null
     */
    public function getDomains()
    {
        return $this->container['domains'];
    }

    /**
     * Sets domains
     *
     * @param \Fiserv\Payments\Lib\CommerceHub\Model\Domain[]|null $domains A whitelist of domains that are applicable for this credentials request.
     *
     * @return self
     */
    public function setDomains($domains)
    {

        if (is_null($domains)) {
            throw new \InvalidArgumentException('non-nullable domains cannot be null');
        }

        $this->container['domains'] = $domains;

        return $this;
    }

    /**
     * Gets access_token_issued_time
     *
     * @return \DateTime|null
     */
    public function getAccessTokenIssuedTime()
    {
        return $this->container['access_token_issued_time'];
    }

    /**
     * Sets access_token_issued_time
     *
     * @param \DateTime|null $access_token_issued_time Token issue time in YYYY-MM-DDThh:mm:ssZ format.
     *
     * @return self
     */
    public function setAccessTokenIssuedTime($access_token_issued_time)
    {

        if (is_null($access_token_issued_time)) {
            throw new \InvalidArgumentException('non-nullable access_token_issued_time cannot be null');
        }

        $this->container['access_token_issued_time'] = $access_token_issued_time;

        return $this;
    }

    /**
     * Gets access_token_time_to_live
     *
     * @return int|null
     */
    public function getAccessTokenTimeToLive()
    {
        return $this->container['access_token_time_to_live'];
    }

    /**
     * Sets access_token_time_to_live
     *
     * @param int|null $access_token_time_to_live Time to live (expiration time) in seconds. 1800s, max 30 minutes.
     *
     * @return self
     */
    public function setAccessTokenTimeToLive($access_token_time_to_live)
    {

        if (is_null($access_token_time_to_live)) {
            throw new \InvalidArgumentException('non-nullable access_token_time_to_live cannot be null');
        }

        $this->container['access_token_time_to_live'] = $access_token_time_to_live;

        return $this;
    }

    /**
     * Gets asymmetric_encryption_algorithm
     *
     * @return string|null
     */
    public function getAsymmetricEncryptionAlgorithm()
    {
        return $this->container['asymmetric_encryption_algorithm'];
    }

    /**
     * Sets asymmetric_encryption_algorithm
     *
     * @param string|null $asymmetric_encryption_algorithm Asymmetric encryption algorithm associated with the public key
     *
     * @return self
     */
    public function setAsymmetricEncryptionAlgorithm($asymmetric_encryption_algorithm)
    {
        if (!is_null($asymmetric_encryption_algorithm) && (mb_strlen($asymmetric_encryption_algorithm) > 32)) {
            throw new \InvalidArgumentException('invalid length for $asymmetric_encryption_algorithm when calling SecurityCredentialsResponse., must be smaller than or equal to 32.');
        }


        if (is_null($asymmetric_encryption_algorithm)) {
            throw new \InvalidArgumentException('non-nullable asymmetric_encryption_algorithm cannot be null');
        }

        $this->container['asymmetric_encryption_algorithm'] = $asymmetric_encryption_algorithm;

        return $this;
    }

    /**
     * Gets access_token_type
     *
     * @return string|null
     */
    public function getAccessTokenType()
    {
        return $this->container['access_token_type'];
    }

    /**
     * Sets access_token_type
     *
     * @param string|null $access_token_type Access token type.' Valid Values:  * BEARER * JWT (JSON Web Token)
     *
     * @return self
     */
    public function setAccessTokenType($access_token_type)
    {
        if (!is_null($access_token_type) && (mb_strlen($access_token_type) > 50)) {
            throw new \InvalidArgumentException('invalid length for $access_token_type when calling SecurityCredentialsResponse., must be smaller than or equal to 50.');
        }


        if (is_null($access_token_type)) {
            throw new \InvalidArgumentException('non-nullable access_token_type cannot be null');
        }

        $this->container['access_token_type'] = $access_token_type;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


