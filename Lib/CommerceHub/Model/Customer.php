<?php
/**
 * Customer
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Fiserv\Payments\Lib\CommerceHub
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Payments
 *
 * This API Specification is designed to provide technical guidance required to consume and integrate with our APIs for payment processing.
 *
 * The version of the OpenAPI document: v1.3.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.2.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Fiserv\Payments\Lib\CommerceHub\Model;

use \ArrayAccess;
use \Fiserv\Payments\Lib\CommerceHub\ObjectSerializer;

/**
 * Customer Class Doc Comment
 *
 * @category Class
 * @description &lt;a href&#x3D;\&quot;../docs?path&#x3D;docs/Resources/Master-Data/Customer-Details.md\&quot;&gt;Customer&lt;/a&gt; specific data.
 * @package  Fiserv\Payments\Lib\CommerceHub
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class Customer implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Customer';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'merchant_customer_id' => 'string',
        'processor_customer_id' => 'string',
        'first_name' => 'string',
        'last_name' => 'string',
        'dob' => '\DateTime',
        'email' => 'string',
        'ip_address' => 'string',
        'host_name' => 'string',
        'locale' => 'string',
        'driver_license_number' => 'string',
        'ssn' => 'string',
        'phone' => '\Fiserv\Payments\Lib\CommerceHub\Model\Phone[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'merchant_customer_id' => null,
        'processor_customer_id' => null,
        'first_name' => null,
        'last_name' => null,
        'dob' => 'date',
        'email' => null,
        'ip_address' => null,
        'host_name' => null,
        'locale' => null,
        'driver_license_number' => null,
        'ssn' => null,
        'phone' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'merchant_customer_id' => false,
		'processor_customer_id' => false,
		'first_name' => false,
		'last_name' => false,
		'dob' => false,
		'email' => false,
		'ip_address' => false,
		'host_name' => false,
		'locale' => false,
		'driver_license_number' => false,
		'ssn' => false,
		'phone' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'merchant_customer_id' => 'merchantCustomerId',
        'processor_customer_id' => 'processorCustomerId',
        'first_name' => 'firstName',
        'last_name' => 'lastName',
        'dob' => 'dob',
        'email' => 'email',
        'ip_address' => 'ipAddress',
        'host_name' => 'hostName',
        'locale' => 'locale',
        'driver_license_number' => 'driverLicenseNumber',
        'ssn' => 'ssn',
        'phone' => 'phone'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'merchant_customer_id' => 'setMerchantCustomerId',
        'processor_customer_id' => 'setProcessorCustomerId',
        'first_name' => 'setFirstName',
        'last_name' => 'setLastName',
        'dob' => 'setDob',
        'email' => 'setEmail',
        'ip_address' => 'setIpAddress',
        'host_name' => 'setHostName',
        'locale' => 'setLocale',
        'driver_license_number' => 'setDriverLicenseNumber',
        'ssn' => 'setSsn',
        'phone' => 'setPhone'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'merchant_customer_id' => 'getMerchantCustomerId',
        'processor_customer_id' => 'getProcessorCustomerId',
        'first_name' => 'getFirstName',
        'last_name' => 'getLastName',
        'dob' => 'getDob',
        'email' => 'getEmail',
        'ip_address' => 'getIpAddress',
        'host_name' => 'getHostName',
        'locale' => 'getLocale',
        'driver_license_number' => 'getDriverLicenseNumber',
        'ssn' => 'getSsn',
        'phone' => 'getPhone'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('merchant_customer_id', $data ?? [], null);
        $this->setIfExists('processor_customer_id', $data ?? [], null);
        $this->setIfExists('first_name', $data ?? [], null);
        $this->setIfExists('last_name', $data ?? [], null);
        $this->setIfExists('dob', $data ?? [], null);
        $this->setIfExists('email', $data ?? [], null);
        $this->setIfExists('ip_address', $data ?? [], null);
        $this->setIfExists('host_name', $data ?? [], null);
        $this->setIfExists('locale', $data ?? [], null);
        $this->setIfExists('driver_license_number', $data ?? [], null);
        $this->setIfExists('ssn', $data ?? [], null);
        $this->setIfExists('phone', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['merchant_customer_id']) && (mb_strlen($this->container['merchant_customer_id']) > 1024)) {
            $invalidProperties[] = "invalid value for 'merchant_customer_id', the character length must be smaller than or equal to 1024.";
        }

        if (!is_null($this->container['processor_customer_id']) && (mb_strlen($this->container['processor_customer_id']) > 1024)) {
            $invalidProperties[] = "invalid value for 'processor_customer_id', the character length must be smaller than or equal to 1024.";
        }

        if (!is_null($this->container['first_name']) && (mb_strlen($this->container['first_name']) > 256)) {
            $invalidProperties[] = "invalid value for 'first_name', the character length must be smaller than or equal to 256.";
        }

        if (!is_null($this->container['last_name']) && (mb_strlen($this->container['last_name']) > 256)) {
            $invalidProperties[] = "invalid value for 'last_name', the character length must be smaller than or equal to 256.";
        }

        if (!is_null($this->container['dob']) && (mb_strlen($this->container['dob']) > 10)) {
            $invalidProperties[] = "invalid value for 'dob', the character length must be smaller than or equal to 10.";
        }

        if (!is_null($this->container['email']) && (mb_strlen($this->container['email']) > 256)) {
            $invalidProperties[] = "invalid value for 'email', the character length must be smaller than or equal to 256.";
        }

        if (!is_null($this->container['ip_address']) && (mb_strlen($this->container['ip_address']) > 39)) {
            $invalidProperties[] = "invalid value for 'ip_address', the character length must be smaller than or equal to 39.";
        }

        if (!is_null($this->container['host_name']) && (mb_strlen($this->container['host_name']) > 1024)) {
            $invalidProperties[] = "invalid value for 'host_name', the character length must be smaller than or equal to 1024.";
        }

        if (!is_null($this->container['locale']) && (mb_strlen($this->container['locale']) > 256)) {
            $invalidProperties[] = "invalid value for 'locale', the character length must be smaller than or equal to 256.";
        }

        if (!is_null($this->container['driver_license_number']) && (mb_strlen($this->container['driver_license_number']) > 256)) {
            $invalidProperties[] = "invalid value for 'driver_license_number', the character length must be smaller than or equal to 256.";
        }

        if (!is_null($this->container['ssn']) && (mb_strlen($this->container['ssn']) > 9)) {
            $invalidProperties[] = "invalid value for 'ssn', the character length must be smaller than or equal to 9.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets merchant_customer_id
     *
     * @return string|null
     */
    public function getMerchantCustomerId()
    {
        return $this->container['merchant_customer_id'];
    }

    /**
     * Sets merchant_customer_id
     *
     * @param string|null $merchant_customer_id Unique customer identifier.
     *
     * @return self
     */
    public function setMerchantCustomerId($merchant_customer_id)
    {
        if (!is_null($merchant_customer_id) && (mb_strlen($merchant_customer_id) > 1024)) {
            throw new \InvalidArgumentException('invalid length for $merchant_customer_id when calling Customer., must be smaller than or equal to 1024.');
        }


        if (is_null($merchant_customer_id)) {
            throw new \InvalidArgumentException('non-nullable merchant_customer_id cannot be null');
        }

        $this->container['merchant_customer_id'] = $merchant_customer_id;

        return $this;
    }

    /**
     * Gets processor_customer_id
     *
     * @return string|null
     */
    public function getProcessorCustomerId()
    {
        return $this->container['processor_customer_id'];
    }

    /**
     * Sets processor_customer_id
     *
     * @param string|null $processor_customer_id Unique customer identifier on processor network.
     *
     * @return self
     */
    public function setProcessorCustomerId($processor_customer_id)
    {
        if (!is_null($processor_customer_id) && (mb_strlen($processor_customer_id) > 1024)) {
            throw new \InvalidArgumentException('invalid length for $processor_customer_id when calling Customer., must be smaller than or equal to 1024.');
        }


        if (is_null($processor_customer_id)) {
            throw new \InvalidArgumentException('non-nullable processor_customer_id cannot be null');
        }

        $this->container['processor_customer_id'] = $processor_customer_id;

        return $this;
    }

    /**
     * Gets first_name
     *
     * @return string|null
     */
    public function getFirstName()
    {
        return $this->container['first_name'];
    }

    /**
     * Sets first_name
     *
     * @param string|null $first_name Customer first name.
     *
     * @return self
     */
    public function setFirstName($first_name)
    {
        if (!is_null($first_name) && (mb_strlen($first_name) > 256)) {
            throw new \InvalidArgumentException('invalid length for $first_name when calling Customer., must be smaller than or equal to 256.');
        }


        if (is_null($first_name)) {
            throw new \InvalidArgumentException('non-nullable first_name cannot be null');
        }

        $this->container['first_name'] = $first_name;

        return $this;
    }

    /**
     * Gets last_name
     *
     * @return string|null
     */
    public function getLastName()
    {
        return $this->container['last_name'];
    }

    /**
     * Sets last_name
     *
     * @param string|null $last_name Customer last name.
     *
     * @return self
     */
    public function setLastName($last_name)
    {
        if (!is_null($last_name) && (mb_strlen($last_name) > 256)) {
            throw new \InvalidArgumentException('invalid length for $last_name when calling Customer., must be smaller than or equal to 256.');
        }


        if (is_null($last_name)) {
            throw new \InvalidArgumentException('non-nullable last_name cannot be null');
        }

        $this->container['last_name'] = $last_name;

        return $this;
    }

    /**
     * Gets dob
     *
     * @return \DateTime|null
     */
    public function getDob()
    {
        return $this->container['dob'];
    }

    /**
     * Sets dob
     *
     * @param \DateTime|null $dob Customer date of birth in YYYY-MM-DD format.
     *
     * @return self
     */
    public function setDob($dob)
    {
        if (!is_null($dob) && (mb_strlen($dob) > 10)) {
            throw new \InvalidArgumentException('invalid length for $dob when calling Customer., must be smaller than or equal to 10.');
        }


        if (is_null($dob)) {
            throw new \InvalidArgumentException('non-nullable dob cannot be null');
        }

        $this->container['dob'] = $dob;

        return $this;
    }

    /**
     * Gets email
     *
     * @return string|null
     */
    public function getEmail()
    {
        return $this->container['email'];
    }

    /**
     * Sets email
     *
     * @param string|null $email Customer email address.
     *
     * @return self
     */
    public function setEmail($email)
    {
        if (!is_null($email) && (mb_strlen($email) > 256)) {
            throw new \InvalidArgumentException('invalid length for $email when calling Customer., must be smaller than or equal to 256.');
        }


        if (is_null($email)) {
            throw new \InvalidArgumentException('non-nullable email cannot be null');
        }

        $this->container['email'] = $email;

        return $this;
    }

    /**
     * Gets ip_address
     *
     * @return string|null
     */
    public function getIpAddress()
    {
        return $this->container['ip_address'];
    }

    /**
     * Sets ip_address
     *
     * @param string|null $ip_address The IP address of the customer.
     *
     * @return self
     */
    public function setIpAddress($ip_address)
    {
        if (!is_null($ip_address) && (mb_strlen($ip_address) > 39)) {
            throw new \InvalidArgumentException('invalid length for $ip_address when calling Customer., must be smaller than or equal to 39.');
        }


        if (is_null($ip_address)) {
            throw new \InvalidArgumentException('non-nullable ip_address cannot be null');
        }

        $this->container['ip_address'] = $ip_address;

        return $this;
    }

    /**
     * Gets host_name
     *
     * @return string|null
     */
    public function getHostName()
    {
        return $this->container['host_name'];
    }

    /**
     * Sets host_name
     *
     * @param string|null $host_name The name of the server the customer is connected to.
     *
     * @return self
     */
    public function setHostName($host_name)
    {
        if (!is_null($host_name) && (mb_strlen($host_name) > 1024)) {
            throw new \InvalidArgumentException('invalid length for $host_name when calling Customer., must be smaller than or equal to 1024.');
        }


        if (is_null($host_name)) {
            throw new \InvalidArgumentException('non-nullable host_name cannot be null');
        }

        $this->container['host_name'] = $host_name;

        return $this;
    }

    /**
     * Gets locale
     *
     * @return string|null
     */
    public function getLocale()
    {
        return $this->container['locale'];
    }

    /**
     * Sets locale
     *
     * @param string|null $locale Language/region code of user in IETF BCP47 format.
     *
     * @return self
     */
    public function setLocale($locale)
    {
        if (!is_null($locale) && (mb_strlen($locale) > 256)) {
            throw new \InvalidArgumentException('invalid length for $locale when calling Customer., must be smaller than or equal to 256.');
        }


        if (is_null($locale)) {
            throw new \InvalidArgumentException('non-nullable locale cannot be null');
        }

        $this->container['locale'] = $locale;

        return $this;
    }

    /**
     * Gets driver_license_number
     *
     * @return string|null
     */
    public function getDriverLicenseNumber()
    {
        return $this->container['driver_license_number'];
    }

    /**
     * Sets driver_license_number
     *
     * @param string|null $driver_license_number Customer driver license number, including state.
     *
     * @return self
     */
    public function setDriverLicenseNumber($driver_license_number)
    {
        if (!is_null($driver_license_number) && (mb_strlen($driver_license_number) > 256)) {
            throw new \InvalidArgumentException('invalid length for $driver_license_number when calling Customer., must be smaller than or equal to 256.');
        }


        if (is_null($driver_license_number)) {
            throw new \InvalidArgumentException('non-nullable driver_license_number cannot be null');
        }

        $this->container['driver_license_number'] = $driver_license_number;

        return $this;
    }

    /**
     * Gets ssn
     *
     * @return string|null
     */
    public function getSsn()
    {
        return $this->container['ssn'];
    }

    /**
     * Sets ssn
     *
     * @param string|null $ssn Customer SSN or US federal tax ID number (business checks only).
     *
     * @return self
     */
    public function setSsn($ssn)
    {
        if (!is_null($ssn) && (mb_strlen($ssn) > 9)) {
            throw new \InvalidArgumentException('invalid length for $ssn when calling Customer., must be smaller than or equal to 9.');
        }


        if (is_null($ssn)) {
            throw new \InvalidArgumentException('non-nullable ssn cannot be null');
        }

        $this->container['ssn'] = $ssn;

        return $this;
    }

    /**
     * Gets phone
     *
     * @return \Fiserv\Payments\Lib\CommerceHub\Model\Phone[]|null
     */
    public function getPhone()
    {
        return $this->container['phone'];
    }

    /**
     * Sets phone
     *
     * @param \Fiserv\Payments\Lib\CommerceHub\Model\Phone[]|null $phone phone
     *
     * @return self
     */
    public function setPhone($phone)
    {

        if (is_null($phone)) {
            throw new \InvalidArgumentException('non-nullable phone cannot be null');
        }

        $this->container['phone'] = $phone;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


