<?php
/**
 * Customer
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Fiserv\Payments\Lib\CommerceHub
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Commerce Hub
 *
 * This API Specification is designed to provide technical guidance required to consume and integrate with our APIs for payment processing.
 *
 * The version of the OpenAPI document: v1.24.08
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.3.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Fiserv\Payments\Lib\CommerceHub\Model;

use \ArrayAccess;
use \Fiserv\Payments\Lib\CommerceHub\ObjectSerializer;

/**
 * Customer Class Doc Comment
 *
 * @category Class
 * @description &lt;a href&#x3D;\&quot;../docs?path&#x3D;docs/Resources/Master-Data/Customer-Details.md\&quot;&gt;Customer&lt;/a&gt; specific data.
 * @package  Fiserv\Payments\Lib\CommerceHub
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class Customer implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Customer';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'merchant_customer_id' => 'string',
        'first_name' => 'string',
        'last_name' => 'string',
        'email' => 'string',
        'date_of_birth' => 'string',
        'driver_license_number' => 'string',
        'driver_license_state' => 'string',
        'id_card_number' => 'string',
        'passport_number' => 'string',
        'ssn' => 'string',
        'tax_id' => 'string',
        'host_name' => 'string',
        'ip_address' => 'string',
        'driver_id' => 'string',
        'work_order_number' => 'string',
        'additional_data1' => 'string',
        'additional_data2' => 'string',
        'department' => 'string',
        'job_id' => 'string',
        'account_code' => 'string',
        'phone' => '\Fiserv\Payments\Lib\CommerceHub\Model\Phone[]',
        'vehicle' => '\Fiserv\Payments\Lib\CommerceHub\Model\Vehicle'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'merchant_customer_id' => null,
        'first_name' => null,
        'last_name' => null,
        'email' => null,
        'date_of_birth' => null,
        'driver_license_number' => null,
        'driver_license_state' => null,
        'id_card_number' => null,
        'passport_number' => null,
        'ssn' => null,
        'tax_id' => null,
        'host_name' => null,
        'ip_address' => null,
        'driver_id' => null,
        'work_order_number' => null,
        'additional_data1' => null,
        'additional_data2' => null,
        'department' => null,
        'job_id' => null,
        'account_code' => null,
        'phone' => null,
        'vehicle' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'merchant_customer_id' => false,
        'first_name' => false,
        'last_name' => false,
        'email' => false,
        'date_of_birth' => false,
        'driver_license_number' => false,
        'driver_license_state' => false,
        'id_card_number' => false,
        'passport_number' => false,
        'ssn' => false,
        'tax_id' => false,
        'host_name' => false,
        'ip_address' => false,
        'driver_id' => false,
        'work_order_number' => false,
        'additional_data1' => false,
        'additional_data2' => false,
        'department' => false,
        'job_id' => false,
        'account_code' => false,
        'phone' => false,
        'vehicle' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'merchant_customer_id' => 'merchantCustomerId',
        'first_name' => 'firstName',
        'last_name' => 'lastName',
        'email' => 'email',
        'date_of_birth' => 'dateOfBirth',
        'driver_license_number' => 'driverLicenseNumber',
        'driver_license_state' => 'driverLicenseState',
        'id_card_number' => 'idCardNumber',
        'passport_number' => 'passportNumber',
        'ssn' => 'ssn',
        'tax_id' => 'taxId',
        'host_name' => 'hostName',
        'ip_address' => 'ipAddress',
        'driver_id' => 'driverID',
        'work_order_number' => 'workOrderNumber',
        'additional_data1' => 'additionalData1',
        'additional_data2' => 'additionalData2',
        'department' => 'department',
        'job_id' => 'jobId',
        'account_code' => 'accountCode',
        'phone' => 'phone',
        'vehicle' => 'vehicle'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'merchant_customer_id' => 'setMerchantCustomerId',
        'first_name' => 'setFirstName',
        'last_name' => 'setLastName',
        'email' => 'setEmail',
        'date_of_birth' => 'setDateOfBirth',
        'driver_license_number' => 'setDriverLicenseNumber',
        'driver_license_state' => 'setDriverLicenseState',
        'id_card_number' => 'setIdCardNumber',
        'passport_number' => 'setPassportNumber',
        'ssn' => 'setSsn',
        'tax_id' => 'setTaxId',
        'host_name' => 'setHostName',
        'ip_address' => 'setIpAddress',
        'driver_id' => 'setDriverId',
        'work_order_number' => 'setWorkOrderNumber',
        'additional_data1' => 'setAdditionalData1',
        'additional_data2' => 'setAdditionalData2',
        'department' => 'setDepartment',
        'job_id' => 'setJobId',
        'account_code' => 'setAccountCode',
        'phone' => 'setPhone',
        'vehicle' => 'setVehicle'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'merchant_customer_id' => 'getMerchantCustomerId',
        'first_name' => 'getFirstName',
        'last_name' => 'getLastName',
        'email' => 'getEmail',
        'date_of_birth' => 'getDateOfBirth',
        'driver_license_number' => 'getDriverLicenseNumber',
        'driver_license_state' => 'getDriverLicenseState',
        'id_card_number' => 'getIdCardNumber',
        'passport_number' => 'getPassportNumber',
        'ssn' => 'getSsn',
        'tax_id' => 'getTaxId',
        'host_name' => 'getHostName',
        'ip_address' => 'getIpAddress',
        'driver_id' => 'getDriverId',
        'work_order_number' => 'getWorkOrderNumber',
        'additional_data1' => 'getAdditionalData1',
        'additional_data2' => 'getAdditionalData2',
        'department' => 'getDepartment',
        'job_id' => 'getJobId',
        'account_code' => 'getAccountCode',
        'phone' => 'getPhone',
        'vehicle' => 'getVehicle'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('merchant_customer_id', $data ?? [], null);
        $this->setIfExists('first_name', $data ?? [], null);
        $this->setIfExists('last_name', $data ?? [], null);
        $this->setIfExists('email', $data ?? [], null);
        $this->setIfExists('date_of_birth', $data ?? [], null);
        $this->setIfExists('driver_license_number', $data ?? [], null);
        $this->setIfExists('driver_license_state', $data ?? [], null);
        $this->setIfExists('id_card_number', $data ?? [], null);
        $this->setIfExists('passport_number', $data ?? [], null);
        $this->setIfExists('ssn', $data ?? [], null);
        $this->setIfExists('tax_id', $data ?? [], null);
        $this->setIfExists('host_name', $data ?? [], null);
        $this->setIfExists('ip_address', $data ?? [], null);
        $this->setIfExists('driver_id', $data ?? [], null);
        $this->setIfExists('work_order_number', $data ?? [], null);
        $this->setIfExists('additional_data1', $data ?? [], null);
        $this->setIfExists('additional_data2', $data ?? [], null);
        $this->setIfExists('department', $data ?? [], null);
        $this->setIfExists('job_id', $data ?? [], null);
        $this->setIfExists('account_code', $data ?? [], null);
        $this->setIfExists('phone', $data ?? [], null);
        $this->setIfExists('vehicle', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['merchant_customer_id']) && (mb_strlen($this->container['merchant_customer_id']) > 1024)) {
            $invalidProperties[] = "invalid value for 'merchant_customer_id', the character length must be smaller than or equal to 1024.";
        }

        if (!is_null($this->container['first_name']) && (mb_strlen($this->container['first_name']) > 256)) {
            $invalidProperties[] = "invalid value for 'first_name', the character length must be smaller than or equal to 256.";
        }

        if (!is_null($this->container['last_name']) && (mb_strlen($this->container['last_name']) > 256)) {
            $invalidProperties[] = "invalid value for 'last_name', the character length must be smaller than or equal to 256.";
        }

        if (!is_null($this->container['email']) && (mb_strlen($this->container['email']) > 256)) {
            $invalidProperties[] = "invalid value for 'email', the character length must be smaller than or equal to 256.";
        }

        if (!is_null($this->container['date_of_birth']) && (mb_strlen($this->container['date_of_birth']) > 10)) {
            $invalidProperties[] = "invalid value for 'date_of_birth', the character length must be smaller than or equal to 10.";
        }

        if (!is_null($this->container['driver_license_number']) && (mb_strlen($this->container['driver_license_number']) > 256)) {
            $invalidProperties[] = "invalid value for 'driver_license_number', the character length must be smaller than or equal to 256.";
        }

        if (!is_null($this->container['driver_license_state']) && (mb_strlen($this->container['driver_license_state']) > 256)) {
            $invalidProperties[] = "invalid value for 'driver_license_state', the character length must be smaller than or equal to 256.";
        }

        if (!is_null($this->container['id_card_number']) && (mb_strlen($this->container['id_card_number']) > 256)) {
            $invalidProperties[] = "invalid value for 'id_card_number', the character length must be smaller than or equal to 256.";
        }

        if (!is_null($this->container['passport_number']) && (mb_strlen($this->container['passport_number']) > 256)) {
            $invalidProperties[] = "invalid value for 'passport_number', the character length must be smaller than or equal to 256.";
        }

        if (!is_null($this->container['ssn']) && (mb_strlen($this->container['ssn']) > 9)) {
            $invalidProperties[] = "invalid value for 'ssn', the character length must be smaller than or equal to 9.";
        }

        if (!is_null($this->container['host_name']) && (mb_strlen($this->container['host_name']) > 1024)) {
            $invalidProperties[] = "invalid value for 'host_name', the character length must be smaller than or equal to 1024.";
        }

        if (!is_null($this->container['ip_address']) && (mb_strlen($this->container['ip_address']) > 39)) {
            $invalidProperties[] = "invalid value for 'ip_address', the character length must be smaller than or equal to 39.";
        }

        if (!is_null($this->container['driver_id']) && (mb_strlen($this->container['driver_id']) > 256)) {
            $invalidProperties[] = "invalid value for 'driver_id', the character length must be smaller than or equal to 256.";
        }

        if (!is_null($this->container['work_order_number']) && (mb_strlen($this->container['work_order_number']) > 256)) {
            $invalidProperties[] = "invalid value for 'work_order_number', the character length must be smaller than or equal to 256.";
        }

        if (!is_null($this->container['additional_data1']) && (mb_strlen($this->container['additional_data1']) > 256)) {
            $invalidProperties[] = "invalid value for 'additional_data1', the character length must be smaller than or equal to 256.";
        }

        if (!is_null($this->container['additional_data2']) && (mb_strlen($this->container['additional_data2']) > 256)) {
            $invalidProperties[] = "invalid value for 'additional_data2', the character length must be smaller than or equal to 256.";
        }

        if (!is_null($this->container['department']) && (mb_strlen($this->container['department']) > 256)) {
            $invalidProperties[] = "invalid value for 'department', the character length must be smaller than or equal to 256.";
        }

        if (!is_null($this->container['job_id']) && (mb_strlen($this->container['job_id']) > 256)) {
            $invalidProperties[] = "invalid value for 'job_id', the character length must be smaller than or equal to 256.";
        }

        if (!is_null($this->container['account_code']) && (mb_strlen($this->container['account_code']) > 64)) {
            $invalidProperties[] = "invalid value for 'account_code', the character length must be smaller than or equal to 64.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets merchant_customer_id
     *
     * @return string|null
     */
    public function getMerchantCustomerId()
    {
        return $this->container['merchant_customer_id'];
    }

    /**
     * Sets merchant_customer_id
     *
     * @param string|null $merchant_customer_id Unique customer identifier defined by the merchant.
     *
     * @return self
     */
    public function setMerchantCustomerId($merchant_customer_id)
    {
        if (is_null($merchant_customer_id)) {
            throw new \InvalidArgumentException('non-nullable merchant_customer_id cannot be null');
        }
        if ((mb_strlen($merchant_customer_id) > 1024)) {
            throw new \InvalidArgumentException('invalid length for $merchant_customer_id when calling Customer., must be smaller than or equal to 1024.');
        }

        $this->container['merchant_customer_id'] = $merchant_customer_id;

        return $this;
    }

    /**
     * Gets first_name
     *
     * @return string|null
     */
    public function getFirstName()
    {
        return $this->container['first_name'];
    }

    /**
     * Sets first_name
     *
     * @param string|null $first_name Customer first name.
     *
     * @return self
     */
    public function setFirstName($first_name)
    {
        if (is_null($first_name)) {
            throw new \InvalidArgumentException('non-nullable first_name cannot be null');
        }
        if ((mb_strlen($first_name) > 256)) {
            throw new \InvalidArgumentException('invalid length for $first_name when calling Customer., must be smaller than or equal to 256.');
        }

        $this->container['first_name'] = $first_name;

        return $this;
    }

    /**
     * Gets last_name
     *
     * @return string|null
     */
    public function getLastName()
    {
        return $this->container['last_name'];
    }

    /**
     * Sets last_name
     *
     * @param string|null $last_name Customer last name.
     *
     * @return self
     */
    public function setLastName($last_name)
    {
        if (is_null($last_name)) {
            throw new \InvalidArgumentException('non-nullable last_name cannot be null');
        }
        if ((mb_strlen($last_name) > 256)) {
            throw new \InvalidArgumentException('invalid length for $last_name when calling Customer., must be smaller than or equal to 256.');
        }

        $this->container['last_name'] = $last_name;

        return $this;
    }

    /**
     * Gets email
     *
     * @return string|null
     */
    public function getEmail()
    {
        return $this->container['email'];
    }

    /**
     * Sets email
     *
     * @param string|null $email Customer email address.
     *
     * @return self
     */
    public function setEmail($email)
    {
        if (is_null($email)) {
            throw new \InvalidArgumentException('non-nullable email cannot be null');
        }
        if ((mb_strlen($email) > 256)) {
            throw new \InvalidArgumentException('invalid length for $email when calling Customer., must be smaller than or equal to 256.');
        }

        $this->container['email'] = $email;

        return $this;
    }

    /**
     * Gets date_of_birth
     *
     * @return string|null
     */
    public function getDateOfBirth()
    {
        return $this->container['date_of_birth'];
    }

    /**
     * Sets date_of_birth
     *
     * @param string|null $date_of_birth Customer date of birth in YYYY-MM-DD format.
     *
     * @return self
     */
    public function setDateOfBirth($date_of_birth)
    {
        if (is_null($date_of_birth)) {
            throw new \InvalidArgumentException('non-nullable date_of_birth cannot be null');
        }
        if ((mb_strlen($date_of_birth) > 10)) {
            throw new \InvalidArgumentException('invalid length for $date_of_birth when calling Customer., must be smaller than or equal to 10.');
        }

        $this->container['date_of_birth'] = $date_of_birth;

        return $this;
    }

    /**
     * Gets driver_license_number
     *
     * @return string|null
     */
    public function getDriverLicenseNumber()
    {
        return $this->container['driver_license_number'];
    }

    /**
     * Sets driver_license_number
     *
     * @param string|null $driver_license_number Customer driver license number.
     *
     * @return self
     */
    public function setDriverLicenseNumber($driver_license_number)
    {
        if (is_null($driver_license_number)) {
            throw new \InvalidArgumentException('non-nullable driver_license_number cannot be null');
        }
        if ((mb_strlen($driver_license_number) > 256)) {
            throw new \InvalidArgumentException('invalid length for $driver_license_number when calling Customer., must be smaller than or equal to 256.');
        }

        $this->container['driver_license_number'] = $driver_license_number;

        return $this;
    }

    /**
     * Gets driver_license_state
     *
     * @return string|null
     */
    public function getDriverLicenseState()
    {
        return $this->container['driver_license_state'];
    }

    /**
     * Sets driver_license_state
     *
     * @param string|null $driver_license_state Driver license <a href=\"../docs?path=docs/Resources/Master-Data/State-Code.md\">state or province code</a>.
     *
     * @return self
     */
    public function setDriverLicenseState($driver_license_state)
    {
        if (is_null($driver_license_state)) {
            throw new \InvalidArgumentException('non-nullable driver_license_state cannot be null');
        }
        if ((mb_strlen($driver_license_state) > 256)) {
            throw new \InvalidArgumentException('invalid length for $driver_license_state when calling Customer., must be smaller than or equal to 256.');
        }

        $this->container['driver_license_state'] = $driver_license_state;

        return $this;
    }

    /**
     * Gets id_card_number
     *
     * @return string|null
     */
    public function getIdCardNumber()
    {
        return $this->container['id_card_number'];
    }

    /**
     * Sets id_card_number
     *
     * @param string|null $id_card_number Customer id card number.
     *
     * @return self
     */
    public function setIdCardNumber($id_card_number)
    {
        if (is_null($id_card_number)) {
            throw new \InvalidArgumentException('non-nullable id_card_number cannot be null');
        }
        if ((mb_strlen($id_card_number) > 256)) {
            throw new \InvalidArgumentException('invalid length for $id_card_number when calling Customer., must be smaller than or equal to 256.');
        }

        $this->container['id_card_number'] = $id_card_number;

        return $this;
    }

    /**
     * Gets passport_number
     *
     * @return string|null
     */
    public function getPassportNumber()
    {
        return $this->container['passport_number'];
    }

    /**
     * Sets passport_number
     *
     * @param string|null $passport_number Customer passport number.
     *
     * @return self
     */
    public function setPassportNumber($passport_number)
    {
        if (is_null($passport_number)) {
            throw new \InvalidArgumentException('non-nullable passport_number cannot be null');
        }
        if ((mb_strlen($passport_number) > 256)) {
            throw new \InvalidArgumentException('invalid length for $passport_number when calling Customer., must be smaller than or equal to 256.');
        }

        $this->container['passport_number'] = $passport_number;

        return $this;
    }

    /**
     * Gets ssn
     *
     * @return string|null
     */
    public function getSsn()
    {
        return $this->container['ssn'];
    }

    /**
     * Sets ssn
     *
     * @param string|null $ssn Customer SSN.
     *
     * @return self
     */
    public function setSsn($ssn)
    {
        if (is_null($ssn)) {
            throw new \InvalidArgumentException('non-nullable ssn cannot be null');
        }
        if ((mb_strlen($ssn) > 9)) {
            throw new \InvalidArgumentException('invalid length for $ssn when calling Customer., must be smaller than or equal to 9.');
        }

        $this->container['ssn'] = $ssn;

        return $this;
    }

    /**
     * Gets tax_id
     *
     * @return string|null
     */
    public function getTaxId()
    {
        return $this->container['tax_id'];
    }

    /**
     * Sets tax_id
     *
     * @param string|null $tax_id Customer tax ID number.
     *
     * @return self
     */
    public function setTaxId($tax_id)
    {
        if (is_null($tax_id)) {
            throw new \InvalidArgumentException('non-nullable tax_id cannot be null');
        }
        $this->container['tax_id'] = $tax_id;

        return $this;
    }

    /**
     * Gets host_name
     *
     * @return string|null
     */
    public function getHostName()
    {
        return $this->container['host_name'];
    }

    /**
     * Sets host_name
     *
     * @param string|null $host_name The name of the server the customer is connected to.
     *
     * @return self
     */
    public function setHostName($host_name)
    {
        if (is_null($host_name)) {
            throw new \InvalidArgumentException('non-nullable host_name cannot be null');
        }
        if ((mb_strlen($host_name) > 1024)) {
            throw new \InvalidArgumentException('invalid length for $host_name when calling Customer., must be smaller than or equal to 1024.');
        }

        $this->container['host_name'] = $host_name;

        return $this;
    }

    /**
     * Gets ip_address
     *
     * @return string|null
     */
    public function getIpAddress()
    {
        return $this->container['ip_address'];
    }

    /**
     * Sets ip_address
     *
     * @param string|null $ip_address The IP address of the customer.
     *
     * @return self
     */
    public function setIpAddress($ip_address)
    {
        if (is_null($ip_address)) {
            throw new \InvalidArgumentException('non-nullable ip_address cannot be null');
        }
        if ((mb_strlen($ip_address) > 39)) {
            throw new \InvalidArgumentException('invalid length for $ip_address when calling Customer., must be smaller than or equal to 39.');
        }

        $this->container['ip_address'] = $ip_address;

        return $this;
    }

    /**
     * Gets driver_id
     *
     * @return string|null
     */
    public function getDriverId()
    {
        return $this->container['driver_id'];
    }

    /**
     * Sets driver_id
     *
     * @param string|null $driver_id This field represents the identification number of driver.
     *
     * @return self
     */
    public function setDriverId($driver_id)
    {
        if (is_null($driver_id)) {
            throw new \InvalidArgumentException('non-nullable driver_id cannot be null');
        }
        if ((mb_strlen($driver_id) > 256)) {
            throw new \InvalidArgumentException('invalid length for $driver_id when calling Customer., must be smaller than or equal to 256.');
        }

        $this->container['driver_id'] = $driver_id;

        return $this;
    }

    /**
     * Gets work_order_number
     *
     * @return string|null
     */
    public function getWorkOrderNumber()
    {
        return $this->container['work_order_number'];
    }

    /**
     * Sets work_order_number
     *
     * @param string|null $work_order_number This field contains the contract number or purchase order number.
     *
     * @return self
     */
    public function setWorkOrderNumber($work_order_number)
    {
        if (is_null($work_order_number)) {
            throw new \InvalidArgumentException('non-nullable work_order_number cannot be null');
        }
        if ((mb_strlen($work_order_number) > 256)) {
            throw new \InvalidArgumentException('invalid length for $work_order_number when calling Customer., must be smaller than or equal to 256.');
        }

        $this->container['work_order_number'] = $work_order_number;

        return $this;
    }

    /**
     * Gets additional_data1
     *
     * @return string|null
     */
    public function getAdditionalData1()
    {
        return $this->container['additional_data1'];
    }

    /**
     * Sets additional_data1
     *
     * @param string|null $additional_data1 Additional information related to customer
     *
     * @return self
     */
    public function setAdditionalData1($additional_data1)
    {
        if (is_null($additional_data1)) {
            throw new \InvalidArgumentException('non-nullable additional_data1 cannot be null');
        }
        if ((mb_strlen($additional_data1) > 256)) {
            throw new \InvalidArgumentException('invalid length for $additional_data1 when calling Customer., must be smaller than or equal to 256.');
        }

        $this->container['additional_data1'] = $additional_data1;

        return $this;
    }

    /**
     * Gets additional_data2
     *
     * @return string|null
     */
    public function getAdditionalData2()
    {
        return $this->container['additional_data2'];
    }

    /**
     * Sets additional_data2
     *
     * @param string|null $additional_data2 Additional information related to customer
     *
     * @return self
     */
    public function setAdditionalData2($additional_data2)
    {
        if (is_null($additional_data2)) {
            throw new \InvalidArgumentException('non-nullable additional_data2 cannot be null');
        }
        if ((mb_strlen($additional_data2) > 256)) {
            throw new \InvalidArgumentException('invalid length for $additional_data2 when calling Customer., must be smaller than or equal to 256.');
        }

        $this->container['additional_data2'] = $additional_data2;

        return $this;
    }

    /**
     * Gets department
     *
     * @return string|null
     */
    public function getDepartment()
    {
        return $this->container['department'];
    }

    /**
     * Sets department
     *
     * @param string|null $department Identifies the department customer belongs to.
     *
     * @return self
     */
    public function setDepartment($department)
    {
        if (is_null($department)) {
            throw new \InvalidArgumentException('non-nullable department cannot be null');
        }
        if ((mb_strlen($department) > 256)) {
            throw new \InvalidArgumentException('invalid length for $department when calling Customer., must be smaller than or equal to 256.');
        }

        $this->container['department'] = $department;

        return $this;
    }

    /**
     * Gets job_id
     *
     * @return string|null
     */
    public function getJobId()
    {
        return $this->container['job_id'];
    }

    /**
     * Sets job_id
     *
     * @param string|null $job_id This field contains the customer job code.
     *
     * @return self
     */
    public function setJobId($job_id)
    {
        if (is_null($job_id)) {
            throw new \InvalidArgumentException('non-nullable job_id cannot be null');
        }
        if ((mb_strlen($job_id) > 256)) {
            throw new \InvalidArgumentException('invalid length for $job_id when calling Customer., must be smaller than or equal to 256.');
        }

        $this->container['job_id'] = $job_id;

        return $this;
    }

    /**
     * Gets account_code
     *
     * @return string|null
     */
    public function getAccountCode()
    {
        return $this->container['account_code'];
    }

    /**
     * Sets account_code
     *
     * @param string|null $account_code This response field contains the account code of the customer or business.
     *
     * @return self
     */
    public function setAccountCode($account_code)
    {
        if (is_null($account_code)) {
            throw new \InvalidArgumentException('non-nullable account_code cannot be null');
        }
        if ((mb_strlen($account_code) > 64)) {
            throw new \InvalidArgumentException('invalid length for $account_code when calling Customer., must be smaller than or equal to 64.');
        }

        $this->container['account_code'] = $account_code;

        return $this;
    }

    /**
     * Gets phone
     *
     * @return \Fiserv\Payments\Lib\CommerceHub\Model\Phone[]|null
     */
    public function getPhone()
    {
        return $this->container['phone'];
    }

    /**
     * Sets phone
     *
     * @param \Fiserv\Payments\Lib\CommerceHub\Model\Phone[]|null $phone phone
     *
     * @return self
     */
    public function setPhone($phone)
    {
        if (is_null($phone)) {
            throw new \InvalidArgumentException('non-nullable phone cannot be null');
        }
        $this->container['phone'] = $phone;

        return $this;
    }

    /**
     * Gets vehicle
     *
     * @return \Fiserv\Payments\Lib\CommerceHub\Model\Vehicle|null
     */
    public function getVehicle()
    {
        return $this->container['vehicle'];
    }

    /**
     * Sets vehicle
     *
     * @param \Fiserv\Payments\Lib\CommerceHub\Model\Vehicle|null $vehicle vehicle
     *
     * @return self
     */
    public function setVehicle($vehicle)
    {
        if (is_null($vehicle)) {
            throw new \InvalidArgumentException('non-nullable vehicle cannot be null');
        }
        $this->container['vehicle'] = $vehicle;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


