<?php
/**
 * Vehicle
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Fiserv\Payments\Lib\CommerceHub
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Commerce Hub
 *
 * This API Specification is designed to provide technical guidance required to consume and integrate with our APIs for payment processing.
 *
 * The version of the OpenAPI document: v1.24.08
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.3.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Fiserv\Payments\Lib\CommerceHub\Model;

use \ArrayAccess;
use \Fiserv\Payments\Lib\CommerceHub\ObjectSerializer;

/**
 * Vehicle Class Doc Comment
 *
 * @category Class
 * @description Customer &lt;a href&#x3D;\&quot;../docs?path&#x3D;docs/Resources/Master-Data/Vehicle.md\&quot;&gt;vehicle&lt;/a&gt; information.
 * @package  Fiserv\Payments\Lib\CommerceHub
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class Vehicle implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Vehicle';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'vehicle_number' => 'string',
        'odometer_reading' => 'string',
        'trip_number' => 'string',
        'unit_id' => 'string',
        'reefer_hours' => 'string',
        'maintenance_id' => 'string',
        'trailer_number' => 'string',
        'hubometer' => 'string',
        'vehicle_license_number' => 'string',
        'vehicle_license_state' => 'string',
        'trailer_license_number' => 'string',
        'trailer_license_state' => 'string',
        'trailer_hub' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'vehicle_number' => null,
        'odometer_reading' => null,
        'trip_number' => null,
        'unit_id' => null,
        'reefer_hours' => null,
        'maintenance_id' => null,
        'trailer_number' => null,
        'hubometer' => null,
        'vehicle_license_number' => null,
        'vehicle_license_state' => null,
        'trailer_license_number' => null,
        'trailer_license_state' => null,
        'trailer_hub' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'vehicle_number' => false,
        'odometer_reading' => false,
        'trip_number' => false,
        'unit_id' => false,
        'reefer_hours' => false,
        'maintenance_id' => false,
        'trailer_number' => false,
        'hubometer' => false,
        'vehicle_license_number' => false,
        'vehicle_license_state' => false,
        'trailer_license_number' => false,
        'trailer_license_state' => false,
        'trailer_hub' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'vehicle_number' => 'vehicleNumber',
        'odometer_reading' => 'odometerReading',
        'trip_number' => 'tripNumber',
        'unit_id' => 'unitId',
        'reefer_hours' => 'reeferHours',
        'maintenance_id' => 'maintenanceId',
        'trailer_number' => 'trailerNumber',
        'hubometer' => 'hubometer',
        'vehicle_license_number' => 'vehicleLicenseNumber',
        'vehicle_license_state' => 'vehicleLicenseState',
        'trailer_license_number' => 'trailerLicenseNumber',
        'trailer_license_state' => 'trailerLicenseState',
        'trailer_hub' => 'trailerHub'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'vehicle_number' => 'setVehicleNumber',
        'odometer_reading' => 'setOdometerReading',
        'trip_number' => 'setTripNumber',
        'unit_id' => 'setUnitId',
        'reefer_hours' => 'setReeferHours',
        'maintenance_id' => 'setMaintenanceId',
        'trailer_number' => 'setTrailerNumber',
        'hubometer' => 'setHubometer',
        'vehicle_license_number' => 'setVehicleLicenseNumber',
        'vehicle_license_state' => 'setVehicleLicenseState',
        'trailer_license_number' => 'setTrailerLicenseNumber',
        'trailer_license_state' => 'setTrailerLicenseState',
        'trailer_hub' => 'setTrailerHub'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'vehicle_number' => 'getVehicleNumber',
        'odometer_reading' => 'getOdometerReading',
        'trip_number' => 'getTripNumber',
        'unit_id' => 'getUnitId',
        'reefer_hours' => 'getReeferHours',
        'maintenance_id' => 'getMaintenanceId',
        'trailer_number' => 'getTrailerNumber',
        'hubometer' => 'getHubometer',
        'vehicle_license_number' => 'getVehicleLicenseNumber',
        'vehicle_license_state' => 'getVehicleLicenseState',
        'trailer_license_number' => 'getTrailerLicenseNumber',
        'trailer_license_state' => 'getTrailerLicenseState',
        'trailer_hub' => 'getTrailerHub'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('vehicle_number', $data ?? [], null);
        $this->setIfExists('odometer_reading', $data ?? [], null);
        $this->setIfExists('trip_number', $data ?? [], null);
        $this->setIfExists('unit_id', $data ?? [], null);
        $this->setIfExists('reefer_hours', $data ?? [], null);
        $this->setIfExists('maintenance_id', $data ?? [], null);
        $this->setIfExists('trailer_number', $data ?? [], null);
        $this->setIfExists('hubometer', $data ?? [], null);
        $this->setIfExists('vehicle_license_number', $data ?? [], null);
        $this->setIfExists('vehicle_license_state', $data ?? [], null);
        $this->setIfExists('trailer_license_number', $data ?? [], null);
        $this->setIfExists('trailer_license_state', $data ?? [], null);
        $this->setIfExists('trailer_hub', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['vehicle_number']) && (mb_strlen($this->container['vehicle_number']) > 256)) {
            $invalidProperties[] = "invalid value for 'vehicle_number', the character length must be smaller than or equal to 256.";
        }

        if (!is_null($this->container['odometer_reading']) && (mb_strlen($this->container['odometer_reading']) > 256)) {
            $invalidProperties[] = "invalid value for 'odometer_reading', the character length must be smaller than or equal to 256.";
        }

        if (!is_null($this->container['trip_number']) && (mb_strlen($this->container['trip_number']) > 256)) {
            $invalidProperties[] = "invalid value for 'trip_number', the character length must be smaller than or equal to 256.";
        }

        if (!is_null($this->container['unit_id']) && (mb_strlen($this->container['unit_id']) > 256)) {
            $invalidProperties[] = "invalid value for 'unit_id', the character length must be smaller than or equal to 256.";
        }

        if (!is_null($this->container['reefer_hours']) && (mb_strlen($this->container['reefer_hours']) > 256)) {
            $invalidProperties[] = "invalid value for 'reefer_hours', the character length must be smaller than or equal to 256.";
        }

        if (!is_null($this->container['maintenance_id']) && (mb_strlen($this->container['maintenance_id']) > 256)) {
            $invalidProperties[] = "invalid value for 'maintenance_id', the character length must be smaller than or equal to 256.";
        }

        if (!is_null($this->container['trailer_number']) && (mb_strlen($this->container['trailer_number']) > 256)) {
            $invalidProperties[] = "invalid value for 'trailer_number', the character length must be smaller than or equal to 256.";
        }

        if (!is_null($this->container['hubometer']) && (mb_strlen($this->container['hubometer']) > 256)) {
            $invalidProperties[] = "invalid value for 'hubometer', the character length must be smaller than or equal to 256.";
        }

        if (!is_null($this->container['vehicle_license_number']) && (mb_strlen($this->container['vehicle_license_number']) > 256)) {
            $invalidProperties[] = "invalid value for 'vehicle_license_number', the character length must be smaller than or equal to 256.";
        }

        if (!is_null($this->container['vehicle_license_state']) && (mb_strlen($this->container['vehicle_license_state']) > 256)) {
            $invalidProperties[] = "invalid value for 'vehicle_license_state', the character length must be smaller than or equal to 256.";
        }

        if (!is_null($this->container['trailer_license_number']) && (mb_strlen($this->container['trailer_license_number']) > 256)) {
            $invalidProperties[] = "invalid value for 'trailer_license_number', the character length must be smaller than or equal to 256.";
        }

        if (!is_null($this->container['trailer_license_state']) && (mb_strlen($this->container['trailer_license_state']) > 256)) {
            $invalidProperties[] = "invalid value for 'trailer_license_state', the character length must be smaller than or equal to 256.";
        }

        if (!is_null($this->container['trailer_hub']) && (mb_strlen($this->container['trailer_hub']) > 256)) {
            $invalidProperties[] = "invalid value for 'trailer_hub', the character length must be smaller than or equal to 256.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets vehicle_number
     *
     * @return string|null
     */
    public function getVehicleNumber()
    {
        return $this->container['vehicle_number'];
    }

    /**
     * Sets vehicle_number
     *
     * @param string|null $vehicle_number This field identifies the vehicle number.
     *
     * @return self
     */
    public function setVehicleNumber($vehicle_number)
    {
        if (is_null($vehicle_number)) {
            throw new \InvalidArgumentException('non-nullable vehicle_number cannot be null');
        }
        if ((mb_strlen($vehicle_number) > 256)) {
            throw new \InvalidArgumentException('invalid length for $vehicle_number when calling Vehicle., must be smaller than or equal to 256.');
        }

        $this->container['vehicle_number'] = $vehicle_number;

        return $this;
    }

    /**
     * Gets odometer_reading
     *
     * @return string|null
     */
    public function getOdometerReading()
    {
        return $this->container['odometer_reading'];
    }

    /**
     * Sets odometer_reading
     *
     * @param string|null $odometer_reading This field identifies the vehicle odometer reading keyed in by the customer or clerk.
     *
     * @return self
     */
    public function setOdometerReading($odometer_reading)
    {
        if (is_null($odometer_reading)) {
            throw new \InvalidArgumentException('non-nullable odometer_reading cannot be null');
        }
        if ((mb_strlen($odometer_reading) > 256)) {
            throw new \InvalidArgumentException('invalid length for $odometer_reading when calling Vehicle., must be smaller than or equal to 256.');
        }

        $this->container['odometer_reading'] = $odometer_reading;

        return $this;
    }

    /**
     * Gets trip_number
     *
     * @return string|null
     */
    public function getTripNumber()
    {
        return $this->container['trip_number'];
    }

    /**
     * Sets trip_number
     *
     * @param string|null $trip_number This field contains the trip number
     *
     * @return self
     */
    public function setTripNumber($trip_number)
    {
        if (is_null($trip_number)) {
            throw new \InvalidArgumentException('non-nullable trip_number cannot be null');
        }
        if ((mb_strlen($trip_number) > 256)) {
            throw new \InvalidArgumentException('invalid length for $trip_number when calling Vehicle., must be smaller than or equal to 256.');
        }

        $this->container['trip_number'] = $trip_number;

        return $this;
    }

    /**
     * Gets unit_id
     *
     * @return string|null
     */
    public function getUnitId()
    {
        return $this->container['unit_id'];
    }

    /**
     * Sets unit_id
     *
     * @param string|null $unit_id This field contains the unit ID.
     *
     * @return self
     */
    public function setUnitId($unit_id)
    {
        if (is_null($unit_id)) {
            throw new \InvalidArgumentException('non-nullable unit_id cannot be null');
        }
        if ((mb_strlen($unit_id) > 256)) {
            throw new \InvalidArgumentException('invalid length for $unit_id when calling Vehicle., must be smaller than or equal to 256.');
        }

        $this->container['unit_id'] = $unit_id;

        return $this;
    }

    /**
     * Gets reefer_hours
     *
     * @return string|null
     */
    public function getReeferHours()
    {
        return $this->container['reefer_hours'];
    }

    /**
     * Sets reefer_hours
     *
     * @param string|null $reefer_hours This field contains the reefer hours.
     *
     * @return self
     */
    public function setReeferHours($reefer_hours)
    {
        if (is_null($reefer_hours)) {
            throw new \InvalidArgumentException('non-nullable reefer_hours cannot be null');
        }
        if ((mb_strlen($reefer_hours) > 256)) {
            throw new \InvalidArgumentException('invalid length for $reefer_hours when calling Vehicle., must be smaller than or equal to 256.');
        }

        $this->container['reefer_hours'] = $reefer_hours;

        return $this;
    }

    /**
     * Gets maintenance_id
     *
     * @return string|null
     */
    public function getMaintenanceId()
    {
        return $this->container['maintenance_id'];
    }

    /**
     * Sets maintenance_id
     *
     * @param string|null $maintenance_id This field contains the maintenance ID.
     *
     * @return self
     */
    public function setMaintenanceId($maintenance_id)
    {
        if (is_null($maintenance_id)) {
            throw new \InvalidArgumentException('non-nullable maintenance_id cannot be null');
        }
        if ((mb_strlen($maintenance_id) > 256)) {
            throw new \InvalidArgumentException('invalid length for $maintenance_id when calling Vehicle., must be smaller than or equal to 256.');
        }

        $this->container['maintenance_id'] = $maintenance_id;

        return $this;
    }

    /**
     * Gets trailer_number
     *
     * @return string|null
     */
    public function getTrailerNumber()
    {
        return $this->container['trailer_number'];
    }

    /**
     * Sets trailer_number
     *
     * @param string|null $trailer_number This field contains the trailer ID number.
     *
     * @return self
     */
    public function setTrailerNumber($trailer_number)
    {
        if (is_null($trailer_number)) {
            throw new \InvalidArgumentException('non-nullable trailer_number cannot be null');
        }
        if ((mb_strlen($trailer_number) > 256)) {
            throw new \InvalidArgumentException('invalid length for $trailer_number when calling Vehicle., must be smaller than or equal to 256.');
        }

        $this->container['trailer_number'] = $trailer_number;

        return $this;
    }

    /**
     * Gets hubometer
     *
     * @return string|null
     */
    public function getHubometer()
    {
        return $this->container['hubometer'];
    }

    /**
     * Sets hubometer
     *
     * @param string|null $hubometer This field contains the hubometer value.
     *
     * @return self
     */
    public function setHubometer($hubometer)
    {
        if (is_null($hubometer)) {
            throw new \InvalidArgumentException('non-nullable hubometer cannot be null');
        }
        if ((mb_strlen($hubometer) > 256)) {
            throw new \InvalidArgumentException('invalid length for $hubometer when calling Vehicle., must be smaller than or equal to 256.');
        }

        $this->container['hubometer'] = $hubometer;

        return $this;
    }

    /**
     * Gets vehicle_license_number
     *
     * @return string|null
     */
    public function getVehicleLicenseNumber()
    {
        return $this->container['vehicle_license_number'];
    }

    /**
     * Sets vehicle_license_number
     *
     * @param string|null $vehicle_license_number This field contains Vehicle license number.
     *
     * @return self
     */
    public function setVehicleLicenseNumber($vehicle_license_number)
    {
        if (is_null($vehicle_license_number)) {
            throw new \InvalidArgumentException('non-nullable vehicle_license_number cannot be null');
        }
        if ((mb_strlen($vehicle_license_number) > 256)) {
            throw new \InvalidArgumentException('invalid length for $vehicle_license_number when calling Vehicle., must be smaller than or equal to 256.');
        }

        $this->container['vehicle_license_number'] = $vehicle_license_number;

        return $this;
    }

    /**
     * Gets vehicle_license_state
     *
     * @return string|null
     */
    public function getVehicleLicenseState()
    {
        return $this->container['vehicle_license_state'];
    }

    /**
     * Sets vehicle_license_state
     *
     * @param string|null $vehicle_license_state This field contains the vehicle license<a href=\"../docs?path=docs/Resources/Master-Data/State-Code.md\"> state or province code</a>.
     *
     * @return self
     */
    public function setVehicleLicenseState($vehicle_license_state)
    {
        if (is_null($vehicle_license_state)) {
            throw new \InvalidArgumentException('non-nullable vehicle_license_state cannot be null');
        }
        if ((mb_strlen($vehicle_license_state) > 256)) {
            throw new \InvalidArgumentException('invalid length for $vehicle_license_state when calling Vehicle., must be smaller than or equal to 256.');
        }

        $this->container['vehicle_license_state'] = $vehicle_license_state;

        return $this;
    }

    /**
     * Gets trailer_license_number
     *
     * @return string|null
     */
    public function getTrailerLicenseNumber()
    {
        return $this->container['trailer_license_number'];
    }

    /**
     * Sets trailer_license_number
     *
     * @param string|null $trailer_license_number This field contains trailer license number.
     *
     * @return self
     */
    public function setTrailerLicenseNumber($trailer_license_number)
    {
        if (is_null($trailer_license_number)) {
            throw new \InvalidArgumentException('non-nullable trailer_license_number cannot be null');
        }
        if ((mb_strlen($trailer_license_number) > 256)) {
            throw new \InvalidArgumentException('invalid length for $trailer_license_number when calling Vehicle., must be smaller than or equal to 256.');
        }

        $this->container['trailer_license_number'] = $trailer_license_number;

        return $this;
    }

    /**
     * Gets trailer_license_state
     *
     * @return string|null
     */
    public function getTrailerLicenseState()
    {
        return $this->container['trailer_license_state'];
    }

    /**
     * Sets trailer_license_state
     *
     * @param string|null $trailer_license_state This field contains the trailer license<a href=\"../docs?path=docs/Resources/Master-Data/State-Code.md\"> state or province code</a>.
     *
     * @return self
     */
    public function setTrailerLicenseState($trailer_license_state)
    {
        if (is_null($trailer_license_state)) {
            throw new \InvalidArgumentException('non-nullable trailer_license_state cannot be null');
        }
        if ((mb_strlen($trailer_license_state) > 256)) {
            throw new \InvalidArgumentException('invalid length for $trailer_license_state when calling Vehicle., must be smaller than or equal to 256.');
        }

        $this->container['trailer_license_state'] = $trailer_license_state;

        return $this;
    }

    /**
     * Gets trailer_hub
     *
     * @return string|null
     */
    public function getTrailerHub()
    {
        return $this->container['trailer_hub'];
    }

    /**
     * Sets trailer_hub
     *
     * @param string|null $trailer_hub This field identifies the trailer hub serial number keyed in by the customer or clerk.
     *
     * @return self
     */
    public function setTrailerHub($trailer_hub)
    {
        if (is_null($trailer_hub)) {
            throw new \InvalidArgumentException('non-nullable trailer_hub cannot be null');
        }
        if ((mb_strlen($trailer_hub) > 256)) {
            throw new \InvalidArgumentException('invalid length for $trailer_hub when calling Vehicle., must be smaller than or equal to 256.');
        }

        $this->container['trailer_hub'] = $trailer_hub;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


